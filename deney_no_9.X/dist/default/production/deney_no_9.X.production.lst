

Microchip MPLAB XC8 Assembler V2.45 build 20230818022343 
                                                                                               Fri Dec 22 21:14:21 2023

Microchip MPLAB XC8 C Compiler v2.45 (Free license) build 20230818022343 Og9 
     1                           	processor	16F877A
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	strings,global,class=STRING,delta=2,noexec
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,noexec
     7                           	psect	clrtext,global,class=CODE,delta=2
     8                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
     9                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    11                           	psect	maintext,global,class=CODE,split=1,delta=2
    12                           	psect	text1,local,class=CODE,merge=1,delta=2,group=1
    13                           	psect	text2,local,class=CODE,merge=1,delta=2,group=1
    14                           	psect	text3,local,class=CODE,merge=1,delta=2,group=2
    15                           	psect	text4,local,class=CODE,merge=1,delta=2,group=2
    16                           	psect	text5,local,class=CODE,merge=1,delta=2,group=3
    17                           	psect	text6,local,class=CODE,merge=1,delta=2,group=1
    18                           	psect	text7,local,class=CODE,merge=1,delta=2,group=2
    19                           	psect	text8,local,class=CODE,merge=1,delta=2,group=2
    20                           	psect	text9,local,class=CODE,merge=1,delta=2,group=2
    21                           	psect	text10,local,class=CODE,merge=1,delta=2,group=2
    22                           	psect	text11,local,class=CODE,merge=1,delta=2,group=2
    23                           	psect	text12,local,class=CODE,merge=1,delta=2,group=2
    24                           	psect	text13,local,class=CODE,merge=1,delta=2,group=2
    25                           	psect	text14,local,class=CODE,merge=1,delta=2,group=2
    26                           	psect	text15,local,class=CODE,merge=1,delta=2,group=2
    27                           	psect	text16,local,class=CODE,merge=1,delta=2,group=2
    28                           	psect	text17,local,class=CODE,merge=1,delta=2,group=2
    29                           	psect	text18,local,class=CODE,merge=1,delta=2,group=2
    30                           	psect	text19,local,class=CODE,merge=1,delta=2,group=2
    31                           	psect	text20,local,class=CODE,merge=1,delta=2,group=2
    32                           	psect	text21,local,class=CODE,merge=1,delta=2,group=2
    33                           	psect	text22,local,class=CODE,merge=1,delta=2,group=2
    34                           	psect	text23,local,class=CODE,merge=1,delta=2,group=2
    35                           	psect	text24,local,class=CODE,merge=1,delta=2
    36                           	psect	text25,local,class=CODE,merge=1,delta=2
    37                           	psect	text26,local,class=CODE,merge=1,delta=2
    38                           	psect	text27,local,class=CODE,merge=1,delta=2
    39                           	psect	text28,local,class=CODE,merge=1,delta=2
    40                           	psect	text29,local,class=CODE,merge=1,delta=2
    41                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    42                           	dabs	1,0x7E,2
    43     0000                     
    44                           ; Generated 18/08/2023 GMT
    45                           ; 
    46                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    47                           ; All rights reserved.
    48                           ; 
    49                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    50                           ; 
    51                           ; Redistribution and use in source and binary forms, with or without modification, are
    52                           ; permitted provided that the following conditions are met:
    53                           ; 
    54                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    55                           ;        conditions and the following disclaimer.
    56                           ; 
    57                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    58                           ;        of conditions and the following disclaimer in the documentation and/or other
    59                           ;        materials provided with the distribution. Publication is not required when
    60                           ;        this file is used in an embedded application.
    61                           ; 
    62                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    63                           ;        software without specific prior written permission.
    64                           ; 
    65                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    66                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    67                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    68                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    69                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    70                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    71                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    72                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    73                           ; 
    74                           ; 
    75                           ; Code-generator required, PIC16F877A Definitions
    76                           ; 
    77                           ; SFR Addresses
    78     0000                     	;# 
    79     0001                     	;# 
    80     0002                     	;# 
    81     0003                     	;# 
    82     0004                     	;# 
    83     0005                     	;# 
    84     0006                     	;# 
    85     0007                     	;# 
    86     0008                     	;# 
    87     0009                     	;# 
    88     000A                     	;# 
    89     000B                     	;# 
    90     000C                     	;# 
    91     000D                     	;# 
    92     000E                     	;# 
    93     000E                     	;# 
    94     000F                     	;# 
    95     0010                     	;# 
    96     0011                     	;# 
    97     0012                     	;# 
    98     0013                     	;# 
    99     0014                     	;# 
   100     0015                     	;# 
   101     0015                     	;# 
   102     0016                     	;# 
   103     0017                     	;# 
   104     0018                     	;# 
   105     0019                     	;# 
   106     001A                     	;# 
   107     001B                     	;# 
   108     001B                     	;# 
   109     001C                     	;# 
   110     001D                     	;# 
   111     001E                     	;# 
   112     001F                     	;# 
   113     0081                     	;# 
   114     0085                     	;# 
   115     0086                     	;# 
   116     0087                     	;# 
   117     0088                     	;# 
   118     0089                     	;# 
   119     008C                     	;# 
   120     008D                     	;# 
   121     008E                     	;# 
   122     0091                     	;# 
   123     0092                     	;# 
   124     0093                     	;# 
   125     0094                     	;# 
   126     0098                     	;# 
   127     0099                     	;# 
   128     009C                     	;# 
   129     009D                     	;# 
   130     009E                     	;# 
   131     009F                     	;# 
   132     010C                     	;# 
   133     010D                     	;# 
   134     010E                     	;# 
   135     010F                     	;# 
   136     018C                     	;# 
   137     018D                     	;# 
   138     0000                     	;# 
   139     0001                     	;# 
   140     0002                     	;# 
   141     0003                     	;# 
   142     0004                     	;# 
   143     0005                     	;# 
   144     0006                     	;# 
   145     0007                     	;# 
   146     0008                     	;# 
   147     0009                     	;# 
   148     000A                     	;# 
   149     000B                     	;# 
   150     000C                     	;# 
   151     000D                     	;# 
   152     000E                     	;# 
   153     000E                     	;# 
   154     000F                     	;# 
   155     0010                     	;# 
   156     0011                     	;# 
   157     0012                     	;# 
   158     0013                     	;# 
   159     0014                     	;# 
   160     0015                     	;# 
   161     0015                     	;# 
   162     0016                     	;# 
   163     0017                     	;# 
   164     0018                     	;# 
   165     0019                     	;# 
   166     001A                     	;# 
   167     001B                     	;# 
   168     001B                     	;# 
   169     001C                     	;# 
   170     001D                     	;# 
   171     001E                     	;# 
   172     001F                     	;# 
   173     0081                     	;# 
   174     0085                     	;# 
   175     0086                     	;# 
   176     0087                     	;# 
   177     0088                     	;# 
   178     0089                     	;# 
   179     008C                     	;# 
   180     008D                     	;# 
   181     008E                     	;# 
   182     0091                     	;# 
   183     0092                     	;# 
   184     0093                     	;# 
   185     0094                     	;# 
   186     0098                     	;# 
   187     0099                     	;# 
   188     009E                     	;# 
   189     009F                     	;# 
   190     010C                     	;# 
   191     010D                     	;# 
   192     010E                     	;# 
   193     010F                     	;# 
   194     018C                     	;# 
   195     018D                     	;# 
   196     0000                     	;# 
   197     0001                     	;# 
   198     0002                     	;# 
   199     0003                     	;# 
   200     0004                     	;# 
   201     0005                     	;# 
   202     0006                     	;# 
   203     0007                     	;# 
   204     0008                     	;# 
   205     0009                     	;# 
   206     000A                     	;# 
   207     000B                     	;# 
   208     000C                     	;# 
   209     000D                     	;# 
   210     000E                     	;# 
   211     000E                     	;# 
   212     000F                     	;# 
   213     0010                     	;# 
   214     0011                     	;# 
   215     0012                     	;# 
   216     0013                     	;# 
   217     0014                     	;# 
   218     0015                     	;# 
   219     0015                     	;# 
   220     0016                     	;# 
   221     0017                     	;# 
   222     0018                     	;# 
   223     0019                     	;# 
   224     001A                     	;# 
   225     001B                     	;# 
   226     001B                     	;# 
   227     001C                     	;# 
   228     001D                     	;# 
   229     001E                     	;# 
   230     001F                     	;# 
   231     0081                     	;# 
   232     0085                     	;# 
   233     0086                     	;# 
   234     0087                     	;# 
   235     0088                     	;# 
   236     0089                     	;# 
   237     008C                     	;# 
   238     008D                     	;# 
   239     008E                     	;# 
   240     0091                     	;# 
   241     0092                     	;# 
   242     0093                     	;# 
   243     0094                     	;# 
   244     0098                     	;# 
   245     0099                     	;# 
   246     009C                     	;# 
   247     009D                     	;# 
   248     009E                     	;# 
   249     009F                     	;# 
   250     010C                     	;# 
   251     010D                     	;# 
   252     010E                     	;# 
   253     010F                     	;# 
   254     018C                     	;# 
   255     018D                     	;# 
   256                           
   257                           	psect	strings
   258     0800                     __pstrings:
   259     0800                     stringtab:
   260     0800                     __stringtab:
   261                           
   262                           ;	String table - string pointers are 1 byte each
   263     0800  1BFF               	btfsc	btemp+1,7
   264     0801  280A               	ljmp	stringcode
   265     0802  1383               	bcf	3,7
   266     0803  187F               	btfsc	btemp+1,0
   267     0804  1783               	bsf	3,7
   268     0805  0800               	movf	0,w
   269     0806  0A84               	incf	4,f
   270     0807  1903               	skipnz
   271     0808  0AFF               	incf	btemp+1,f
   272     0809  0008               	return
   273     080A                     stringcode:
   274     080A                     stringdir:
   275     080A  3008               	movlw	high stringdir
   276     080B  008A               	movwf	10
   277     080C  0804               	movf	4,w
   278     080D  0A84               	incf	4,f
   279     080E  0782               	addwf	2,f
   280     080F                     __stringbase:
   281     080F  3400               	retlw	0
   282     0810                     __end_of__stringtab:
   283     0810                     __powers_:
   284     0810  3400               	retlw	0
   285     0811  3480               	retlw	128
   286     0812  343F               	retlw	63
   287     0813  3400               	retlw	0
   288     0814  3420               	retlw	32
   289     0815  3441               	retlw	65
   290     0816  3400               	retlw	0
   291     0817  34C8               	retlw	200
   292     0818  3442               	retlw	66
   293     0819  3400               	retlw	0
   294     081A  347A               	retlw	122
   295     081B  3444               	retlw	68
   296     081C  3440               	retlw	64
   297     081D  341C               	retlw	28
   298     081E  3446               	retlw	70
   299     081F  3450               	retlw	80
   300     0820  34C3               	retlw	195
   301     0821  3447               	retlw	71
   302     0822  3424               	retlw	36
   303     0823  3474               	retlw	116
   304     0824  3449               	retlw	73
   305     0825  3497               	retlw	151
   306     0826  3418               	retlw	24
   307     0827  344B               	retlw	75
   308     0828  34BC               	retlw	188
   309     0829  34BE               	retlw	190
   310     082A  344C               	retlw	76
   311     082B  346B               	retlw	107
   312     082C  346E               	retlw	110
   313     082D  344E               	retlw	78
   314     082E  3403               	retlw	3
   315     082F  3415               	retlw	21
   316     0830  3450               	retlw	80
   317     0831  3479               	retlw	121
   318     0832  34AD               	retlw	173
   319     0833  3460               	retlw	96
   320     0834  34F3               	retlw	243
   321     0835  3449               	retlw	73
   322     0836  3471               	retlw	113
   323     0837                     __end_of__powers_:
   324     0837                     __npowers_:
   325     0837  3400               	retlw	0
   326     0838  3480               	retlw	128
   327     0839  343F               	retlw	63
   328     083A  34CD               	retlw	205
   329     083B  34CC               	retlw	204
   330     083C  343D               	retlw	61
   331     083D  34D7               	retlw	215
   332     083E  3423               	retlw	35
   333     083F  343C               	retlw	60
   334     0840  3412               	retlw	18
   335     0841  3483               	retlw	131
   336     0842  343A               	retlw	58
   337     0843  34B7               	retlw	183
   338     0844  34D1               	retlw	209
   339     0845  3438               	retlw	56
   340     0846  34C6               	retlw	198
   341     0847  3427               	retlw	39
   342     0848  3437               	retlw	55
   343     0849  3438               	retlw	56
   344     084A  3486               	retlw	134
   345     084B  3435               	retlw	53
   346     084C  34C0               	retlw	192
   347     084D  34D6               	retlw	214
   348     084E  3433               	retlw	51
   349     084F  34CC               	retlw	204
   350     0850  342B               	retlw	43
   351     0851  3432               	retlw	50
   352     0852  3470               	retlw	112
   353     0853  3489               	retlw	137
   354     0854  3430               	retlw	48
   355     0855  34E7               	retlw	231
   356     0856  34DB               	retlw	219
   357     0857  342E               	retlw	46
   358     0858  34E5               	retlw	229
   359     0859  343C               	retlw	60
   360     085A  341E               	retlw	30
   361     085B  3442               	retlw	66
   362     085C  34A2               	retlw	162
   363     085D  340D               	retlw	13
   364     085E                     __end_of__npowers_:
   365     085E                     _dpowers:
   366     085E  3401               	retlw	1
   367     085F  3400               	retlw	0
   368     0860  3400               	retlw	0
   369     0861  3400               	retlw	0
   370     0862  340A               	retlw	10
   371     0863  3400               	retlw	0
   372     0864  3400               	retlw	0
   373     0865  3400               	retlw	0
   374     0866  3464               	retlw	100
   375     0867  3400               	retlw	0
   376     0868  3400               	retlw	0
   377     0869  3400               	retlw	0
   378     086A  34E8               	retlw	232
   379     086B  3403               	retlw	3
   380     086C  3400               	retlw	0
   381     086D  3400               	retlw	0
   382     086E  3410               	retlw	16
   383     086F  3427               	retlw	39
   384     0870  3400               	retlw	0
   385     0871  3400               	retlw	0
   386     0872  34A0               	retlw	160
   387     0873  3486               	retlw	134
   388     0874  3401               	retlw	1
   389     0875  3400               	retlw	0
   390     0876  3440               	retlw	64
   391     0877  3442               	retlw	66
   392     0878  340F               	retlw	15
   393     0879  3400               	retlw	0
   394     087A  3480               	retlw	128
   395     087B  3496               	retlw	150
   396     087C  3498               	retlw	152
   397     087D  3400               	retlw	0
   398     087E  3400               	retlw	0
   399     087F  34E1               	retlw	225
   400     0880  34F5               	retlw	245
   401     0881  3405               	retlw	5
   402     0882  3400               	retlw	0
   403     0883  34CA               	retlw	202
   404     0884  349A               	retlw	154
   405     0885  343B               	retlw	59
   406     0886                     __end_of_dpowers:
   407     001E                     _ADRESH	set	30
   408     001F                     _ADCON0bits	set	31
   409     0008                     _PORTD	set	8
   410     0007                     _PORTC	set	7
   411     003A                     _RC2	set	58
   412     0038                     _RC0	set	56
   413     0047                     _RD7	set	71
   414     0046                     _RD6	set	70
   415     0045                     _RD5	set	69
   416     0044                     _RD4	set	68
   417     009E                     _ADRESL	set	158
   418     009F                     _ADCON1bits	set	159
   419     0087                     _TRISC	set	135
   420     0088                     _TRISD	set	136
   421     0085                     _TRISA	set	133
   422     0886                     STR_2:
   423     0886  3441               	retlw	65	;'A'
   424     0887  344E               	retlw	78	;'N'
   425     0888  3430               	retlw	48	;'0'
   426     0889  343D               	retlw	61	;'='
   427     088A  3400               	retlw	0
   428     088B                     STR_4:
   429     088B  3441               	retlw	65	;'A'
   430     088C  344E               	retlw	78	;'N'
   431     088D  3431               	retlw	49	;'1'
   432     088E  343D               	retlw	61	;'='
   433     088F  3400               	retlw	0
   434     0890                     STR_6:
   435     0890  3441               	retlw	65	;'A'
   436     0891  344E               	retlw	78	;'N'
   437     0892  3432               	retlw	50	;'2'
   438     0893  343D               	retlw	61	;'='
   439     0894  3400               	retlw	0
   440     0895                     STR_1:
   441     0895  3425               	retlw	37	;'%'
   442     0896  342E               	retlw	46	;'.'
   443     0897  3432               	retlw	50	;'2'
   444     0898  3466               	retlw	102	;'f'
   445     0899  3400               	retlw	0
   446     0895                     
   447                           	psect	cinit
   448     07F5                     start_initialization:	
   449                           ; #config settings
   450                           
   451     07F5                     __initialization:
   452                           
   453                           ; Clear objects allocated to BANK1
   454     07F5  1383               	bcf	3,7	;select IRP bank0
   455     07F6  30A0               	movlw	low __pbssBANK1
   456     07F7  0084               	movwf	4
   457     07F8  30B2               	movlw	low (__pbssBANK1+18)
   458     07F9  160A  118A  260D   	fcall	clear_ram0
   459     07FC                     end_of_initialization:	
   460                           ;End of C runtime variable initialization code
   461                           
   462     07FC                     __end_of__initialization:
   463     07FC  0183               	clrf	3
   464     07FD  120A  158A  2E79   	ljmp	_main	;jump to C main() function
   465                           
   466                           	psect	bssBANK1
   467     00A0                     __pbssBANK1:
   468     00A0                     _AN2:
   469     00A0                     	ds	3
   470     00A3                     _AN1:
   471     00A3                     	ds	3
   472     00A6                     _AN0:
   473     00A6                     	ds	3
   474     00A9                     _D2:
   475     00A9                     	ds	3
   476     00AC                     _D1:
   477     00AC                     	ds	3
   478     00AF                     _D0:
   479     00AF                     	ds	3
   480                           
   481                           	psect	clrtext
   482     160D                     clear_ram0:	
   483                           ;	Called with FSR containing the base address, and
   484                           ;	W with the last address+1
   485                           
   486     160D  0064               	clrwdt	;clear the watchdog before getting into this loop
   487     160E                     clrloop0:
   488     160E  0180               	clrf	0	;clear RAM location pointed to by FSR
   489     160F  0A84               	incf	4,f	;increment pointer
   490     1610  0604               	xorwf	4,w	;XOR with final address
   491     1611  1903               	btfsc	3,2	;have we reached the end yet?
   492     1612  3400               	retlw	0	;all done for this memory range, return
   493     1613  0604               	xorwf	4,w	;XOR again to restore value
   494     1614  2E0E               	goto	clrloop0	;do the next byte
   495                           
   496                           	psect	cstackBANK1
   497     00B2                     __pcstackBANK1:
   498     00B2                     ??_main:
   499                           
   500                           ; 1 bytes @ 0x0
   501     00B2                     	ds	2
   502     00B4                     main@char_digital:
   503                           
   504                           ; 15 bytes @ 0x2
   505     00B4                     	ds	15
   506                           
   507                           	psect	cstackCOMMON
   508     0070                     __pcstackCOMMON:
   509     0070                     ?_isdigit:
   510     0070                     ?___ftge:	
   511                           ; 1 bit 
   512                           
   513     0070                     ??_isdigit:	
   514                           ; 1 bit 
   515                           
   516     0070                     ?_Lcd_Port:	
   517                           ; 1 bytes @ 0x0
   518                           
   519     0070                     ??_Lcd_Port:	
   520                           ; 1 bytes @ 0x0
   521                           
   522     0070                     ?_Lcd_Cmd:	
   523                           ; 1 bytes @ 0x0
   524                           
   525     0070                     ?_Lcd_Init:	
   526                           ; 1 bytes @ 0x0
   527                           
   528     0070                     ?_Lcd_Write_Char:	
   529                           ; 1 bytes @ 0x0
   530                           
   531     0070                     ?_main:	
   532                           ; 1 bytes @ 0x0
   533                           
   534     0070                     ?___lbmod:	
   535                           ; 1 bytes @ 0x0
   536                           
   537     0070                     ?___wmul:	
   538                           ; 1 bytes @ 0x0
   539                           
   540     0070                     ?___awmod:	
   541                           ; 2 bytes @ 0x0
   542                           
   543     0070                     ?___ftpack:	
   544                           ; 2 bytes @ 0x0
   545                           
   546     0070                     ?___ftneg:	
   547                           ; 3 bytes @ 0x0
   548                           
   549     0070                     ?__tdiv_to_l_:	
   550                           ; 3 bytes @ 0x0
   551                           
   552     0070                     ?__div_to_l_:	
   553                           ; 4 bytes @ 0x0
   554                           
   555     0070                     ?___lldiv:	
   556                           ; 4 bytes @ 0x0
   557                           
   558     0070                     ?___llmod:	
   559                           ; 4 bytes @ 0x0
   560                           
   561     0070                     Lcd_Port@a:	
   562                           ; 4 bytes @ 0x0
   563                           
   564     0070                     ___lbmod@divisor:	
   565                           ; 1 bytes @ 0x0
   566                           
   567     0070                     _isdigit$619:	
   568                           ; 1 bytes @ 0x0
   569                           
   570     0070                     ___wmul@multiplier:	
   571                           ; 1 bytes @ 0x0
   572                           
   573     0070                     ___awmod@divisor:	
   574                           ; 2 bytes @ 0x0
   575                           
   576     0070                     __div_to_l_@f1:	
   577                           ; 2 bytes @ 0x0
   578                           
   579     0070                     ___ftpack@arg:	
   580                           ; 3 bytes @ 0x0
   581                           
   582     0070                     __tdiv_to_l_@f1:	
   583                           ; 3 bytes @ 0x0
   584                           
   585     0070                     ___ftge@ff1:	
   586                           ; 3 bytes @ 0x0
   587                           
   588     0070                     ___ftneg@f1:	
   589                           ; 3 bytes @ 0x0
   590                           
   591     0070                     ___lldiv@divisor:	
   592                           ; 3 bytes @ 0x0
   593                           
   594     0070                     ___llmod@divisor:	
   595                           ; 4 bytes @ 0x0
   596                           
   597                           
   598                           ; 4 bytes @ 0x0
   599     0070                     	ds	1
   600     0071                     ??_Lcd_Cmd:
   601     0071                     ??_Lcd_Write_Char:	
   602                           ; 1 bytes @ 0x1
   603                           
   604     0071                     ??___lbmod:	
   605                           ; 1 bytes @ 0x1
   606                           
   607     0071                     isdigit@c:	
   608                           ; 1 bytes @ 0x1
   609                           
   610                           
   611                           ; 1 bytes @ 0x1
   612     0071                     	ds	1
   613     0072                     Lcd_Write_Char@temp:
   614     0072                     ___wmul@multiplicand:	
   615                           ; 1 bytes @ 0x2
   616                           
   617     0072                     ___awmod@dividend:	
   618                           ; 2 bytes @ 0x2
   619                           
   620                           
   621                           ; 2 bytes @ 0x2
   622     0072                     	ds	1
   623     0073                     ??___ftneg:
   624     0073                     Lcd_Cmd@a:	
   625                           ; 1 bytes @ 0x3
   626                           
   627     0073                     Lcd_Write_Char@y:	
   628                           ; 1 bytes @ 0x3
   629                           
   630     0073                     ___ftpack@exp:	
   631                           ; 1 bytes @ 0x3
   632                           
   633     0073                     ___lbmod@dividend:	
   634                           ; 1 bytes @ 0x3
   635                           
   636     0073                     __div_to_l_@f2:	
   637                           ; 1 bytes @ 0x3
   638                           
   639     0073                     __tdiv_to_l_@f2:	
   640                           ; 3 bytes @ 0x3
   641                           
   642     0073                     ___ftge@ff2:	
   643                           ; 3 bytes @ 0x3
   644                           
   645                           
   646                           ; 3 bytes @ 0x3
   647     0073                     	ds	1
   648     0074                     ?_Lcd_Set_Cursor:
   649     0074                     ??_Lcd_Init:	
   650                           ; 1 bytes @ 0x4
   651                           
   652     0074                     ??___wmul:	
   653                           ; 1 bytes @ 0x4
   654                           
   655     0074                     ??___awmod:	
   656                           ; 1 bytes @ 0x4
   657                           
   658     0074                     Lcd_Set_Cursor@b:	
   659                           ; 1 bytes @ 0x4
   660                           
   661     0074                     Lcd_Write_Char@a:	
   662                           ; 1 bytes @ 0x4
   663                           
   664     0074                     ___awmod@counter:	
   665                           ; 1 bytes @ 0x4
   666                           
   667     0074                     ___ftpack@sign:	
   668                           ; 1 bytes @ 0x4
   669                           
   670     0074                     ___lbmod@counter:	
   671                           ; 1 bytes @ 0x4
   672                           
   673     0074                     ___wmul@product:	
   674                           ; 1 bytes @ 0x4
   675                           
   676     0074                     ___lldiv@dividend:	
   677                           ; 2 bytes @ 0x4
   678                           
   679     0074                     ___llmod@dividend:	
   680                           ; 4 bytes @ 0x4
   681                           
   682                           
   683                           ; 4 bytes @ 0x4
   684     0074                     	ds	1
   685     0075                     ??___ftpack:
   686     0075                     ??_Lcd_Set_Cursor:	
   687                           ; 1 bytes @ 0x5
   688                           
   689     0075                     ?_Lcd_Write_String:	
   690                           ; 1 bytes @ 0x5
   691                           
   692     0075                     ___awmod@sign:	
   693                           ; 1 bytes @ 0x5
   694                           
   695     0075                     ___lbmod@rem:	
   696                           ; 1 bytes @ 0x5
   697                           
   698     0075                     Lcd_Write_String@a:	
   699                           ; 1 bytes @ 0x5
   700                           
   701                           
   702                           ; 2 bytes @ 0x5
   703     0075                     	ds	1
   704     0076                     ??__tdiv_to_l_:
   705     0076                     ??__div_to_l_:	
   706                           ; 1 bytes @ 0x6
   707                           
   708     0076                     ??___ftge:	
   709                           ; 1 bytes @ 0x6
   710                           
   711     0076                     ?___lbdiv:	
   712                           ; 1 bytes @ 0x6
   713                           
   714     0076                     ?___awdiv:	
   715                           ; 1 bytes @ 0x6
   716                           
   717     0076                     Lcd_Set_Cursor@a:	
   718                           ; 2 bytes @ 0x6
   719                           
   720     0076                     ___lbdiv@divisor:	
   721                           ; 1 bytes @ 0x6
   722                           
   723     0076                     ___awdiv@divisor:	
   724                           ; 1 bytes @ 0x6
   725                           
   726                           
   727                           ; 2 bytes @ 0x6
   728     0076                     	ds	1
   729     0077                     ??_Lcd_Write_String:
   730     0077                     ??___lbdiv:	
   731                           ; 1 bytes @ 0x7
   732                           
   733     0077                     Lcd_Set_Cursor@z:	
   734                           ; 1 bytes @ 0x7
   735                           
   736     0077                     ___lbdiv@dividend:	
   737                           ; 1 bytes @ 0x7
   738                           
   739                           
   740                           ; 1 bytes @ 0x7
   741     0077                     	ds	1
   742     0078                     ??___lldiv:
   743     0078                     ??___llmod:	
   744                           ; 1 bytes @ 0x8
   745                           
   746     0078                     ?___awtoft:	
   747                           ; 1 bytes @ 0x8
   748                           
   749     0078                     ?___lltoft:	
   750                           ; 3 bytes @ 0x8
   751                           
   752     0078                     Lcd_Set_Cursor@y:	
   753                           ; 3 bytes @ 0x8
   754                           
   755     0078                     ___lbdiv@counter:	
   756                           ; 1 bytes @ 0x8
   757                           
   758     0078                     ___awdiv@dividend:	
   759                           ; 1 bytes @ 0x8
   760                           
   761     0078                     ___awtoft@c:	
   762                           ; 2 bytes @ 0x8
   763                           
   764     0078                     ___lltoft@c:	
   765                           ; 2 bytes @ 0x8
   766                           
   767                           
   768                           ; 4 bytes @ 0x8
   769     0078                     	ds	1
   770     0079                     Lcd_Set_Cursor@temp:
   771     0079                     ___lbdiv@quotient:	
   772                           ; 1 bytes @ 0x9
   773                           
   774     0079                     ___llmod@counter:	
   775                           ; 1 bytes @ 0x9
   776                           
   777     0079                     ___lldiv@quotient:	
   778                           ; 1 bytes @ 0x9
   779                           
   780                           
   781                           ; 4 bytes @ 0x9
   782     0079                     	ds	1
   783     007A                     ??___awdiv:
   784     007A                     ___awdiv@counter:	
   785                           ; 1 bytes @ 0xA
   786                           
   787     007A                     Lcd_Write_String@i:	
   788                           ; 1 bytes @ 0xA
   789                           
   790                           
   791                           ; 2 bytes @ 0xA
   792     007A                     	ds	1
   793     007B                     ??___awtoft:
   794     007B                     ___awdiv@sign:	
   795                           ; 1 bytes @ 0xB
   796                           
   797     007B                     ___awtoft@sign:	
   798                           ; 1 bytes @ 0xB
   799                           
   800                           
   801                           ; 1 bytes @ 0xB
   802     007B                     	ds	1
   803     007C                     ??___lltoft:
   804     007C                     ___lltoft@exp:	
   805                           ; 1 bytes @ 0xC
   806                           
   807     007C                     ___awdiv@quotient:	
   808                           ; 1 bytes @ 0xC
   809                           
   810                           
   811                           ; 2 bytes @ 0xC
   812     007C                     	ds	1
   813     007D                     ___lldiv@counter:
   814                           
   815                           ; 1 bytes @ 0xD
   816     007D                     	ds	1
   817     007E                     ??_fround:
   818     007E                     ??_scale:	
   819                           ; 1 bytes @ 0xE
   820                           
   821     007E                     ??___bmul:	
   822                           ; 1 bytes @ 0xE
   823                           
   824     007E                     ??___ftsub:	
   825                           ; 1 bytes @ 0xE
   826                           
   827                           
   828                           	psect	cstackBANK0
   829     0020                     __pcstackBANK0:	
   830                           ; 1 bytes @ 0xE
   831                           
   832     0020                     ?___bmul:
   833     0020                     ___bmul@multiplicand:	
   834                           ; 1 bytes @ 0x0
   835                           
   836     0020                     __div_to_l_@quot:	
   837                           ; 1 bytes @ 0x0
   838                           
   839     0020                     __tdiv_to_l_@quot:	
   840                           ; 4 bytes @ 0x0
   841                           
   842                           
   843                           ; 4 bytes @ 0x0
   844     0020                     	ds	1
   845     0021                     ___bmul@product:
   846                           
   847                           ; 1 bytes @ 0x1
   848     0021                     	ds	1
   849     0022                     ___bmul@multiplier:
   850                           
   851                           ; 1 bytes @ 0x2
   852     0022                     	ds	1
   853     0023                     ?___ftmul:
   854     0023                     ___ftmul@f1:	
   855                           ; 3 bytes @ 0x3
   856                           
   857                           
   858                           ; 3 bytes @ 0x3
   859     0023                     	ds	1
   860     0024                     __div_to_l_@cntr:
   861     0024                     __tdiv_to_l_@cntr:	
   862                           ; 1 bytes @ 0x4
   863                           
   864                           
   865                           ; 1 bytes @ 0x4
   866     0024                     	ds	1
   867     0025                     __div_to_l_@exp1:
   868     0025                     __tdiv_to_l_@exp1:	
   869                           ; 1 bytes @ 0x5
   870                           
   871                           
   872                           ; 1 bytes @ 0x5
   873     0025                     	ds	1
   874     0026                     ___ftmul@f2:
   875                           
   876                           ; 3 bytes @ 0x6
   877     0026                     	ds	3
   878     0029                     ??___ftmul:
   879                           
   880                           ; 1 bytes @ 0x9
   881     0029                     	ds	3
   882     002C                     ___ftmul@exp:
   883                           
   884                           ; 1 bytes @ 0xC
   885     002C                     	ds	1
   886     002D                     ___ftmul@f3_as_product:
   887                           
   888                           ; 3 bytes @ 0xD
   889     002D                     	ds	3
   890     0030                     ___ftmul@cntr:
   891                           
   892                           ; 1 bytes @ 0x10
   893     0030                     	ds	1
   894     0031                     ___ftmul@sign:
   895                           
   896                           ; 1 bytes @ 0x11
   897     0031                     	ds	1
   898     0032                     ?_fround:
   899     0032                     ?_scale:	
   900                           ; 3 bytes @ 0x12
   901                           
   902                           
   903                           ; 3 bytes @ 0x12
   904     0032                     	ds	3
   905     0035                     _fround$816:
   906     0035                     _scale$817:	
   907                           ; 3 bytes @ 0x15
   908                           
   909                           
   910                           ; 3 bytes @ 0x15
   911     0035                     	ds	3
   912     0038                     scale@scl:
   913     0038                     _fround$815:	
   914                           ; 1 bytes @ 0x18
   915                           
   916                           
   917                           ; 3 bytes @ 0x18
   918     0038                     	ds	1
   919     0039                     ?___fttol:
   920     0039                     ___fttol@f1:	
   921                           ; 4 bytes @ 0x19
   922                           
   923                           
   924                           ; 3 bytes @ 0x19
   925     0039                     	ds	2
   926     003B                     fround@prec:
   927                           
   928                           ; 1 bytes @ 0x1B
   929     003B                     	ds	1
   930     003C                     ?___ftadd:
   931     003C                     ___ftadd@f1:	
   932                           ; 3 bytes @ 0x1C
   933                           
   934                           
   935                           ; 3 bytes @ 0x1C
   936     003C                     	ds	1
   937     003D                     ??___fttol:
   938                           
   939                           ; 1 bytes @ 0x1D
   940     003D                     	ds	2
   941     003F                     ___ftadd@f2:
   942                           
   943                           ; 3 bytes @ 0x1F
   944     003F                     	ds	1
   945     0040                     ___fttol@sign1:
   946                           
   947                           ; 1 bytes @ 0x20
   948     0040                     	ds	1
   949     0041                     ___fttol@lval:
   950                           
   951                           ; 4 bytes @ 0x21
   952     0041                     	ds	1
   953     0042                     ??___ftadd:
   954                           
   955                           ; 1 bytes @ 0x22
   956     0042                     	ds	3
   957     0045                     ___ftadd@sign:
   958     0045                     ___fttol@exp1:	
   959                           ; 1 bytes @ 0x25
   960                           
   961                           
   962                           ; 1 bytes @ 0x25
   963     0045                     	ds	1
   964     0046                     ___ftadd@exp2:
   965                           
   966                           ; 1 bytes @ 0x26
   967     0046                     	ds	1
   968     0047                     ___ftadd@exp1:
   969                           
   970                           ; 1 bytes @ 0x27
   971     0047                     	ds	1
   972     0048                     ?___ftsub:
   973     0048                     ___ftsub@f2:	
   974                           ; 3 bytes @ 0x28
   975                           
   976                           
   977                           ; 3 bytes @ 0x28
   978     0048                     	ds	3
   979     004B                     ___ftsub@f1:
   980                           
   981                           ; 3 bytes @ 0x2B
   982     004B                     	ds	3
   983     004E                     ?_sprintf:
   984     004E                     sprintf@f:	
   985                           ; 2 bytes @ 0x2E
   986                           
   987                           
   988                           ; 1 bytes @ 0x2E
   989     004E                     	ds	4
   990     0052                     ??_sprintf:
   991                           
   992                           ; 1 bytes @ 0x32
   993     0052                     	ds	6
   994     0058                     _sprintf$818:
   995                           
   996                           ; 3 bytes @ 0x38
   997     0058                     	ds	3
   998     005B                     sprintf@ap:
   999                           
  1000                           ; 1 bytes @ 0x3B
  1001     005B                     	ds	1
  1002     005C                     sprintf@flag:
  1003                           
  1004                           ; 2 bytes @ 0x3C
  1005     005C                     	ds	2
  1006     005E                     sprintf@val:
  1007                           
  1008                           ; 4 bytes @ 0x3E
  1009     005E                     	ds	4
  1010     0062                     sprintf@eexp:
  1011                           
  1012                           ; 2 bytes @ 0x42
  1013     0062                     	ds	2
  1014     0064                     sprintf@tmpval:
  1015                           
  1016                           ; 4 bytes @ 0x44
  1017     0064                     	ds	4
  1018     0068                     sprintf@prec:
  1019                           
  1020                           ; 2 bytes @ 0x48
  1021     0068                     	ds	2
  1022     006A                     sprintf@sp:
  1023                           
  1024                           ; 1 bytes @ 0x4A
  1025     006A                     	ds	1
  1026     006B                     sprintf@fval:
  1027                           
  1028                           ; 3 bytes @ 0x4B
  1029     006B                     	ds	3
  1030     006E                     sprintf@c:
  1031                           
  1032                           ; 1 bytes @ 0x4E
  1033     006E                     	ds	1
  1034                           
  1035                           	psect	maintext
  1036     0E79                     __pmaintext:	
  1037 ;;
  1038 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  1039 ;;
  1040 ;; *************** function _main *****************
  1041 ;; Defined at:
  1042 ;;		line 130 in file "main.c"
  1043 ;; Parameters:    Size  Location     Type
  1044 ;;		None
  1045 ;; Auto vars:     Size  Location     Type
  1046 ;;  char_digital   15    2[BANK1 ] unsigned char [15]
  1047 ;; Return value:  Size  Location     Type
  1048 ;;                  1    wreg      void 
  1049 ;; Registers used:
  1050 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1051 ;; Tracked objects:
  1052 ;;		On entry : B00/0
  1053 ;;		On exit  : 300/0
  1054 ;;		Unchanged: 0/0
  1055 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1056 ;;      Params:         0       0       0       0       0
  1057 ;;      Locals:         0       0      15       0       0
  1058 ;;      Temps:          0       0       2       0       0
  1059 ;;      Totals:         0       0      17       0       0
  1060 ;;Total ram usage:       17 bytes
  1061 ;; Hardware stack levels required when called: 4
  1062 ;; This function calls:
  1063 ;;		_Lcd_Init
  1064 ;;		_Lcd_Set_Cursor
  1065 ;;		_Lcd_Write_String
  1066 ;;		___awtoft
  1067 ;;		___ftmul
  1068 ;;		_sprintf
  1069 ;; This function is called by:
  1070 ;;		Startup code after reset
  1071 ;; This function uses a non-reentrant model
  1072 ;;
  1073                           
  1074     0E79                     _main:	
  1075                           ;psect for function _main
  1076                           
  1077                           
  1078                           ;main.c: 133: char char_digital[15];;main.c: 134: TRISA = 0XFF;
  1079                           
  1080                           ;incstack = 0
  1081                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1082     0E79  30FF               	movlw	255
  1083     0E7A  1683               	bsf	3,5	;RP0=1, select bank1
  1084     0E7B  0085               	movwf	5	;volatile
  1085                           
  1086                           ;main.c: 135: TRISD = 0X00;
  1087     0E7C  0188               	clrf	8	;volatile
  1088                           
  1089                           ;main.c: 136: TRISC = 0X00;
  1090     0E7D  0187               	clrf	7	;volatile
  1091                           
  1092                           ;main.c: 137: PORTC = 0X00;
  1093     0E7E  1283               	bcf	3,5	;RP0=0, select bank0
  1094     0E7F  0187               	clrf	7	;volatile
  1095                           
  1096                           ;main.c: 138: PORTD = 0X00;
  1097     0E80  0188               	clrf	8	;volatile
  1098                           
  1099                           ;main.c: 140: Lcd_Init();
  1100     0E81  120A  158A  215C  120A  158A  	fcall	_Lcd_Init
  1101                           
  1102                           ;main.c: 142: ADCON0bits.ADON = 1;
  1103     0E86  141F               	bsf	31,0	;volatile
  1104                           
  1105                           ;main.c: 143: ADCON1bits.PCFG0 = 0;
  1106     0E87  1683               	bsf	3,5	;RP0=1, select bank1
  1107     0E88  101F               	bcf	31,0	;volatile
  1108                           
  1109                           ;main.c: 144: ADCON1bits.PCFG1 = 0;
  1110     0E89  109F               	bcf	31,1	;volatile
  1111                           
  1112                           ;main.c: 145: ADCON1bits.PCFG2 = 0;
  1113     0E8A  111F               	bcf	31,2	;volatile
  1114                           
  1115                           ;main.c: 146: ADCON1bits.PCFG3 = 0;
  1116     0E8B  119F               	bcf	31,3	;volatile
  1117                           
  1118                           ;main.c: 147: ADCON1bits.ADFM = 1;
  1119     0E8C  179F               	bsf	31,7	;volatile
  1120     0E8D                     l2765:
  1121                           
  1122                           ;main.c: 150: {;main.c: 151: ADCON0bits.CHS2 = 0;
  1123     0E8D  1283               	bcf	3,5	;RP0=0, select bank0
  1124     0E8E  129F               	bcf	31,5	;volatile
  1125                           
  1126                           ;main.c: 152: ADCON0bits.CHS1 = 0;
  1127     0E8F  121F               	bcf	31,4	;volatile
  1128                           
  1129                           ;main.c: 153: ADCON0bits.CHS0 = 0;
  1130     0E90  119F               	bcf	31,3	;volatile
  1131                           
  1132                           ;main.c: 154: ADCON0bits.GO = 1;
  1133     0E91  151F               	bsf	31,2	;volatile
  1134     0E92                     l87:	
  1135                           ;main.c: 156: ;
  1136                           
  1137     0E92  191F               	btfsc	31,2	;volatile
  1138     0E93  2E92               	goto	l87
  1139                           
  1140                           ;main.c: 158: D0 = ADRESH * 256 + ADRESL;
  1141     0E94  081E               	movf	30,w	;volatile
  1142     0E95  1683               	bsf	3,5	;RP0=1, select bank1
  1143     0E96  00B2               	movwf	??_main^(0+128)
  1144     0E97  01B3               	clrf	(??_main^(0+128)+1)
  1145     0E98  0832               	movf	??_main^(0+128),w
  1146     0E99  00B3               	movwf	(??_main^(0+128)+1)
  1147     0E9A  01B2               	clrf	??_main^(0+128)
  1148     0E9B  081E               	movf	30,w	;volatile
  1149     0E9C  0732               	addwf	??_main^(0+128),w
  1150     0E9D  00F8               	movwf	___awtoft@c
  1151     0E9E  3000               	movlw	0
  1152     0E9F  1803               	skipnc
  1153     0EA0  3001               	movlw	1
  1154     0EA1  0733               	addwf	(??_main+1)^(0+128),w
  1155     0EA2  00F9               	movwf	___awtoft@c+1
  1156     0EA3  160A  118A  2662  120A  158A  	fcall	___awtoft
  1157     0EA8  0878               	movf	?___awtoft,w
  1158     0EA9  1683               	bsf	3,5	;RP0=1, select bank1
  1159     0EAA  00AF               	movwf	_D0^(0+128)
  1160     0EAB  0879               	movf	?___awtoft+1,w
  1161     0EAC  00B0               	movwf	(_D0+1)^(0+128)
  1162     0EAD  087A               	movf	?___awtoft+2,w
  1163     0EAE  00B1               	movwf	(_D0+2)^(0+128)
  1164                           
  1165                           ;main.c: 159: AN0 = D0 * 0.0048;
  1166     0EAF  3049               	movlw	73
  1167     0EB0  1283               	bcf	3,5	;RP0=0, select bank0
  1168     0EB1  00A3               	movwf	___ftmul@f1
  1169     0EB2  309D               	movlw	157
  1170     0EB3  00A4               	movwf	___ftmul@f1+1
  1171     0EB4  303B               	movlw	59
  1172     0EB5  00A5               	movwf	___ftmul@f1+2
  1173     0EB6  1683               	bsf	3,5	;RP0=1, select bank1
  1174     0EB7  082F               	movf	_D0^(0+128),w
  1175     0EB8  1283               	bcf	3,5	;RP0=0, select bank0
  1176     0EB9  00A6               	movwf	___ftmul@f2
  1177     0EBA  1683               	bsf	3,5	;RP0=1, select bank1
  1178     0EBB  0830               	movf	(_D0+1)^(0+128),w
  1179     0EBC  1283               	bcf	3,5	;RP0=0, select bank0
  1180     0EBD  00A7               	movwf	___ftmul@f2+1
  1181     0EBE  1683               	bsf	3,5	;RP0=1, select bank1
  1182     0EBF  0831               	movf	(_D0+2)^(0+128),w
  1183     0EC0  1283               	bcf	3,5	;RP0=0, select bank0
  1184     0EC1  00A8               	movwf	___ftmul@f2+2
  1185     0EC2  120A  158A  2399  120A  158A  	fcall	___ftmul
  1186     0EC7  0823               	movf	?___ftmul,w
  1187     0EC8  1683               	bsf	3,5	;RP0=1, select bank1
  1188     0EC9  00A6               	movwf	_AN0^(0+128)
  1189     0ECA  1283               	bcf	3,5	;RP0=0, select bank0
  1190     0ECB  0824               	movf	?___ftmul+1,w
  1191     0ECC  1683               	bsf	3,5	;RP0=1, select bank1
  1192     0ECD  00A7               	movwf	(_AN0+1)^(0+128)
  1193     0ECE  1283               	bcf	3,5	;RP0=0, select bank0
  1194     0ECF  0825               	movf	?___ftmul+2,w
  1195     0ED0  1683               	bsf	3,5	;RP0=1, select bank1
  1196     0ED1  00A8               	movwf	(_AN0+2)^(0+128)
  1197                           
  1198                           ;main.c: 160: Lcd_Set_Cursor(1, 1);
  1199     0ED2  01F4               	clrf	Lcd_Set_Cursor@b
  1200     0ED3  0AF4               	incf	Lcd_Set_Cursor@b,f
  1201     0ED4  3001               	movlw	1
  1202     0ED5  160A  118A  2777  120A  158A  	fcall	_Lcd_Set_Cursor
  1203                           
  1204                           ;main.c: 161: sprintf(char_digital, "%.2f", AN0);
  1205     0EDA  3086               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
  1206     0EDB  1283               	bcf	3,5	;RP0=0, select bank0
  1207     0EDC  00CE               	movwf	sprintf@f
  1208     0EDD  1683               	bsf	3,5	;RP0=1, select bank1
  1209     0EDE  0826               	movf	_AN0^(0+128),w
  1210     0EDF  1283               	bcf	3,5	;RP0=0, select bank0
  1211     0EE0  00CF               	movwf	?_sprintf+1
  1212     0EE1  1683               	bsf	3,5	;RP0=1, select bank1
  1213     0EE2  0827               	movf	(_AN0+1)^(0+128),w
  1214     0EE3  1283               	bcf	3,5	;RP0=0, select bank0
  1215     0EE4  00D0               	movwf	?_sprintf+2
  1216     0EE5  1683               	bsf	3,5	;RP0=1, select bank1
  1217     0EE6  0828               	movf	(_AN0+2)^(0+128),w
  1218     0EE7  1283               	bcf	3,5	;RP0=0, select bank0
  1219     0EE8  00D1               	movwf	?_sprintf+3
  1220     0EE9  30B4               	movlw	(low (main@char_digital| 0))& (0+255)
  1221     0EEA  120A  118A  2394  120A  158A  	fcall	_sprintf
  1222                           
  1223                           ;main.c: 162: Lcd_Write_String("AN0=");
  1224     0EEF  3077               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
  1225     0EF0  00F5               	movwf	Lcd_Write_String@a
  1226     0EF1  3080               	movlw	128
  1227     0EF2  00F6               	movwf	Lcd_Write_String@a+1
  1228     0EF3  160A  118A  273A  120A  158A  	fcall	_Lcd_Write_String
  1229                           
  1230                           ;main.c: 163: Lcd_Set_Cursor(1, 5);
  1231     0EF8  3005               	movlw	5
  1232     0EF9  00F4               	movwf	Lcd_Set_Cursor@b
  1233     0EFA  3001               	movlw	1
  1234     0EFB  160A  118A  2777  120A  158A  	fcall	_Lcd_Set_Cursor
  1235                           
  1236                           ;main.c: 164: Lcd_Write_String(char_digital);
  1237     0F00  30B4               	movlw	(low (main@char_digital| 0))& (0+255)
  1238     0F01  00F5               	movwf	Lcd_Write_String@a
  1239     0F02  3000               	movlw	0
  1240     0F03  00F6               	movwf	Lcd_Write_String@a+1
  1241     0F04  160A  118A  273A  120A  158A  	fcall	_Lcd_Write_String
  1242                           
  1243                           ;main.c: 166: ADCON0bits.CHS2 = 0;
  1244     0F09  129F               	bcf	31,5	;volatile
  1245                           
  1246                           ;main.c: 167: ADCON0bits.CHS1 = 0;
  1247     0F0A  121F               	bcf	31,4	;volatile
  1248                           
  1249                           ;main.c: 168: ADCON0bits.CHS0 = 1;
  1250     0F0B  159F               	bsf	31,3	;volatile
  1251                           
  1252                           ;main.c: 169: ADCON0bits.GO = 1;
  1253     0F0C  151F               	bsf	31,2	;volatile
  1254     0F0D                     l90:	
  1255                           ;main.c: 171: ;
  1256                           
  1257     0F0D  191F               	btfsc	31,2	;volatile
  1258     0F0E  2F0D               	goto	l90
  1259                           
  1260                           ;main.c: 172: D1 = ADRESH * 256 + ADRESL;
  1261     0F0F  081E               	movf	30,w	;volatile
  1262     0F10  1683               	bsf	3,5	;RP0=1, select bank1
  1263     0F11  00B2               	movwf	??_main^(0+128)
  1264     0F12  01B3               	clrf	(??_main^(0+128)+1)
  1265     0F13  0832               	movf	??_main^(0+128),w
  1266     0F14  00B3               	movwf	(??_main^(0+128)+1)
  1267     0F15  01B2               	clrf	??_main^(0+128)
  1268     0F16  081E               	movf	30,w	;volatile
  1269     0F17  0732               	addwf	??_main^(0+128),w
  1270     0F18  00F8               	movwf	___awtoft@c
  1271     0F19  3000               	movlw	0
  1272     0F1A  1803               	skipnc
  1273     0F1B  3001               	movlw	1
  1274     0F1C  0733               	addwf	(??_main+1)^(0+128),w
  1275     0F1D  00F9               	movwf	___awtoft@c+1
  1276     0F1E  160A  118A  2662  120A  158A  	fcall	___awtoft
  1277     0F23  0878               	movf	?___awtoft,w
  1278     0F24  1683               	bsf	3,5	;RP0=1, select bank1
  1279     0F25  00AC               	movwf	_D1^(0+128)
  1280     0F26  0879               	movf	?___awtoft+1,w
  1281     0F27  00AD               	movwf	(_D1+1)^(0+128)
  1282     0F28  087A               	movf	?___awtoft+2,w
  1283     0F29  00AE               	movwf	(_D1+2)^(0+128)
  1284                           
  1285                           ;main.c: 173: AN1 = D1 * 0.0048;
  1286     0F2A  3049               	movlw	73
  1287     0F2B  1283               	bcf	3,5	;RP0=0, select bank0
  1288     0F2C  00A3               	movwf	___ftmul@f1
  1289     0F2D  309D               	movlw	157
  1290     0F2E  00A4               	movwf	___ftmul@f1+1
  1291     0F2F  303B               	movlw	59
  1292     0F30  00A5               	movwf	___ftmul@f1+2
  1293     0F31  1683               	bsf	3,5	;RP0=1, select bank1
  1294     0F32  082C               	movf	_D1^(0+128),w
  1295     0F33  1283               	bcf	3,5	;RP0=0, select bank0
  1296     0F34  00A6               	movwf	___ftmul@f2
  1297     0F35  1683               	bsf	3,5	;RP0=1, select bank1
  1298     0F36  082D               	movf	(_D1+1)^(0+128),w
  1299     0F37  1283               	bcf	3,5	;RP0=0, select bank0
  1300     0F38  00A7               	movwf	___ftmul@f2+1
  1301     0F39  1683               	bsf	3,5	;RP0=1, select bank1
  1302     0F3A  082E               	movf	(_D1+2)^(0+128),w
  1303     0F3B  1283               	bcf	3,5	;RP0=0, select bank0
  1304     0F3C  00A8               	movwf	___ftmul@f2+2
  1305     0F3D  120A  158A  2399  120A  158A  	fcall	___ftmul
  1306     0F42  0823               	movf	?___ftmul,w
  1307     0F43  1683               	bsf	3,5	;RP0=1, select bank1
  1308     0F44  00A3               	movwf	_AN1^(0+128)
  1309     0F45  1283               	bcf	3,5	;RP0=0, select bank0
  1310     0F46  0824               	movf	?___ftmul+1,w
  1311     0F47  1683               	bsf	3,5	;RP0=1, select bank1
  1312     0F48  00A4               	movwf	(_AN1+1)^(0+128)
  1313     0F49  1283               	bcf	3,5	;RP0=0, select bank0
  1314     0F4A  0825               	movf	?___ftmul+2,w
  1315     0F4B  1683               	bsf	3,5	;RP0=1, select bank1
  1316     0F4C  00A5               	movwf	(_AN1+2)^(0+128)
  1317                           
  1318                           ;main.c: 174: Lcd_Set_Cursor(1, 9);
  1319     0F4D  3009               	movlw	9
  1320     0F4E  00F4               	movwf	Lcd_Set_Cursor@b
  1321     0F4F  3001               	movlw	1
  1322     0F50  160A  118A  2777  120A  158A  	fcall	_Lcd_Set_Cursor
  1323                           
  1324                           ;main.c: 175: sprintf(char_digital, "%.2f", AN1);
  1325     0F55  3086               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
  1326     0F56  1283               	bcf	3,5	;RP0=0, select bank0
  1327     0F57  00CE               	movwf	sprintf@f
  1328     0F58  1683               	bsf	3,5	;RP0=1, select bank1
  1329     0F59  0823               	movf	_AN1^(0+128),w
  1330     0F5A  1283               	bcf	3,5	;RP0=0, select bank0
  1331     0F5B  00CF               	movwf	?_sprintf+1
  1332     0F5C  1683               	bsf	3,5	;RP0=1, select bank1
  1333     0F5D  0824               	movf	(_AN1+1)^(0+128),w
  1334     0F5E  1283               	bcf	3,5	;RP0=0, select bank0
  1335     0F5F  00D0               	movwf	?_sprintf+2
  1336     0F60  1683               	bsf	3,5	;RP0=1, select bank1
  1337     0F61  0825               	movf	(_AN1+2)^(0+128),w
  1338     0F62  1283               	bcf	3,5	;RP0=0, select bank0
  1339     0F63  00D1               	movwf	?_sprintf+3
  1340     0F64  30B4               	movlw	(low (main@char_digital| 0))& (0+255)
  1341     0F65  120A  118A  2394  120A  158A  	fcall	_sprintf
  1342                           
  1343                           ;main.c: 176: Lcd_Write_String("AN1=");
  1344     0F6A  307C               	movlw	(low ((STR_4-__stringbase)| (0+32768)))& (0+255)
  1345     0F6B  00F5               	movwf	Lcd_Write_String@a
  1346     0F6C  3080               	movlw	128
  1347     0F6D  00F6               	movwf	Lcd_Write_String@a+1
  1348     0F6E  160A  118A  273A  120A  158A  	fcall	_Lcd_Write_String
  1349                           
  1350                           ;main.c: 177: Lcd_Set_Cursor(1, 13);
  1351     0F73  300D               	movlw	13
  1352     0F74  00F4               	movwf	Lcd_Set_Cursor@b
  1353     0F75  3001               	movlw	1
  1354     0F76  160A  118A  2777  120A  158A  	fcall	_Lcd_Set_Cursor
  1355                           
  1356                           ;main.c: 178: Lcd_Write_String(char_digital);
  1357     0F7B  30B4               	movlw	(low (main@char_digital| 0))& (0+255)
  1358     0F7C  00F5               	movwf	Lcd_Write_String@a
  1359     0F7D  3000               	movlw	0
  1360     0F7E  00F6               	movwf	Lcd_Write_String@a+1
  1361     0F7F  160A  118A  273A  120A  158A  	fcall	_Lcd_Write_String
  1362                           
  1363                           ;main.c: 180: ADCON0bits.CHS2 = 0;
  1364     0F84  129F               	bcf	31,5	;volatile
  1365                           
  1366                           ;main.c: 181: ADCON0bits.CHS1 = 1;
  1367     0F85  161F               	bsf	31,4	;volatile
  1368                           
  1369                           ;main.c: 182: ADCON0bits.CHS0 = 0;
  1370     0F86  119F               	bcf	31,3	;volatile
  1371                           
  1372                           ;main.c: 183: ADCON0bits.GO = 1;
  1373     0F87  151F               	bsf	31,2	;volatile
  1374     0F88                     l93:	
  1375                           ;main.c: 185: ;
  1376                           
  1377     0F88  191F               	btfsc	31,2	;volatile
  1378     0F89  2F88               	goto	l93
  1379                           
  1380                           ;main.c: 186: D2 = ADRESH * 256 + ADRESL;
  1381     0F8A  081E               	movf	30,w	;volatile
  1382     0F8B  1683               	bsf	3,5	;RP0=1, select bank1
  1383     0F8C  00B2               	movwf	??_main^(0+128)
  1384     0F8D  01B3               	clrf	(??_main^(0+128)+1)
  1385     0F8E  0832               	movf	??_main^(0+128),w
  1386     0F8F  00B3               	movwf	(??_main^(0+128)+1)
  1387     0F90  01B2               	clrf	??_main^(0+128)
  1388     0F91  081E               	movf	30,w	;volatile
  1389     0F92  0732               	addwf	??_main^(0+128),w
  1390     0F93  00F8               	movwf	___awtoft@c
  1391     0F94  3000               	movlw	0
  1392     0F95  1803               	skipnc
  1393     0F96  3001               	movlw	1
  1394     0F97  0733               	addwf	(??_main+1)^(0+128),w
  1395     0F98  00F9               	movwf	___awtoft@c+1
  1396     0F99  160A  118A  2662  120A  158A  	fcall	___awtoft
  1397     0F9E  0878               	movf	?___awtoft,w
  1398     0F9F  1683               	bsf	3,5	;RP0=1, select bank1
  1399     0FA0  00A9               	movwf	_D2^(0+128)
  1400     0FA1  0879               	movf	?___awtoft+1,w
  1401     0FA2  00AA               	movwf	(_D2+1)^(0+128)
  1402     0FA3  087A               	movf	?___awtoft+2,w
  1403     0FA4  00AB               	movwf	(_D2+2)^(0+128)
  1404                           
  1405                           ;main.c: 187: AN2 = D2 * 0.0048;
  1406     0FA5  3049               	movlw	73
  1407     0FA6  1283               	bcf	3,5	;RP0=0, select bank0
  1408     0FA7  00A3               	movwf	___ftmul@f1
  1409     0FA8  309D               	movlw	157
  1410     0FA9  00A4               	movwf	___ftmul@f1+1
  1411     0FAA  303B               	movlw	59
  1412     0FAB  00A5               	movwf	___ftmul@f1+2
  1413     0FAC  1683               	bsf	3,5	;RP0=1, select bank1
  1414     0FAD  0829               	movf	_D2^(0+128),w
  1415     0FAE  1283               	bcf	3,5	;RP0=0, select bank0
  1416     0FAF  00A6               	movwf	___ftmul@f2
  1417     0FB0  1683               	bsf	3,5	;RP0=1, select bank1
  1418     0FB1  082A               	movf	(_D2+1)^(0+128),w
  1419     0FB2  1283               	bcf	3,5	;RP0=0, select bank0
  1420     0FB3  00A7               	movwf	___ftmul@f2+1
  1421     0FB4  1683               	bsf	3,5	;RP0=1, select bank1
  1422     0FB5  082B               	movf	(_D2+2)^(0+128),w
  1423     0FB6  1283               	bcf	3,5	;RP0=0, select bank0
  1424     0FB7  00A8               	movwf	___ftmul@f2+2
  1425     0FB8  120A  158A  2399  120A  158A  	fcall	___ftmul
  1426     0FBD  0823               	movf	?___ftmul,w
  1427     0FBE  1683               	bsf	3,5	;RP0=1, select bank1
  1428     0FBF  00A0               	movwf	_AN2^(0+128)
  1429     0FC0  1283               	bcf	3,5	;RP0=0, select bank0
  1430     0FC1  0824               	movf	?___ftmul+1,w
  1431     0FC2  1683               	bsf	3,5	;RP0=1, select bank1
  1432     0FC3  00A1               	movwf	(_AN2+1)^(0+128)
  1433     0FC4  1283               	bcf	3,5	;RP0=0, select bank0
  1434     0FC5  0825               	movf	?___ftmul+2,w
  1435     0FC6  1683               	bsf	3,5	;RP0=1, select bank1
  1436     0FC7  00A2               	movwf	(_AN2+2)^(0+128)
  1437                           
  1438                           ;main.c: 188: Lcd_Set_Cursor(2, 1);
  1439     0FC8  01F4               	clrf	Lcd_Set_Cursor@b
  1440     0FC9  0AF4               	incf	Lcd_Set_Cursor@b,f
  1441     0FCA  3002               	movlw	2
  1442     0FCB  160A  118A  2777  120A  158A  	fcall	_Lcd_Set_Cursor
  1443                           
  1444                           ;main.c: 189: sprintf(char_digital, "%.2f", AN2);
  1445     0FD0  3086               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
  1446     0FD1  1283               	bcf	3,5	;RP0=0, select bank0
  1447     0FD2  00CE               	movwf	sprintf@f
  1448     0FD3  1683               	bsf	3,5	;RP0=1, select bank1
  1449     0FD4  0820               	movf	_AN2^(0+128),w
  1450     0FD5  1283               	bcf	3,5	;RP0=0, select bank0
  1451     0FD6  00CF               	movwf	?_sprintf+1
  1452     0FD7  1683               	bsf	3,5	;RP0=1, select bank1
  1453     0FD8  0821               	movf	(_AN2+1)^(0+128),w
  1454     0FD9  1283               	bcf	3,5	;RP0=0, select bank0
  1455     0FDA  00D0               	movwf	?_sprintf+2
  1456     0FDB  1683               	bsf	3,5	;RP0=1, select bank1
  1457     0FDC  0822               	movf	(_AN2+2)^(0+128),w
  1458     0FDD  1283               	bcf	3,5	;RP0=0, select bank0
  1459     0FDE  00D1               	movwf	?_sprintf+3
  1460     0FDF  30B4               	movlw	(low (main@char_digital| 0))& (0+255)
  1461     0FE0  120A  118A  2394  120A  158A  	fcall	_sprintf
  1462                           
  1463                           ;main.c: 190: Lcd_Write_String("AN2=");
  1464     0FE5  3081               	movlw	(low ((STR_6-__stringbase)| (0+32768)))& (0+255)
  1465     0FE6  00F5               	movwf	Lcd_Write_String@a
  1466     0FE7  3080               	movlw	128
  1467     0FE8  00F6               	movwf	Lcd_Write_String@a+1
  1468     0FE9  160A  118A  273A  120A  158A  	fcall	_Lcd_Write_String
  1469                           
  1470                           ;main.c: 191: Lcd_Set_Cursor(2, 5);
  1471     0FEE  3005               	movlw	5
  1472     0FEF  00F4               	movwf	Lcd_Set_Cursor@b
  1473     0FF0  3002               	movlw	2
  1474     0FF1  160A  118A  2777  120A  158A  	fcall	_Lcd_Set_Cursor
  1475                           
  1476                           ;main.c: 192: Lcd_Write_String(char_digital);
  1477     0FF6  30B4               	movlw	(low (main@char_digital| 0))& (0+255)
  1478     0FF7  00F5               	movwf	Lcd_Write_String@a
  1479     0FF8  3000               	movlw	0
  1480     0FF9  00F6               	movwf	Lcd_Write_String@a+1
  1481     0FFA  160A  118A  273A  120A  158A  	fcall	_Lcd_Write_String
  1482     0FFF  2E8D               	goto	l2765
  1483     1000                     __end_of_main:
  1484                           
  1485                           	psect	text1
  1486     0394                     __ptext1:	
  1487 ;; *************** function _sprintf *****************
  1488 ;; Defined at:
  1489 ;;		line 505 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c90\common\doprnt.c"
  1490 ;; Parameters:    Size  Location     Type
  1491 ;;  sp              1    wreg     PTR unsigned char 
  1492 ;;		 -> main@char_digital(15), 
  1493 ;;  f               1   46[BANK0 ] PTR const unsigned char 
  1494 ;;		 -> STR_5(5), STR_3(5), STR_1(5), 
  1495 ;; Auto vars:     Size  Location     Type
  1496 ;;  sp              1   74[BANK0 ] PTR unsigned char 
  1497 ;;		 -> main@char_digital(15), 
  1498 ;;  tmpval          4   68[BANK0 ] struct .
  1499 ;;  val             4   62[BANK0 ] unsigned long 
  1500 ;;  fval            3   75[BANK0 ] unsigned long 
  1501 ;;  prec            2   72[BANK0 ] int 
  1502 ;;  eexp            2   66[BANK0 ] int 
  1503 ;;  flag            2   60[BANK0 ] unsigned short 
  1504 ;;  cp              2    0        PTR const unsigned char 
  1505 ;;  len             2    0        unsigned int 
  1506 ;;  width           2    0        int 
  1507 ;;  c               1   78[BANK0 ] unsigned char 
  1508 ;;  ap              1   59[BANK0 ] PTR void [1]
  1509 ;;		 -> ?_sprintf(2), 
  1510 ;;  d               1    0        unsigned char 
  1511 ;; Return value:  Size  Location     Type
  1512 ;;                  2   46[BANK0 ] int 
  1513 ;; Registers used:
  1514 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1515 ;; Tracked objects:
  1516 ;;		On entry : 300/0
  1517 ;;		On exit  : B00/0
  1518 ;;		Unchanged: 0/0
  1519 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1520 ;;      Params:         0       4       0       0       0
  1521 ;;      Locals:         0      23       0       0       0
  1522 ;;      Temps:          0       6       0       0       0
  1523 ;;      Totals:         0      33       0       0       0
  1524 ;;Total ram usage:       33 bytes
  1525 ;; Hardware stack levels used: 1
  1526 ;; Hardware stack levels required when called: 3
  1527 ;; This function calls:
  1528 ;;		___awdiv
  1529 ;;		___ftadd
  1530 ;;		___ftge
  1531 ;;		___ftmul
  1532 ;;		___ftneg
  1533 ;;		___ftsub
  1534 ;;		___fttol
  1535 ;;		___lldiv
  1536 ;;		___llmod
  1537 ;;		___lltoft
  1538 ;;		___wmul
  1539 ;;		__div_to_l_
  1540 ;;		__tdiv_to_l_
  1541 ;;		_fround
  1542 ;;		_isdigit
  1543 ;;		_scale
  1544 ;; This function is called by:
  1545 ;;		_main
  1546 ;; This function uses a non-reentrant model
  1547 ;;
  1548                           
  1549     0394                     _sprintf:	
  1550                           ;psect for function _sprintf
  1551                           
  1552                           
  1553                           ;incstack = 0
  1554                           ; Regs used in _sprintf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1555                           ;sprintf@sp stored from wreg
  1556     0394  00EA               	movwf	sprintf@sp
  1557                           
  1558                           ;doprnt.c: 507: va_list ap;;doprnt.c: 512: char c;;doprnt.c: 514: int width;;doprnt.c: 5
      +                          17: int prec;;doprnt.c: 525: unsigned short flag;;doprnt.c: 532: char d;;doprnt.c: 533: 
      +                          double fval;;doprnt.c: 534: int eexp;;doprnt.c: 540: union {;doprnt.c: 541: unsigned lon
      +                          g vd;;doprnt.c: 542: double integ;;doprnt.c: 543: } tmpval;;doprnt.c: 545: unsigned long
      +                           val;;doprnt.c: 546: unsigned len;;doprnt.c: 547: const char * cp;;doprnt.c: 550: *ap = 
      +                          __va_start();
  1559     0395  304F               	movlw	(low ((?_sprintf| 0+1)))& (0+255)
  1560     0396  00DB               	movwf	sprintf@ap
  1561     0397                     l2723:	
  1562                           ;doprnt.c: 553: while((c = *f++)) {
  1563                           
  1564     0397  3001               	movlw	1
  1565     0398  07CE               	addwf	sprintf@f,f
  1566     0399  30FF               	movlw	-1
  1567     039A  074E               	addwf	sprintf@f,w
  1568     039B  0084               	movwf	4
  1569     039C  120A  158A  200A  120A  118A  	fcall	stringdir
  1570     03A1  00EE               	movwf	sprintf@c
  1571     03A2  086E               	movf	sprintf@c,w
  1572     03A3  1903               	btfsc	3,2
  1573     03A4  2FF0               	goto	l2725
  1574                           
  1575                           ;doprnt.c: 555: if(c != '%')
  1576     03A5  3025               	movlw	37
  1577     03A6  066E               	xorwf	sprintf@c,w
  1578     03A7  1903               	btfsc	3,2
  1579     03A8  2BAD               	goto	l2531
  1580                           
  1581                           ;doprnt.c: 557: {;doprnt.c: 558: ((*sp++ = (c)));
  1582     03A9  086A               	movf	sprintf@sp,w
  1583     03AA  0084               	movwf	4
  1584     03AB  086E               	movf	sprintf@c,w
  1585     03AC  2FE9               	goto	L5
  1586     03AD                     l2531:	
  1587                           ;doprnt.c: 559: continue;
  1588                           
  1589                           
  1590                           ;doprnt.c: 560: };doprnt.c: 565: flag = 0;
  1591     03AD  01DC               	clrf	sprintf@flag
  1592     03AE  01DD               	clrf	sprintf@flag+1
  1593                           
  1594                           ;doprnt.c: 628: if(*f == '.') {
  1595     03AF  084E               	movf	sprintf@f,w
  1596     03B0  0084               	movwf	4
  1597     03B1  120A  158A  200A  120A  118A  	fcall	stringdir
  1598     03B6  3A2E               	xorlw	46
  1599     03B7  1D03               	skipz
  1600     03B8  2BF7               	goto	l2549
  1601                           
  1602                           ;doprnt.c: 629: flag |= 0x4000;
  1603     03B9  175D               	bsf	sprintf@flag+1,6
  1604                           
  1605                           ;doprnt.c: 630: f++;
  1606     03BA  3001               	movlw	1
  1607     03BB  00FF               	movwf	127
  1608     03BC  087F               	movf	127,w
  1609     03BD  07CE               	addwf	sprintf@f,f
  1610                           
  1611                           ;doprnt.c: 644: {;doprnt.c: 645: prec = 0;
  1612     03BE  01E8               	clrf	sprintf@prec
  1613     03BF  01E9               	clrf	sprintf@prec+1
  1614     03C0                     l2547:	
  1615                           ;doprnt.c: 646: while(isdigit((unsigned)*f)) {
  1616                           
  1617     03C0  084E               	movf	sprintf@f,w
  1618     03C1  0084               	movwf	4
  1619     03C2  120A  158A  200A  120A  118A  	fcall	stringdir
  1620     03C7  160A  118A  2615  120A  118A  	fcall	_isdigit
  1621     03CC  1C03               	btfss	3,0
  1622     03CD  2BFD               	goto	l2555
  1623                           
  1624                           ;doprnt.c: 647: prec *= 10;
  1625     03CE  300A               	movlw	10
  1626     03CF  00F0               	movwf	___wmul@multiplier
  1627     03D0  3000               	movlw	0
  1628     03D1  00F1               	movwf	___wmul@multiplier+1
  1629     03D2  0869               	movf	sprintf@prec+1,w
  1630     03D3  00F3               	movwf	___wmul@multiplicand+1
  1631     03D4  0868               	movf	sprintf@prec,w
  1632     03D5  00F2               	movwf	___wmul@multiplicand
  1633     03D6  160A  118A  269E  120A  118A  	fcall	___wmul
  1634     03DB  0871               	movf	?___wmul+1,w
  1635     03DC  00E9               	movwf	sprintf@prec+1
  1636     03DD  0870               	movf	?___wmul,w
  1637     03DE  00E8               	movwf	sprintf@prec
  1638                           
  1639                           ;doprnt.c: 648: prec += *f++ - '0';
  1640     03DF  084E               	movf	sprintf@f,w
  1641     03E0  0084               	movwf	4
  1642     03E1  120A  158A  200A  120A  118A  	fcall	stringdir
  1643     03E6  3ED0               	addlw	208
  1644     03E7  00D2               	movwf	??_sprintf
  1645     03E8  30FF               	movlw	255
  1646     03E9  1803               	skipnc
  1647     03EA  3000               	movlw	0
  1648     03EB  00D3               	movwf	??_sprintf+1
  1649     03EC  0852               	movf	??_sprintf,w
  1650     03ED  07E8               	addwf	sprintf@prec,f
  1651     03EE  1803               	skipnc
  1652     03EF  0AE9               	incf	sprintf@prec+1,f
  1653     03F0  0853               	movf	??_sprintf+1,w
  1654     03F1  07E9               	addwf	sprintf@prec+1,f
  1655     03F2  3001               	movlw	1
  1656     03F3  00FF               	movwf	127
  1657     03F4  087F               	movf	127,w
  1658     03F5  07CE               	addwf	sprintf@f,f
  1659     03F6  2BC0               	goto	l2547
  1660     03F7                     l2549:
  1661                           
  1662                           ;doprnt.c: 652: prec = 0;
  1663     03F7  01E8               	clrf	sprintf@prec
  1664     03F8  01E9               	clrf	sprintf@prec+1
  1665                           
  1666                           ;doprnt.c: 654: flag |= 0x1000;
  1667     03F9  165D               	bsf	sprintf@flag+1,4
  1668     03FA  2BFD               	goto	l2555
  1669     03FB                     l226:	
  1670                           ;doprnt.c: 688: case 'f':
  1671                           
  1672                           
  1673                           ;doprnt.c: 689: flag |= 0x400;
  1674     03FB  155D               	bsf	sprintf@flag+1,2
  1675                           
  1676                           ;doprnt.c: 690: break;
  1677     03FC  2C0F               	goto	l2557
  1678     03FD                     l2555:
  1679     03FD  3001               	movlw	1
  1680     03FE  07CE               	addwf	sprintf@f,f
  1681     03FF  30FF               	movlw	-1
  1682     0400  074E               	addwf	sprintf@f,w
  1683     0401  0084               	movwf	4
  1684     0402  120A  158A  200A  120A  118A  	fcall	stringdir
  1685     0407  00EE               	movwf	sprintf@c
  1686                           
  1687                           ; Switch size 1, requested type "simple"
  1688                           ; Number of cases is 2, Range of values is 0 to 102
  1689                           ; switch strategies available:
  1690                           ; Name         Instructions Cycles
  1691                           ; simple_byte            7     4 (average)
  1692                           ; jumptable            260     6 (fixed)
  1693                           ;	Chosen strategy is simple_byte
  1694     0408  3A00               	xorlw	0	; case 0
  1695     0409  1903               	skipnz
  1696     040A  2FF0               	goto	l2725
  1697     040B  3A66               	xorlw	102	; case 102
  1698     040C  1903               	skipnz
  1699     040D  2BFB               	goto	l226
  1700     040E  2B97               	goto	l2723
  1701     040F                     l2557:
  1702                           
  1703                           ;doprnt.c: 851: if(flag & (0x700)) {
  1704     040F  3000               	movlw	0
  1705     0410  055C               	andwf	sprintf@flag,w
  1706     0411  00D2               	movwf	??_sprintf
  1707     0412  3007               	movlw	7
  1708     0413  055D               	andwf	sprintf@flag+1,w
  1709     0414  00D3               	movwf	??_sprintf+1
  1710     0415  0852               	movf	??_sprintf,w
  1711     0416  0453               	iorwf	??_sprintf+1,w
  1712     0417  1903               	btfsc	3,2
  1713     0418  2FBA               	goto	l2705
  1714                           
  1715                           ;doprnt.c: 853: if(flag & 0x1000)
  1716     0419  1E5D               	btfss	sprintf@flag+1,4
  1717     041A  2C1F               	goto	l2563
  1718                           
  1719                           ;doprnt.c: 855: prec = 6;
  1720     041B  3006               	movlw	6
  1721     041C  00E8               	movwf	sprintf@prec
  1722     041D  3000               	movlw	0
  1723     041E  00E9               	movwf	sprintf@prec+1
  1724     041F                     l2563:
  1725                           
  1726                           ;doprnt.c: 856: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
  1727     041F  085B               	movf	sprintf@ap,w
  1728     0420  0084               	movwf	4
  1729     0421  1383               	bcf	3,7	;select IRP bank0
  1730     0422  0800               	movf	0,w
  1731     0423  00EB               	movwf	sprintf@fval
  1732     0424  0A84               	incf	4,f
  1733     0425  0800               	movf	0,w
  1734     0426  00EC               	movwf	sprintf@fval+1
  1735     0427  0A84               	incf	4,f
  1736     0428  0800               	movf	0,w
  1737     0429  00ED               	movwf	sprintf@fval+2
  1738     042A  3003               	movlw	3
  1739     042B  00FF               	movwf	127
  1740     042C  087F               	movf	127,w
  1741     042D  07DB               	addwf	sprintf@ap,f
  1742                           
  1743                           ;doprnt.c: 857: if(fval < 0.0) {
  1744     042E  086B               	movf	sprintf@fval,w
  1745     042F  00F0               	movwf	___ftge@ff1
  1746     0430  086C               	movf	sprintf@fval+1,w
  1747     0431  00F1               	movwf	___ftge@ff1+1
  1748     0432  086D               	movf	sprintf@fval+2,w
  1749     0433  00F2               	movwf	___ftge@ff1+2
  1750     0434  3000               	movlw	0
  1751     0435  00F3               	movwf	___ftge@ff2
  1752     0436  3000               	movlw	0
  1753     0437  00F4               	movwf	___ftge@ff2+1
  1754     0438  3000               	movlw	0
  1755     0439  00F5               	movwf	___ftge@ff2+2
  1756     043A  160A  118A  270D  120A  118A  	fcall	___ftge
  1757     043F  1803               	btfsc	3,0
  1758     0440  2C56               	goto	l2573
  1759                           
  1760                           ;doprnt.c: 858: fval = -fval;
  1761     0441  086B               	movf	sprintf@fval,w
  1762     0442  00F0               	movwf	___ftneg@f1
  1763     0443  086C               	movf	sprintf@fval+1,w
  1764     0444  00F1               	movwf	___ftneg@f1+1
  1765     0445  086D               	movf	sprintf@fval+2,w
  1766     0446  00F2               	movwf	___ftneg@f1+2
  1767     0447  160A  118A  2605  120A  118A  	fcall	___ftneg
  1768     044C  0870               	movf	?___ftneg,w
  1769     044D  00EB               	movwf	sprintf@fval
  1770     044E  0871               	movf	?___ftneg+1,w
  1771     044F  00EC               	movwf	sprintf@fval+1
  1772     0450  0872               	movf	?___ftneg+2,w
  1773     0451  00ED               	movwf	sprintf@fval+2
  1774                           
  1775                           ;doprnt.c: 859: flag |= 0x03;
  1776     0452  3003               	movlw	3
  1777     0453  04DC               	iorwf	sprintf@flag,f
  1778     0454  3000               	movlw	0
  1779     0455  04DD               	iorwf	sprintf@flag+1,f
  1780     0456                     l2573:
  1781                           
  1782                           ;doprnt.c: 860: };doprnt.c: 861: eexp = 0;
  1783     0456  01E2               	clrf	sprintf@eexp
  1784     0457  01E3               	clrf	sprintf@eexp+1
  1785                           
  1786                           ;doprnt.c: 862: if( fval!=0) {
  1787     0458  086D               	movf	sprintf@fval+2,w
  1788     0459  046C               	iorwf	sprintf@fval+1,w
  1789     045A  046B               	iorwf	sprintf@fval,w
  1790     045B  1903               	skipnz
  1791     045C  2D08               	goto	l2601
  1792                           
  1793                           ;doprnt.c: 863: (void)(*(&eexp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
  1794     045D  306B               	movlw	low (sprintf@fval| 0)
  1795     045E  0084               	movwf	4
  1796     045F  1383               	bcf	3,7	;select IRP bank0
  1797     0460  0800               	movf	0,w
  1798     0461  00D2               	movwf	??_sprintf
  1799     0462  0A84               	incf	4,f
  1800     0463  0800               	movf	0,w
  1801     0464  00D3               	movwf	??_sprintf+1
  1802     0465  0A84               	incf	4,f
  1803     0466  0800               	movf	0,w
  1804     0467  00D4               	movwf	??_sprintf+2
  1805     0468  0A84               	incf	4,f
  1806     0469  0800               	movf	0,w
  1807     046A  00D5               	movwf	??_sprintf+3
  1808     046B  300F               	movlw	15
  1809     046C                     u3605:
  1810     046C  1003               	clrc
  1811     046D  0CD5               	rrf	??_sprintf+3,f
  1812     046E  0CD4               	rrf	??_sprintf+2,f
  1813     046F  0CD3               	rrf	??_sprintf+1,f
  1814     0470  0CD2               	rrf	??_sprintf,f
  1815     0471  3EFF               	addlw	-1
  1816     0472  1D03               	skipz
  1817     0473  2C6C               	goto	u3605
  1818     0474  30FF               	movlw	255
  1819     0475  0552               	andwf	??_sprintf,w
  1820     0476  00D6               	movwf	??_sprintf+4
  1821     0477  3000               	movlw	0
  1822     0478  0553               	andwf	??_sprintf+1,w
  1823     0479  00D7               	movwf	??_sprintf+5
  1824     047A  0856               	movf	??_sprintf+4,w
  1825     047B  3E82               	addlw	130
  1826     047C  00E2               	movwf	sprintf@eexp
  1827     047D  0857               	movf	??_sprintf+5,w
  1828     047E  1803               	skipnc
  1829     047F  3E01               	addlw	1
  1830     0480  3EFF               	addlw	255
  1831     0481  00E3               	movwf	sprintf@eexp+1
  1832                           
  1833                           ;doprnt.c: 864: eexp--;
  1834     0482  30FF               	movlw	255
  1835     0483  07E2               	addwf	sprintf@eexp,f
  1836     0484  1803               	skipnc
  1837     0485  0AE3               	incf	sprintf@eexp+1,f
  1838     0486  30FF               	movlw	255
  1839     0487  07E3               	addwf	sprintf@eexp+1,f
  1840                           
  1841                           ;doprnt.c: 865: eexp *= 3;
  1842     0488  3003               	movlw	3
  1843     0489  00F0               	movwf	___wmul@multiplier
  1844     048A  3000               	movlw	0
  1845     048B  00F1               	movwf	___wmul@multiplier+1
  1846     048C  0863               	movf	sprintf@eexp+1,w
  1847     048D  00F3               	movwf	___wmul@multiplicand+1
  1848     048E  0862               	movf	sprintf@eexp,w
  1849     048F  00F2               	movwf	___wmul@multiplicand
  1850     0490  160A  118A  269E  120A  118A  	fcall	___wmul
  1851     0495  0871               	movf	?___wmul+1,w
  1852     0496  00E3               	movwf	sprintf@eexp+1
  1853     0497  0870               	movf	?___wmul,w
  1854     0498  00E2               	movwf	sprintf@eexp
  1855                           
  1856                           ;doprnt.c: 866: eexp /= 10;
  1857     0499  300A               	movlw	10
  1858     049A  00F6               	movwf	___awdiv@divisor
  1859     049B  3000               	movlw	0
  1860     049C  00F7               	movwf	___awdiv@divisor+1
  1861     049D  0863               	movf	sprintf@eexp+1,w
  1862     049E  00F9               	movwf	___awdiv@dividend+1
  1863     049F  0862               	movf	sprintf@eexp,w
  1864     04A0  00F8               	movwf	___awdiv@dividend
  1865     04A1  120A  158A  2103  120A  118A  	fcall	___awdiv
  1866     04A6  0877               	movf	?___awdiv+1,w
  1867     04A7  00E3               	movwf	sprintf@eexp+1
  1868     04A8  0876               	movf	?___awdiv,w
  1869     04A9  00E2               	movwf	sprintf@eexp
  1870                           
  1871                           ;doprnt.c: 867: if(eexp < 0)
  1872     04AA  1FE3               	btfss	sprintf@eexp+1,7
  1873     04AB  2CB2               	goto	l2589
  1874                           
  1875                           ;doprnt.c: 868: eexp--;
  1876     04AC  30FF               	movlw	255
  1877     04AD  07E2               	addwf	sprintf@eexp,f
  1878     04AE  1803               	skipnc
  1879     04AF  0AE3               	incf	sprintf@eexp+1,f
  1880     04B0  30FF               	movlw	255
  1881     04B1  07E3               	addwf	sprintf@eexp+1,f
  1882     04B2                     l2589:
  1883                           
  1884                           ;doprnt.c: 872: tmpval.integ = scale(-eexp);
  1885     04B2  0362               	decf	sprintf@eexp,w
  1886     04B3  3AFF               	xorlw	255
  1887     04B4  120A  118A  213D  120A  118A  	fcall	_scale
  1888     04B9  0832               	movf	?_scale,w
  1889     04BA  00E4               	movwf	sprintf@tmpval
  1890     04BB  0833               	movf	?_scale+1,w
  1891     04BC  00E5               	movwf	sprintf@tmpval+1
  1892     04BD  0834               	movf	?_scale+2,w
  1893     04BE  00E6               	movwf	sprintf@tmpval+2
  1894                           
  1895                           ;doprnt.c: 873: tmpval.integ *= fval;
  1896     04BF  086B               	movf	sprintf@fval,w
  1897     04C0  00A3               	movwf	___ftmul@f1
  1898     04C1  086C               	movf	sprintf@fval+1,w
  1899     04C2  00A4               	movwf	___ftmul@f1+1
  1900     04C3  086D               	movf	sprintf@fval+2,w
  1901     04C4  00A5               	movwf	___ftmul@f1+2
  1902     04C5  0864               	movf	sprintf@tmpval,w
  1903     04C6  00A6               	movwf	___ftmul@f2
  1904     04C7  0865               	movf	sprintf@tmpval+1,w
  1905     04C8  00A7               	movwf	___ftmul@f2+1
  1906     04C9  0866               	movf	sprintf@tmpval+2,w
  1907     04CA  00A8               	movwf	___ftmul@f2+2
  1908     04CB  120A  158A  2399  120A  118A  	fcall	___ftmul
  1909     04D0  0823               	movf	?___ftmul,w
  1910     04D1  00E4               	movwf	sprintf@tmpval
  1911     04D2  0824               	movf	?___ftmul+1,w
  1912     04D3  00E5               	movwf	sprintf@tmpval+1
  1913     04D4  0825               	movf	?___ftmul+2,w
  1914     04D5  00E6               	movwf	sprintf@tmpval+2
  1915                           
  1916                           ;doprnt.c: 874: if(tmpval.integ < 1.0)
  1917     04D6  0864               	movf	sprintf@tmpval,w
  1918     04D7  00F0               	movwf	___ftge@ff1
  1919     04D8  0865               	movf	sprintf@tmpval+1,w
  1920     04D9  00F1               	movwf	___ftge@ff1+1
  1921     04DA  0866               	movf	sprintf@tmpval+2,w
  1922     04DB  00F2               	movwf	___ftge@ff1+2
  1923     04DC  3000               	movlw	0
  1924     04DD  00F3               	movwf	___ftge@ff2
  1925     04DE  3080               	movlw	128
  1926     04DF  00F4               	movwf	___ftge@ff2+1
  1927     04E0  303F               	movlw	63
  1928     04E1  00F5               	movwf	___ftge@ff2+2
  1929     04E2  160A  118A  270D  120A  118A  	fcall	___ftge
  1930     04E7  1803               	btfsc	3,0
  1931     04E8  2CEF               	goto	l2597
  1932                           
  1933                           ;doprnt.c: 875: eexp--;
  1934     04E9  30FF               	movlw	255
  1935     04EA  07E2               	addwf	sprintf@eexp,f
  1936     04EB  1803               	skipnc
  1937     04EC  0AE3               	incf	sprintf@eexp+1,f
  1938     04ED  30FF               	movlw	255
  1939     04EE  2D07               	goto	L1
  1940     04EF                     l2597:
  1941                           
  1942                           ;doprnt.c: 876: else if(tmpval.integ >= 10.0)
  1943     04EF  0864               	movf	sprintf@tmpval,w
  1944     04F0  00F0               	movwf	___ftge@ff1
  1945     04F1  0865               	movf	sprintf@tmpval+1,w
  1946     04F2  00F1               	movwf	___ftge@ff1+1
  1947     04F3  0866               	movf	sprintf@tmpval+2,w
  1948     04F4  00F2               	movwf	___ftge@ff1+2
  1949     04F5  3000               	movlw	0
  1950     04F6  00F3               	movwf	___ftge@ff2
  1951     04F7  3020               	movlw	32
  1952     04F8  00F4               	movwf	___ftge@ff2+1
  1953     04F9  3041               	movlw	65
  1954     04FA  00F5               	movwf	___ftge@ff2+2
  1955     04FB  160A  118A  270D  120A  118A  	fcall	___ftge
  1956     0500  1C03               	btfss	3,0
  1957     0501  2D08               	goto	l2601
  1958                           
  1959                           ;doprnt.c: 877: eexp++;
  1960     0502  3001               	movlw	1
  1961     0503  07E2               	addwf	sprintf@eexp,f
  1962     0504  1803               	skipnc
  1963     0505  0AE3               	incf	sprintf@eexp+1,f
  1964     0506  3000               	movlw	0
  1965     0507                     L1:
  1966     0507  07E3               	addwf	sprintf@eexp+1,f
  1967     0508                     l2601:
  1968                           
  1969                           ;doprnt.c: 878: };doprnt.c: 1138: if(prec <= 12)
  1970     0508  0869               	movf	sprintf@prec+1,w
  1971     0509  3A80               	xorlw	128
  1972     050A  00FF               	movwf	127
  1973     050B  3080               	movlw	128
  1974     050C  027F               	subwf	127,w
  1975     050D  1D03               	skipz
  1976     050E  2D11               	goto	u3645
  1977     050F  300D               	movlw	13
  1978     0510  0268               	subwf	sprintf@prec,w
  1979     0511                     u3645:
  1980     0511  1803               	skipnc
  1981     0512  2D32               	goto	l2605
  1982                           
  1983                           ;doprnt.c: 1139: fval += fround((unsigned int)prec);
  1984     0513  1283               	bcf	3,5	;RP0=0, select bank0
  1985     0514  1303               	bcf	3,6	;RP1=0, select bank0
  1986     0515  0868               	movf	sprintf@prec,w
  1987     0516  120A  158A  253B  120A  118A  	fcall	_fround
  1988     051B  0832               	movf	?_fround,w
  1989     051C  00BC               	movwf	___ftadd@f1
  1990     051D  0833               	movf	?_fround+1,w
  1991     051E  00BD               	movwf	___ftadd@f1+1
  1992     051F  0834               	movf	?_fround+2,w
  1993     0520  00BE               	movwf	___ftadd@f1+2
  1994     0521  086B               	movf	sprintf@fval,w
  1995     0522  00BF               	movwf	___ftadd@f2
  1996     0523  086C               	movf	sprintf@fval+1,w
  1997     0524  00C0               	movwf	___ftadd@f2+1
  1998     0525  086D               	movf	sprintf@fval+2,w
  1999     0526  00C1               	movwf	___ftadd@f2+2
  2000     0527  120A  158A  243F  120A  118A  	fcall	___ftadd
  2001     052C  083C               	movf	?___ftadd,w
  2002     052D  00EB               	movwf	sprintf@fval
  2003     052E  083D               	movf	?___ftadd+1,w
  2004     052F  00EC               	movwf	sprintf@fval+1
  2005     0530  083E               	movf	?___ftadd+2,w
  2006     0531  00ED               	movwf	sprintf@fval+2
  2007     0532                     l2605:
  2008                           
  2009                           ;doprnt.c: 1142: if((eexp > 9)||(fval != 0 && (unsigned long)fval == 0 && eexp > 1)) {
  2010     0532  1283               	bcf	3,5	;RP0=0, select bank0
  2011     0533  1303               	bcf	3,6	;RP1=0, select bank0
  2012     0534  0863               	movf	sprintf@eexp+1,w
  2013     0535  3A80               	xorlw	128
  2014     0536  00FF               	movwf	127
  2015     0537  3080               	movlw	128
  2016     0538  027F               	subwf	127,w
  2017     0539  1D03               	skipz
  2018     053A  2D3D               	goto	u3655
  2019     053B  300A               	movlw	10
  2020     053C  0262               	subwf	sprintf@eexp,w
  2021     053D                     u3655:
  2022     053D  1803               	skipnc
  2023     053E  2D62               	goto	l2613
  2024     053F  1283               	bcf	3,5	;RP0=0, select bank0
  2025     0540  1303               	bcf	3,6	;RP1=0, select bank0
  2026     0541  086D               	movf	sprintf@fval+2,w
  2027     0542  046C               	iorwf	sprintf@fval+1,w
  2028     0543  046B               	iorwf	sprintf@fval,w
  2029     0544  1903               	skipnz
  2030     0545  2DAB               	goto	l2627
  2031     0546  086B               	movf	sprintf@fval,w
  2032     0547  00B9               	movwf	___fttol@f1
  2033     0548  086C               	movf	sprintf@fval+1,w
  2034     0549  00BA               	movwf	___fttol@f1+1
  2035     054A  086D               	movf	sprintf@fval+2,w
  2036     054B  00BB               	movwf	___fttol@f1+2
  2037     054C  120A  158A  2281  120A  118A  	fcall	___fttol
  2038     0551  083C               	movf	?___fttol+3,w
  2039     0552  043B               	iorwf	?___fttol+2,w
  2040     0553  043A               	iorwf	?___fttol+1,w
  2041     0554  0439               	iorwf	?___fttol,w
  2042     0555  1D03               	skipz
  2043     0556  2DAB               	goto	l2627
  2044     0557  0863               	movf	sprintf@eexp+1,w
  2045     0558  3A80               	xorlw	128
  2046     0559  00FF               	movwf	127
  2047     055A  3080               	movlw	128
  2048     055B  027F               	subwf	127,w
  2049     055C  1D03               	skipz
  2050     055D  2D60               	goto	u3685
  2051     055E  3002               	movlw	2
  2052     055F  0262               	subwf	sprintf@eexp,w
  2053     0560                     u3685:
  2054     0560  1C03               	skipc
  2055     0561  2DAB               	goto	l2627
  2056     0562                     l2613:
  2057                           
  2058                           ;doprnt.c: 1146: if(tmpval.integ < 4.294967296){
  2059     0562  1283               	bcf	3,5	;RP0=0, select bank0
  2060     0563  1303               	bcf	3,6	;RP1=0, select bank0
  2061     0564  0864               	movf	sprintf@tmpval,w
  2062     0565  00F0               	movwf	___ftge@ff1
  2063     0566  0865               	movf	sprintf@tmpval+1,w
  2064     0567  00F1               	movwf	___ftge@ff1+1
  2065     0568  0866               	movf	sprintf@tmpval+2,w
  2066     0569  00F2               	movwf	___ftge@ff1+2
  2067     056A  3070               	movlw	112
  2068     056B  00F3               	movwf	___ftge@ff2
  2069     056C  3089               	movlw	137
  2070     056D  00F4               	movwf	___ftge@ff2+1
  2071     056E  3040               	movlw	64
  2072     056F  00F5               	movwf	___ftge@ff2+2
  2073     0570  160A  118A  270D  120A  118A  	fcall	___ftge
  2074     0575  1803               	btfsc	3,0
  2075     0576  2D79               	goto	l2617
  2076                           
  2077                           ;doprnt.c: 1147: eexp -= (sizeof dpowers/sizeof dpowers[0])-1;
  2078     0577  30F7               	movlw	247
  2079     0578  2D7A               	goto	L2
  2080     0579                     l2617:	
  2081                           ;doprnt.c: 1148: }else{
  2082                           
  2083                           
  2084                           ;doprnt.c: 1149: eexp -= (sizeof dpowers/sizeof dpowers[0])-2;
  2085     0579  30F8               	movlw	248
  2086     057A                     L2:
  2087     057A  07E2               	addwf	sprintf@eexp,f
  2088     057B  1803               	skipnc
  2089     057C  0AE3               	incf	sprintf@eexp+1,f
  2090     057D  30FF               	movlw	255
  2091     057E  07E3               	addwf	sprintf@eexp+1,f
  2092                           
  2093                           ;doprnt.c: 1150: };doprnt.c: 1151: tmpval.integ = scale(eexp);
  2094     057F  0862               	movf	sprintf@eexp,w
  2095     0580  120A  118A  213D  120A  118A  	fcall	_scale
  2096     0585  0832               	movf	?_scale,w
  2097     0586  00E4               	movwf	sprintf@tmpval
  2098     0587  0833               	movf	?_scale+1,w
  2099     0588  00E5               	movwf	sprintf@tmpval+1
  2100     0589  0834               	movf	?_scale+2,w
  2101     058A  00E6               	movwf	sprintf@tmpval+2
  2102                           
  2103                           ;doprnt.c: 1152: val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,tmpval.integ) : _div_to_
      +                          l_(fval,tmpval.integ));
  2104     058B  086B               	movf	sprintf@fval,w
  2105     058C  00F0               	movwf	__tdiv_to_l_@f1
  2106     058D  086C               	movf	sprintf@fval+1,w
  2107     058E  00F1               	movwf	__tdiv_to_l_@f1+1
  2108     058F  086D               	movf	sprintf@fval+2,w
  2109     0590  00F2               	movwf	__tdiv_to_l_@f1+2
  2110     0591  0864               	movf	sprintf@tmpval,w
  2111     0592  00F3               	movwf	__tdiv_to_l_@f2
  2112     0593  0865               	movf	sprintf@tmpval+1,w
  2113     0594  00F4               	movwf	__tdiv_to_l_@f2+1
  2114     0595  0866               	movf	sprintf@tmpval+2,w
  2115     0596  00F5               	movwf	__tdiv_to_l_@f2+2
  2116     0597  120A  158A  22F8  120A  118A  	fcall	__tdiv_to_l_
  2117     059C  0873               	movf	?__tdiv_to_l_+3,w
  2118     059D  00E1               	movwf	sprintf@val+3
  2119     059E  0872               	movf	?__tdiv_to_l_+2,w
  2120     059F  00E0               	movwf	sprintf@val+2
  2121     05A0  0871               	movf	?__tdiv_to_l_+1,w
  2122     05A1  00DF               	movwf	sprintf@val+1
  2123     05A2  0870               	movf	?__tdiv_to_l_,w
  2124     05A3  00DE               	movwf	sprintf@val
  2125                           
  2126                           ;doprnt.c: 1155: fval = 0.0;
  2127     05A4  3000               	movlw	0
  2128     05A5  00EB               	movwf	sprintf@fval
  2129     05A6  3000               	movlw	0
  2130     05A7  00EC               	movwf	sprintf@fval+1
  2131     05A8  3000               	movlw	0
  2132     05A9  00ED               	movwf	sprintf@fval+2
  2133                           
  2134                           ;doprnt.c: 1156: } else {
  2135     05AA  2DE7               	goto	l2631
  2136     05AB                     l2627:
  2137                           
  2138                           ;doprnt.c: 1157: val = (unsigned long)fval;
  2139     05AB  1283               	bcf	3,5	;RP0=0, select bank0
  2140     05AC  1303               	bcf	3,6	;RP1=0, select bank0
  2141     05AD  086B               	movf	sprintf@fval,w
  2142     05AE  00B9               	movwf	___fttol@f1
  2143     05AF  086C               	movf	sprintf@fval+1,w
  2144     05B0  00BA               	movwf	___fttol@f1+1
  2145     05B1  086D               	movf	sprintf@fval+2,w
  2146     05B2  00BB               	movwf	___fttol@f1+2
  2147     05B3  120A  158A  2281  120A  118A  	fcall	___fttol
  2148     05B8  083C               	movf	?___fttol+3,w
  2149     05B9  00E1               	movwf	sprintf@val+3
  2150     05BA  083B               	movf	?___fttol+2,w
  2151     05BB  00E0               	movwf	sprintf@val+2
  2152     05BC  083A               	movf	?___fttol+1,w
  2153     05BD  00DF               	movwf	sprintf@val+1
  2154     05BE  0839               	movf	?___fttol,w
  2155     05BF  00DE               	movwf	sprintf@val
  2156                           
  2157                           ;doprnt.c: 1158: fval -= (double)val;
  2158     05C0  0861               	movf	sprintf@val+3,w
  2159     05C1  00FB               	movwf	___lltoft@c+3
  2160     05C2  0860               	movf	sprintf@val+2,w
  2161     05C3  00FA               	movwf	___lltoft@c+2
  2162     05C4  085F               	movf	sprintf@val+1,w
  2163     05C5  00F9               	movwf	___lltoft@c+1
  2164     05C6  085E               	movf	sprintf@val,w
  2165     05C7  00F8               	movwf	___lltoft@c
  2166     05C8  120A  118A  2004  120A  118A  	fcall	___lltoft
  2167     05CD  0878               	movf	?___lltoft,w
  2168     05CE  1283               	bcf	3,5	;RP0=0, select bank0
  2169     05CF  00C8               	movwf	___ftsub@f2
  2170     05D0  0879               	movf	?___lltoft+1,w
  2171     05D1  00C9               	movwf	___ftsub@f2+1
  2172     05D2  087A               	movf	?___lltoft+2,w
  2173     05D3  00CA               	movwf	___ftsub@f2+2
  2174     05D4  086B               	movf	sprintf@fval,w
  2175     05D5  00CB               	movwf	___ftsub@f1
  2176     05D6  086C               	movf	sprintf@fval+1,w
  2177     05D7  00CC               	movwf	___ftsub@f1+1
  2178     05D8  086D               	movf	sprintf@fval+2,w
  2179     05D9  00CD               	movwf	___ftsub@f1+2
  2180     05DA  120A  158A  209A  120A  118A  	fcall	___ftsub
  2181     05DF  0848               	movf	?___ftsub,w
  2182     05E0  00EB               	movwf	sprintf@fval
  2183     05E1  0849               	movf	?___ftsub+1,w
  2184     05E2  00EC               	movwf	sprintf@fval+1
  2185     05E3  084A               	movf	?___ftsub+2,w
  2186     05E4  00ED               	movwf	sprintf@fval+2
  2187                           
  2188                           ;doprnt.c: 1159: eexp = 0;
  2189     05E5  01E2               	clrf	sprintf@eexp
  2190     05E6  01E3               	clrf	sprintf@eexp+1
  2191     05E7                     l2631:
  2192                           
  2193                           ;doprnt.c: 1160: };doprnt.c: 1162: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ;
      +                           c++)
  2194     05E7  01EE               	clrf	sprintf@c
  2195     05E8  0AEE               	incf	sprintf@c,f
  2196     05E9                     l2637:
  2197                           
  2198                           ;doprnt.c: 1163: if(val < dpowers[c])
  2199     05E9  086E               	movf	sprintf@c,w
  2200     05EA  00D2               	movwf	??_sprintf
  2201     05EB  3001               	movlw	1
  2202     05EC                     u3705:
  2203     05EC  1003               	clrc
  2204     05ED  0DD2               	rlf	??_sprintf,f
  2205     05EE  3EFF               	addlw	-1
  2206     05EF  1D03               	skipz
  2207     05F0  2DEC               	goto	u3705
  2208     05F1  1003               	clrc
  2209     05F2  0D52               	rlf	??_sprintf,w
  2210     05F3  3E4F               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  2211     05F4  0084               	movwf	4
  2212     05F5  120A  158A  200A  120A  118A  	fcall	stringdir
  2213     05FA  00D3               	movwf	??_sprintf+1
  2214     05FB  120A  158A  200A  120A  118A  	fcall	stringdir
  2215     0600  00D4               	movwf	??_sprintf+2
  2216     0601  120A  158A  200A  120A  118A  	fcall	stringdir
  2217     0606  00D5               	movwf	??_sprintf+3
  2218     0607  120A  158A  200A  120A  118A  	fcall	stringdir
  2219     060C  00D6               	movwf	??_sprintf+4
  2220     060D  0856               	movf	??_sprintf+4,w
  2221     060E  0261               	subwf	sprintf@val+3,w
  2222     060F  1D03               	skipz
  2223     0610  2E1B               	goto	u3715
  2224     0611  0855               	movf	??_sprintf+3,w
  2225     0612  0260               	subwf	sprintf@val+2,w
  2226     0613  1D03               	skipz
  2227     0614  2E1B               	goto	u3715
  2228     0615  0854               	movf	??_sprintf+2,w
  2229     0616  025F               	subwf	sprintf@val+1,w
  2230     0617  1D03               	skipz
  2231     0618  2E1B               	goto	u3715
  2232     0619  0853               	movf	??_sprintf+1,w
  2233     061A  025E               	subwf	sprintf@val,w
  2234     061B                     u3715:
  2235     061B  1C03               	btfss	3,0
  2236     061C  2E25               	goto	l2645
  2237     061D  3001               	movlw	1
  2238     061E  00FF               	movwf	127
  2239     061F  087F               	movf	127,w
  2240     0620  07EE               	addwf	sprintf@c,f
  2241     0621  300A               	movlw	10
  2242     0622  066E               	xorwf	sprintf@c,w
  2243     0623  1D03               	btfss	3,2
  2244     0624  2DE9               	goto	l2637
  2245     0625                     l2645:
  2246                           
  2247                           ;doprnt.c: 1201: {;doprnt.c: 1214: if(flag & 0x03)
  2248     0625  085C               	movf	sprintf@flag,w
  2249     0626  3903               	andlw	3
  2250     0627  1903               	btfsc	3,2
  2251     0628  2E32               	goto	l2659
  2252                           
  2253                           ;doprnt.c: 1216: ((*sp++ = ('-')));
  2254     0629  086A               	movf	sprintf@sp,w
  2255     062A  0084               	movwf	4
  2256     062B  302D               	movlw	45
  2257     062C                     L6:
  2258     062C  1383               	bcf	3,7	;select IRP bank0
  2259     062D  0080               	movwf	0
  2260     062E  3001               	movlw	1
  2261     062F  00FF               	movwf	127
  2262     0630  087F               	movf	127,w
  2263     0631  07EA               	addwf	sprintf@sp,f
  2264     0632                     l2659:
  2265     0632  3001               	movlw	1
  2266     0633  02EE               	subwf	sprintf@c,f
  2267     0634  0A6E               	incf	sprintf@c,w
  2268     0635  1903               	btfsc	3,2
  2269     0636  2EA3               	goto	l2667
  2270                           
  2271                           ;doprnt.c: 1226: {;doprnt.c: 1227: tmpval.vd = val/dpowers[c];
  2272     0637  086E               	movf	sprintf@c,w
  2273     0638  00D2               	movwf	??_sprintf
  2274     0639  3001               	movlw	1
  2275     063A                     u3745:
  2276     063A  1003               	clrc
  2277     063B  0DD2               	rlf	??_sprintf,f
  2278     063C  3EFF               	addlw	-1
  2279     063D  1D03               	skipz
  2280     063E  2E3A               	goto	u3745
  2281     063F  1003               	clrc
  2282     0640  0D52               	rlf	??_sprintf,w
  2283     0641  3E4F               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  2284     0642  0084               	movwf	4
  2285     0643  120A  158A  200A  120A  118A  	fcall	stringdir
  2286     0648  00F0               	movwf	___lldiv@divisor
  2287     0649  120A  158A  200A  120A  118A  	fcall	stringdir
  2288     064E  00F1               	movwf	___lldiv@divisor+1
  2289     064F  120A  158A  200A  120A  118A  	fcall	stringdir
  2290     0654  00F2               	movwf	___lldiv@divisor+2
  2291     0655  120A  158A  200A  120A  118A  	fcall	stringdir
  2292     065A  00F3               	movwf	___lldiv@divisor+3
  2293     065B  0861               	movf	sprintf@val+3,w
  2294     065C  00F7               	movwf	___lldiv@dividend+3
  2295     065D  0860               	movf	sprintf@val+2,w
  2296     065E  00F6               	movwf	___lldiv@dividend+2
  2297     065F  085F               	movf	sprintf@val+1,w
  2298     0660  00F5               	movwf	___lldiv@dividend+1
  2299     0661  085E               	movf	sprintf@val,w
  2300     0662  00F4               	movwf	___lldiv@dividend
  2301     0663  120A  158A  21B7  120A  118A  	fcall	___lldiv
  2302     0668  0873               	movf	?___lldiv+3,w
  2303     0669  00E7               	movwf	sprintf@tmpval+3
  2304     066A  0872               	movf	?___lldiv+2,w
  2305     066B  00E6               	movwf	sprintf@tmpval+2
  2306     066C  0871               	movf	?___lldiv+1,w
  2307     066D  00E5               	movwf	sprintf@tmpval+1
  2308     066E  0870               	movf	?___lldiv,w
  2309     066F  00E4               	movwf	sprintf@tmpval
  2310                           
  2311                           ;doprnt.c: 1228: tmpval.vd %= 10;
  2312     0670  3000               	movlw	0
  2313     0671  00F3               	movwf	___llmod@divisor+3
  2314     0672  3000               	movlw	0
  2315     0673  00F2               	movwf	___llmod@divisor+2
  2316     0674  3000               	movlw	0
  2317     0675  00F1               	movwf	___llmod@divisor+1
  2318     0676  300A               	movlw	10
  2319     0677  00F0               	movwf	___llmod@divisor
  2320     0678  0867               	movf	sprintf@tmpval+3,w
  2321     0679  00F7               	movwf	___llmod@dividend+3
  2322     067A  0866               	movf	sprintf@tmpval+2,w
  2323     067B  00F6               	movwf	___llmod@dividend+2
  2324     067C  0865               	movf	sprintf@tmpval+1,w
  2325     067D  00F5               	movwf	___llmod@dividend+1
  2326     067E  0864               	movf	sprintf@tmpval,w
  2327     067F  00F4               	movwf	___llmod@dividend
  2328     0680  120A  158A  20B7  120A  118A  	fcall	___llmod
  2329     0685  0873               	movf	?___llmod+3,w
  2330     0686  00E7               	movwf	sprintf@tmpval+3
  2331     0687  0872               	movf	?___llmod+2,w
  2332     0688  00E6               	movwf	sprintf@tmpval+2
  2333     0689  0871               	movf	?___llmod+1,w
  2334     068A  00E5               	movwf	sprintf@tmpval+1
  2335     068B  0870               	movf	?___llmod,w
  2336     068C  00E4               	movwf	sprintf@tmpval
  2337                           
  2338                           ;doprnt.c: 1229: ((*sp++ = ('0' + tmpval.vd)));
  2339     068D  086A               	movf	sprintf@sp,w
  2340     068E  0084               	movwf	4
  2341     068F  0864               	movf	sprintf@tmpval,w
  2342     0690  3E30               	addlw	48
  2343     0691  2E2C               	goto	L6
  2344     0692                     l2661:
  2345                           
  2346                           ;doprnt.c: 1234: ((*sp++ = ('0')));
  2347     0692  1283               	bcf	3,5	;RP0=0, select bank0
  2348     0693  1303               	bcf	3,6	;RP1=0, select bank0
  2349     0694  086A               	movf	sprintf@sp,w
  2350     0695  0084               	movwf	4
  2351     0696  3030               	movlw	48
  2352     0697  1383               	bcf	3,7	;select IRP bank0
  2353     0698  0080               	movwf	0
  2354     0699  3001               	movlw	1
  2355     069A  00FF               	movwf	127
  2356     069B  087F               	movf	127,w
  2357     069C  07EA               	addwf	sprintf@sp,f
  2358                           
  2359                           ;doprnt.c: 1235: eexp--;
  2360     069D  30FF               	movlw	255
  2361     069E  07E2               	addwf	sprintf@eexp,f
  2362     069F  1803               	skipnc
  2363     06A0  0AE3               	incf	sprintf@eexp+1,f
  2364     06A1  30FF               	movlw	255
  2365     06A2  07E3               	addwf	sprintf@eexp+1,f
  2366     06A3                     l2667:
  2367     06A3  0863               	movf	sprintf@eexp+1,w
  2368     06A4  3A80               	xorlw	128
  2369     06A5  00FF               	movwf	127
  2370     06A6  3080               	movlw	128
  2371     06A7  027F               	subwf	127,w
  2372     06A8  1D03               	skipz
  2373     06A9  2EAC               	goto	u3765
  2374     06AA  3001               	movlw	1
  2375     06AB  0262               	subwf	sprintf@eexp,w
  2376     06AC                     u3765:
  2377     06AC  1803               	skipnc
  2378     06AD  2E92               	goto	l2661
  2379                           
  2380                           ;doprnt.c: 1236: };doprnt.c: 1237: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2)
      +                          )
  2381     06AE  1283               	bcf	3,5	;RP0=0, select bank0
  2382     06AF  1303               	bcf	3,6	;RP1=0, select bank0
  2383     06B0  0869               	movf	sprintf@prec+1,w
  2384     06B1  3A80               	xorlw	128
  2385     06B2  00FF               	movwf	127
  2386     06B3  3080               	movlw	128
  2387     06B4  027F               	subwf	127,w
  2388     06B5  1D03               	skipz
  2389     06B6  2EB9               	goto	u3775
  2390     06B7  3009               	movlw	9
  2391     06B8  0268               	subwf	sprintf@prec,w
  2392     06B9                     u3775:
  2393     06B9  1C03               	skipc
  2394     06BA  2EBF               	goto	l2673
  2395                           
  2396                           ;doprnt.c: 1238: c = (sizeof dpowers/sizeof dpowers[0])-2;
  2397     06BB  3008               	movlw	8
  2398     06BC  1283               	bcf	3,5	;RP0=0, select bank0
  2399     06BD  1303               	bcf	3,6	;RP1=0, select bank0
  2400     06BE  2EC2               	goto	L3
  2401     06BF                     l2673:
  2402                           
  2403                           ;doprnt.c: 1239: else;doprnt.c: 1240: c = (char)prec;
  2404     06BF  1283               	bcf	3,5	;RP0=0, select bank0
  2405     06C0  1303               	bcf	3,6	;RP1=0, select bank0
  2406     06C1  0868               	movf	sprintf@prec,w
  2407     06C2                     L3:
  2408     06C2  00EE               	movwf	sprintf@c
  2409                           
  2410                           ;doprnt.c: 1241: prec -= (int)c;
  2411     06C3  086E               	movf	sprintf@c,w
  2412     06C4  00D2               	movwf	??_sprintf
  2413     06C5  01D3               	clrf	??_sprintf+1
  2414     06C6  0852               	movf	??_sprintf,w
  2415     06C7  02E8               	subwf	sprintf@prec,f
  2416     06C8  0853               	movf	??_sprintf+1,w
  2417     06C9  1C03               	skipc
  2418     06CA  03E9               	decf	sprintf@prec+1,f
  2419     06CB  02E9               	subwf	sprintf@prec+1,f
  2420                           
  2421                           ;doprnt.c: 1245: if(c)
  2422     06CC  086E               	movf	sprintf@c,w
  2423     06CD  1903               	btfsc	3,2
  2424     06CE  2ED8               	goto	l2681
  2425                           
  2426                           ;doprnt.c: 1247: ((*sp++ = ('.')));
  2427     06CF  086A               	movf	sprintf@sp,w
  2428     06D0  0084               	movwf	4
  2429     06D1  302E               	movlw	46
  2430     06D2  1383               	bcf	3,7	;select IRP bank0
  2431     06D3  0080               	movwf	0
  2432     06D4  3001               	movlw	1
  2433     06D5  00FF               	movwf	127
  2434     06D6  087F               	movf	127,w
  2435     06D7  07EA               	addwf	sprintf@sp,f
  2436     06D8                     l2681:
  2437                           
  2438                           ;doprnt.c: 1253: val = (unsigned long)(fval * scale((signed char)c));
  2439     06D8  086E               	movf	sprintf@c,w
  2440     06D9  120A  118A  213D  120A  118A  	fcall	_scale
  2441     06DE  0832               	movf	?_scale,w
  2442     06DF  00D8               	movwf	_sprintf$818
  2443     06E0  0833               	movf	?_scale+1,w
  2444     06E1  00D9               	movwf	_sprintf$818+1
  2445     06E2  0834               	movf	?_scale+2,w
  2446     06E3  00DA               	movwf	_sprintf$818+2
  2447                           
  2448                           ;doprnt.c: 1253: val = (unsigned long)(fval * scale((signed char)c));
  2449     06E4  0858               	movf	_sprintf$818,w
  2450     06E5  00A6               	movwf	___ftmul@f2
  2451     06E6  0859               	movf	_sprintf$818+1,w
  2452     06E7  00A7               	movwf	___ftmul@f2+1
  2453     06E8  085A               	movf	_sprintf$818+2,w
  2454     06E9  00A8               	movwf	___ftmul@f2+2
  2455     06EA  086B               	movf	sprintf@fval,w
  2456     06EB  00A3               	movwf	___ftmul@f1
  2457     06EC  086C               	movf	sprintf@fval+1,w
  2458     06ED  00A4               	movwf	___ftmul@f1+1
  2459     06EE  086D               	movf	sprintf@fval+2,w
  2460     06EF  00A5               	movwf	___ftmul@f1+2
  2461     06F0  120A  158A  2399  120A  118A  	fcall	___ftmul
  2462     06F5  0823               	movf	?___ftmul,w
  2463     06F6  00B9               	movwf	___fttol@f1
  2464     06F7  0824               	movf	?___ftmul+1,w
  2465     06F8  00BA               	movwf	___fttol@f1+1
  2466     06F9  0825               	movf	?___ftmul+2,w
  2467     06FA  00BB               	movwf	___fttol@f1+2
  2468     06FB  120A  158A  2281  120A  118A  	fcall	___fttol
  2469     0700  083C               	movf	?___fttol+3,w
  2470     0701  00E1               	movwf	sprintf@val+3
  2471     0702  083B               	movf	?___fttol+2,w
  2472     0703  00E0               	movwf	sprintf@val+2
  2473     0704  083A               	movf	?___fttol+1,w
  2474     0705  00DF               	movwf	sprintf@val+1
  2475     0706  0839               	movf	?___fttol,w
  2476     0707                     L4:
  2477     0707  00DE               	movwf	sprintf@val
  2478     0708  3001               	movlw	1
  2479     0709  02EE               	subwf	sprintf@c,f
  2480     070A  0A6E               	incf	sprintf@c,w
  2481     070B  1903               	btfsc	3,2
  2482     070C  2FB5               	goto	l2703
  2483                           
  2484                           ;doprnt.c: 1255: tmpval.vd = val/dpowers[c];
  2485                           
  2486                           ;doprnt.c: 1254: while(c--) {
  2487     070D  086E               	movf	sprintf@c,w
  2488     070E  00D2               	movwf	??_sprintf
  2489     070F  3001               	movlw	1
  2490     0710                     u3795:
  2491     0710  1003               	clrc
  2492     0711  0DD2               	rlf	??_sprintf,f
  2493     0712  3EFF               	addlw	-1
  2494     0713  1D03               	skipz
  2495     0714  2F10               	goto	u3795
  2496     0715  1003               	clrc
  2497     0716  0D52               	rlf	??_sprintf,w
  2498     0717  3E4F               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  2499     0718  0084               	movwf	4
  2500     0719  120A  158A  200A  120A  118A  	fcall	stringdir
  2501     071E  00F0               	movwf	___lldiv@divisor
  2502     071F  120A  158A  200A  120A  118A  	fcall	stringdir
  2503     0724  00F1               	movwf	___lldiv@divisor+1
  2504     0725  120A  158A  200A  120A  118A  	fcall	stringdir
  2505     072A  00F2               	movwf	___lldiv@divisor+2
  2506     072B  120A  158A  200A  120A  118A  	fcall	stringdir
  2507     0730  00F3               	movwf	___lldiv@divisor+3
  2508     0731  0861               	movf	sprintf@val+3,w
  2509     0732  00F7               	movwf	___lldiv@dividend+3
  2510     0733  0860               	movf	sprintf@val+2,w
  2511     0734  00F6               	movwf	___lldiv@dividend+2
  2512     0735  085F               	movf	sprintf@val+1,w
  2513     0736  00F5               	movwf	___lldiv@dividend+1
  2514     0737  085E               	movf	sprintf@val,w
  2515     0738  00F4               	movwf	___lldiv@dividend
  2516     0739  120A  158A  21B7  120A  118A  	fcall	___lldiv
  2517     073E  0873               	movf	?___lldiv+3,w
  2518     073F  00E7               	movwf	sprintf@tmpval+3
  2519     0740  0872               	movf	?___lldiv+2,w
  2520     0741  00E6               	movwf	sprintf@tmpval+2
  2521     0742  0871               	movf	?___lldiv+1,w
  2522     0743  00E5               	movwf	sprintf@tmpval+1
  2523     0744  0870               	movf	?___lldiv,w
  2524     0745  00E4               	movwf	sprintf@tmpval
  2525                           
  2526                           ;doprnt.c: 1256: tmpval.vd %= 10;
  2527     0746  3000               	movlw	0
  2528     0747  00F3               	movwf	___llmod@divisor+3
  2529     0748  3000               	movlw	0
  2530     0749  00F2               	movwf	___llmod@divisor+2
  2531     074A  3000               	movlw	0
  2532     074B  00F1               	movwf	___llmod@divisor+1
  2533     074C  300A               	movlw	10
  2534     074D  00F0               	movwf	___llmod@divisor
  2535     074E  0867               	movf	sprintf@tmpval+3,w
  2536     074F  00F7               	movwf	___llmod@dividend+3
  2537     0750  0866               	movf	sprintf@tmpval+2,w
  2538     0751  00F6               	movwf	___llmod@dividend+2
  2539     0752  0865               	movf	sprintf@tmpval+1,w
  2540     0753  00F5               	movwf	___llmod@dividend+1
  2541     0754  0864               	movf	sprintf@tmpval,w
  2542     0755  00F4               	movwf	___llmod@dividend
  2543     0756  120A  158A  20B7  120A  118A  	fcall	___llmod
  2544     075B  0873               	movf	?___llmod+3,w
  2545     075C  00E7               	movwf	sprintf@tmpval+3
  2546     075D  0872               	movf	?___llmod+2,w
  2547     075E  00E6               	movwf	sprintf@tmpval+2
  2548     075F  0871               	movf	?___llmod+1,w
  2549     0760  00E5               	movwf	sprintf@tmpval+1
  2550     0761  0870               	movf	?___llmod,w
  2551     0762  00E4               	movwf	sprintf@tmpval
  2552                           
  2553                           ;doprnt.c: 1257: ((*sp++ = ('0' + tmpval.vd)));
  2554     0763  086A               	movf	sprintf@sp,w
  2555     0764  0084               	movwf	4
  2556     0765  0864               	movf	sprintf@tmpval,w
  2557     0766  3E30               	addlw	48
  2558     0767  1383               	bcf	3,7	;select IRP bank0
  2559     0768  0080               	movwf	0
  2560     0769  3001               	movlw	1
  2561     076A  00FF               	movwf	127
  2562     076B  087F               	movf	127,w
  2563     076C  07EA               	addwf	sprintf@sp,f
  2564                           
  2565                           ;doprnt.c: 1258: val %= dpowers[c];
  2566     076D  086E               	movf	sprintf@c,w
  2567     076E  00D2               	movwf	??_sprintf
  2568     076F  3001               	movlw	1
  2569     0770                     u3805:
  2570     0770  1003               	clrc
  2571     0771  0DD2               	rlf	??_sprintf,f
  2572     0772  3EFF               	addlw	-1
  2573     0773  1D03               	skipz
  2574     0774  2F70               	goto	u3805
  2575     0775  1003               	clrc
  2576     0776  0D52               	rlf	??_sprintf,w
  2577     0777  3E4F               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  2578     0778  0084               	movwf	4
  2579     0779  120A  158A  200A  120A  118A  	fcall	stringdir
  2580     077E  00F0               	movwf	___llmod@divisor
  2581     077F  120A  158A  200A  120A  118A  	fcall	stringdir
  2582     0784  00F1               	movwf	___llmod@divisor+1
  2583     0785  120A  158A  200A  120A  118A  	fcall	stringdir
  2584     078A  00F2               	movwf	___llmod@divisor+2
  2585     078B  120A  158A  200A  120A  118A  	fcall	stringdir
  2586     0790  00F3               	movwf	___llmod@divisor+3
  2587     0791  0861               	movf	sprintf@val+3,w
  2588     0792  00F7               	movwf	___llmod@dividend+3
  2589     0793  0860               	movf	sprintf@val+2,w
  2590     0794  00F6               	movwf	___llmod@dividend+2
  2591     0795  085F               	movf	sprintf@val+1,w
  2592     0796  00F5               	movwf	___llmod@dividend+1
  2593     0797  085E               	movf	sprintf@val,w
  2594     0798  00F4               	movwf	___llmod@dividend
  2595     0799  120A  158A  20B7  120A  118A  	fcall	___llmod
  2596     079E  0873               	movf	?___llmod+3,w
  2597     079F  00E1               	movwf	sprintf@val+3
  2598     07A0  0872               	movf	?___llmod+2,w
  2599     07A1  00E0               	movwf	sprintf@val+2
  2600     07A2  0871               	movf	?___llmod+1,w
  2601     07A3  00DF               	movwf	sprintf@val+1
  2602     07A4  0870               	movf	?___llmod,w
  2603     07A5  2F07               	goto	L4
  2604     07A6                     l2697:
  2605                           
  2606                           ;doprnt.c: 1262: ((*sp++ = ('0')));
  2607     07A6  086A               	movf	sprintf@sp,w
  2608     07A7  0084               	movwf	4
  2609     07A8  3030               	movlw	48
  2610     07A9  1383               	bcf	3,7	;select IRP bank0
  2611     07AA  0080               	movwf	0
  2612     07AB  3001               	movlw	1
  2613     07AC  00FF               	movwf	127
  2614     07AD  087F               	movf	127,w
  2615     07AE  07EA               	addwf	sprintf@sp,f
  2616                           
  2617                           ;doprnt.c: 1263: prec--;
  2618     07AF  30FF               	movlw	255
  2619     07B0  07E8               	addwf	sprintf@prec,f
  2620     07B1  1803               	skipnc
  2621     07B2  0AE9               	incf	sprintf@prec+1,f
  2622     07B3  30FF               	movlw	255
  2623     07B4  07E9               	addwf	sprintf@prec+1,f
  2624     07B5                     l2703:
  2625     07B5  0868               	movf	sprintf@prec,w
  2626     07B6  0469               	iorwf	sprintf@prec+1,w
  2627     07B7  1903               	btfsc	3,2
  2628     07B8  2B97               	goto	l2723
  2629     07B9  2FA6               	goto	l2697
  2630     07BA                     l2705:
  2631                           
  2632                           ;doprnt.c: 1272: };doprnt.c: 1316: if(prec == 0 && val == 0)
  2633     07BA  0868               	movf	sprintf@prec,w
  2634     07BB  0469               	iorwf	sprintf@prec+1,w
  2635     07BC  1D03               	btfss	3,2
  2636     07BD  2FCA               	goto	l267
  2637     07BE  0861               	movf	sprintf@val+3,w
  2638     07BF  0460               	iorwf	sprintf@val+2,w
  2639     07C0  045F               	iorwf	sprintf@val+1,w
  2640     07C1  045E               	iorwf	sprintf@val,w
  2641     07C2  1D03               	skipz
  2642     07C3  2FCA               	goto	l267
  2643                           
  2644                           ;doprnt.c: 1317: prec++;
  2645     07C4  3001               	movlw	1
  2646     07C5  07E8               	addwf	sprintf@prec,f
  2647     07C6  1803               	skipnc
  2648     07C7  0AE9               	incf	sprintf@prec+1,f
  2649     07C8  3000               	movlw	0
  2650     07C9  07E9               	addwf	sprintf@prec+1,f
  2651     07CA                     l267:
  2652                           
  2653                           ;doprnt.c: 1365: if(c < prec)
  2654     07CA  0869               	movf	sprintf@prec+1,w
  2655     07CB  3A80               	xorlw	128
  2656     07CC  3C80               	sublw	128
  2657     07CD  1D03               	skipz
  2658     07CE  2FD1               	goto	u3855
  2659     07CF  0868               	movf	sprintf@prec,w
  2660     07D0  026E               	subwf	sprintf@c,w
  2661     07D1                     u3855:
  2662     07D1  1C03               	btfss	3,0
  2663     07D2  2FE0               	goto	l2717
  2664                           
  2665                           ;doprnt.c: 1367: else if(prec < c)
  2666     07D3  1283               	bcf	3,5	;RP0=0, select bank0
  2667     07D4  1303               	bcf	3,6	;RP1=0, select bank0
  2668     07D5  0869               	movf	sprintf@prec+1,w
  2669     07D6  3A80               	xorlw	128
  2670     07D7  00D2               	movwf	??_sprintf
  2671     07D8  3080               	movlw	128
  2672     07D9  0252               	subwf	??_sprintf,w
  2673     07DA  1D03               	skipz
  2674     07DB  2FDE               	goto	u3865
  2675     07DC  086E               	movf	sprintf@c,w
  2676     07DD  0268               	subwf	sprintf@prec,w
  2677     07DE                     u3865:
  2678     07DE  1C03               	btfss	3,0
  2679     07DF  2FE0               	goto	l2717
  2680     07E0                     l2717:
  2681                           
  2682                           ;doprnt.c: 1448: {;doprnt.c: 1464: if(flag & 0x03)
  2683     07E0  1283               	bcf	3,5	;RP0=0, select bank0
  2684     07E1  1303               	bcf	3,6	;RP1=0, select bank0
  2685     07E2  085C               	movf	sprintf@flag,w
  2686     07E3  3903               	andlw	3
  2687     07E4  1903               	btfsc	3,2
  2688     07E5  2B97               	goto	l2723
  2689                           
  2690                           ;doprnt.c: 1465: ((*sp++ = ('-')));
  2691     07E6  086A               	movf	sprintf@sp,w
  2692     07E7  0084               	movwf	4
  2693     07E8  302D               	movlw	45
  2694     07E9                     L5:
  2695     07E9  1383               	bcf	3,7	;select IRP bank0
  2696     07EA  0080               	movwf	0
  2697     07EB  3001               	movlw	1
  2698     07EC  00FF               	movwf	127
  2699     07ED  087F               	movf	127,w
  2700     07EE  07EA               	addwf	sprintf@sp,f
  2701     07EF  2B97               	goto	l2723
  2702     07F0                     l2725:
  2703                           
  2704                           ;doprnt.c: 1564: *sp = 0;
  2705     07F0  086A               	movf	sprintf@sp,w
  2706     07F1  0084               	movwf	4
  2707     07F2  1383               	bcf	3,7	;select IRP bank0
  2708     07F3  0180               	clrf	0
  2709     07F4  0008               	return
  2710     07F5                     __end_of_sprintf:
  2711                           
  2712                           	psect	text2
  2713     013D                     __ptext2:	
  2714 ;; *************** function _scale *****************
  2715 ;; Defined at:
  2716 ;;		line 433 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c90\common\doprnt.c"
  2717 ;; Parameters:    Size  Location     Type
  2718 ;;  scl             1    wreg     char 
  2719 ;; Auto vars:     Size  Location     Type
  2720 ;;  scl             1   24[BANK0 ] char 
  2721 ;; Return value:  Size  Location     Type
  2722 ;;                  3   18[BANK0 ] char 
  2723 ;; Registers used:
  2724 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2725 ;; Tracked objects:
  2726 ;;		On entry : 300/0
  2727 ;;		On exit  : 300/0
  2728 ;;		Unchanged: 0/0
  2729 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2730 ;;      Params:         0       3       0       0       0
  2731 ;;      Locals:         0       4       0       0       0
  2732 ;;      Temps:          0       0       0       0       0
  2733 ;;      Totals:         0       7       0       0       0
  2734 ;;Total ram usage:        7 bytes
  2735 ;; Hardware stack levels used: 1
  2736 ;; Hardware stack levels required when called: 2
  2737 ;; This function calls:
  2738 ;;		___awdiv
  2739 ;;		___awmod
  2740 ;;		___bmul
  2741 ;;		___ftmul
  2742 ;; This function is called by:
  2743 ;;		_sprintf
  2744 ;; This function uses a non-reentrant model
  2745 ;;
  2746                           
  2747     013D                     _scale:	
  2748                           ;psect for function _scale
  2749                           
  2750                           
  2751                           ;incstack = 0
  2752                           ; Regs used in _scale: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2753                           ;scale@scl stored from wreg
  2754     013D  00B8               	movwf	scale@scl
  2755                           
  2756                           ;doprnt.c: 436: if(scl < 0) {
  2757     013E  1FB8               	btfss	scale@scl,7
  2758     013F  2A6B               	goto	l2193
  2759                           
  2760                           ;doprnt.c: 437: scl = -scl;
  2761     0140  09B8               	comf	scale@scl,f
  2762     0141  0AB8               	incf	scale@scl,f
  2763                           
  2764                           ;doprnt.c: 438: if(scl>=110)
  2765     0142  0838               	movf	scale@scl,w
  2766     0143  3A80               	xorlw	128
  2767     0144  3E12               	addlw	-238
  2768     0145  1C03               	skipc
  2769     0146  29ED               	goto	l2183
  2770                           
  2771                           ;doprnt.c: 439: return _npowers_[(unsigned char)(scl/100+18)] * _npowers_[(unsigned char
      +                          )((scl%100)/10+9)] * _npowers_[(unsigned char)(scl%10)];
  2772     0147  3003               	movlw	3
  2773     0148  00A0               	movwf	___bmul@multiplicand
  2774     0149  0838               	movf	scale@scl,w
  2775     014A  00F2               	movwf	___awmod@dividend
  2776     014B  01F3               	clrf	___awmod@dividend+1
  2777     014C  1BF2               	btfsc	___awmod@dividend,7
  2778     014D  03F3               	decf	___awmod@dividend+1,f
  2779     014E  3064               	movlw	100
  2780     014F  00F0               	movwf	___awmod@divisor
  2781     0150  3000               	movlw	0
  2782     0151  00F1               	movwf	___awmod@divisor+1
  2783     0152  160A  118A  27B5  120A  118A  	fcall	___awmod
  2784     0157  0871               	movf	?___awmod+1,w
  2785     0158  00F9               	movwf	___awdiv@dividend+1
  2786     0159  0870               	movf	?___awmod,w
  2787     015A  00F8               	movwf	___awdiv@dividend
  2788     015B  300A               	movlw	10
  2789     015C  00F6               	movwf	___awdiv@divisor
  2790     015D  3000               	movlw	0
  2791     015E  00F7               	movwf	___awdiv@divisor+1
  2792     015F  120A  158A  2103  120A  118A  	fcall	___awdiv
  2793     0164  0876               	movf	?___awdiv,w
  2794     0165  160A  118A  2623  120A  118A  	fcall	___bmul
  2795     016A  3E43               	addlw	low (((__npowers_-__stringbase)| (0+32768)+27))
  2796     016B  0084               	movwf	4
  2797     016C  120A  158A  200A  120A  118A  	fcall	stringdir
  2798     0171  00A3               	movwf	___ftmul@f1
  2799     0172  120A  158A  200A  120A  118A  	fcall	stringdir
  2800     0177  00A4               	movwf	___ftmul@f1+1
  2801     0178  120A  158A  200A  120A  118A  	fcall	stringdir
  2802     017D  00A5               	movwf	___ftmul@f1+2
  2803     017E  3003               	movlw	3
  2804     017F  00A0               	movwf	___bmul@multiplicand
  2805     0180  0838               	movf	scale@scl,w
  2806     0181  00F8               	movwf	___awdiv@dividend
  2807     0182  01F9               	clrf	___awdiv@dividend+1
  2808     0183  1BF8               	btfsc	___awdiv@dividend,7
  2809     0184  03F9               	decf	___awdiv@dividend+1,f
  2810     0185  3064               	movlw	100
  2811     0186  00F6               	movwf	___awdiv@divisor
  2812     0187  3000               	movlw	0
  2813     0188  00F7               	movwf	___awdiv@divisor+1
  2814     0189  120A  158A  2103  120A  118A  	fcall	___awdiv
  2815     018E  0876               	movf	?___awdiv,w
  2816     018F  160A  118A  2623  120A  118A  	fcall	___bmul
  2817     0194  3E5E               	addlw	low (((__npowers_-__stringbase)| (0+32768)+54))
  2818     0195  0084               	movwf	4
  2819     0196  120A  158A  200A  120A  118A  	fcall	stringdir
  2820     019B  00A6               	movwf	___ftmul@f2
  2821     019C  120A  158A  200A  120A  118A  	fcall	stringdir
  2822     01A1  00A7               	movwf	___ftmul@f2+1
  2823     01A2  120A  158A  200A  120A  118A  	fcall	stringdir
  2824     01A7  00A8               	movwf	___ftmul@f2+2
  2825     01A8  120A  158A  2399  120A  118A  	fcall	___ftmul
  2826     01AD  0823               	movf	?___ftmul,w
  2827     01AE  00B5               	movwf	_scale$817
  2828     01AF  0824               	movf	?___ftmul+1,w
  2829     01B0  00B6               	movwf	_scale$817+1
  2830     01B1  0825               	movf	?___ftmul+2,w
  2831     01B2  00B7               	movwf	_scale$817+2
  2832                           
  2833                           ;doprnt.c: 439: return _npowers_[(unsigned char)(scl/100+18)] * _npowers_[(unsigned char
      +                          )((scl%100)/10+9)] * _npowers_[(unsigned char)(scl%10)];
  2834     01B3  3003               	movlw	3
  2835     01B4  00A0               	movwf	___bmul@multiplicand
  2836     01B5  0838               	movf	scale@scl,w
  2837     01B6  00F2               	movwf	___awmod@dividend
  2838     01B7  01F3               	clrf	___awmod@dividend+1
  2839     01B8  1BF2               	btfsc	___awmod@dividend,7
  2840     01B9  03F3               	decf	___awmod@dividend+1,f
  2841     01BA  300A               	movlw	10
  2842     01BB  00F0               	movwf	___awmod@divisor
  2843     01BC  3000               	movlw	0
  2844     01BD  00F1               	movwf	___awmod@divisor+1
  2845     01BE  160A  118A  27B5  120A  118A  	fcall	___awmod
  2846     01C3  0870               	movf	?___awmod,w
  2847     01C4  160A  118A  2623  120A  118A  	fcall	___bmul
  2848     01C9  3E28               	addlw	low ((__npowers_-__stringbase)| (0+32768))
  2849     01CA  0084               	movwf	4
  2850     01CB  120A  158A  200A  120A  118A  	fcall	stringdir
  2851     01D0  00A3               	movwf	___ftmul@f1
  2852     01D1  120A  158A  200A  120A  118A  	fcall	stringdir
  2853     01D6  00A4               	movwf	___ftmul@f1+1
  2854     01D7  120A  158A  200A  120A  118A  	fcall	stringdir
  2855     01DC  00A5               	movwf	___ftmul@f1+2
  2856     01DD  0835               	movf	_scale$817,w
  2857     01DE  00A6               	movwf	___ftmul@f2
  2858     01DF  0836               	movf	_scale$817+1,w
  2859     01E0  00A7               	movwf	___ftmul@f2+1
  2860     01E1  0837               	movf	_scale$817+2,w
  2861     01E2  00A8               	movwf	___ftmul@f2+2
  2862     01E3  120A  158A  2399   	fcall	___ftmul
  2863     01E6  0823               	movf	?___ftmul,w
  2864     01E7  00B2               	movwf	?_scale
  2865     01E8  0824               	movf	?___ftmul+1,w
  2866     01E9  00B3               	movwf	?_scale+1
  2867     01EA  0825               	movf	?___ftmul+2,w
  2868     01EB  00B4               	movwf	?_scale+2
  2869     01EC  0008               	return
  2870     01ED                     l2183:
  2871                           
  2872                           ;doprnt.c: 440: else if(scl > 10)
  2873     01ED  0838               	movf	scale@scl,w
  2874     01EE  3A80               	xorlw	128
  2875     01EF  3E75               	addlw	-139
  2876     01F0  1C03               	skipc
  2877     01F1  2A50               	goto	l2189
  2878                           
  2879                           ;doprnt.c: 441: return _npowers_[(unsigned char)(scl/10+9)] * _npowers_[(unsigned char)(
      +                          scl%10)];
  2880     01F2  3003               	movlw	3
  2881     01F3  00A0               	movwf	___bmul@multiplicand
  2882     01F4  0838               	movf	scale@scl,w
  2883     01F5  00F2               	movwf	___awmod@dividend
  2884     01F6  01F3               	clrf	___awmod@dividend+1
  2885     01F7  1BF2               	btfsc	___awmod@dividend,7
  2886     01F8  03F3               	decf	___awmod@dividend+1,f
  2887     01F9  300A               	movlw	10
  2888     01FA  00F0               	movwf	___awmod@divisor
  2889     01FB  3000               	movlw	0
  2890     01FC  00F1               	movwf	___awmod@divisor+1
  2891     01FD  160A  118A  27B5  120A  118A  	fcall	___awmod
  2892     0202  0870               	movf	?___awmod,w
  2893     0203  160A  118A  2623  120A  118A  	fcall	___bmul
  2894     0208  3E28               	addlw	low ((__npowers_-__stringbase)| (0+32768))
  2895     0209  0084               	movwf	4
  2896     020A  120A  158A  200A  120A  118A  	fcall	stringdir
  2897     020F  00A3               	movwf	___ftmul@f1
  2898     0210  120A  158A  200A  120A  118A  	fcall	stringdir
  2899     0215  00A4               	movwf	___ftmul@f1+1
  2900     0216  120A  158A  200A  120A  118A  	fcall	stringdir
  2901     021B  00A5               	movwf	___ftmul@f1+2
  2902     021C  3003               	movlw	3
  2903     021D  00A0               	movwf	___bmul@multiplicand
  2904     021E  0838               	movf	scale@scl,w
  2905     021F  00F8               	movwf	___awdiv@dividend
  2906     0220  01F9               	clrf	___awdiv@dividend+1
  2907     0221  1BF8               	btfsc	___awdiv@dividend,7
  2908     0222  03F9               	decf	___awdiv@dividend+1,f
  2909     0223  300A               	movlw	10
  2910     0224  00F6               	movwf	___awdiv@divisor
  2911     0225  3000               	movlw	0
  2912     0226  00F7               	movwf	___awdiv@divisor+1
  2913     0227  120A  158A  2103  120A  118A  	fcall	___awdiv
  2914     022C  0876               	movf	?___awdiv,w
  2915     022D  160A  118A  2623  120A  118A  	fcall	___bmul
  2916     0232  3E43               	addlw	low (((__npowers_-__stringbase)| (0+32768)+27))
  2917     0233  0084               	movwf	4
  2918     0234  120A  158A  200A  120A  118A  	fcall	stringdir
  2919     0239  00A6               	movwf	___ftmul@f2
  2920     023A  120A  158A  200A  120A  118A  	fcall	stringdir
  2921     023F  00A7               	movwf	___ftmul@f2+1
  2922     0240  120A  158A  200A  120A  118A  	fcall	stringdir
  2923     0245  00A8               	movwf	___ftmul@f2+2
  2924     0246  120A  158A  2399   	fcall	___ftmul
  2925     0249  0823               	movf	?___ftmul,w
  2926     024A  00B2               	movwf	?_scale
  2927     024B  0824               	movf	?___ftmul+1,w
  2928     024C  00B3               	movwf	?_scale+1
  2929     024D  0825               	movf	?___ftmul+2,w
  2930     024E  00B4               	movwf	?_scale+2
  2931     024F  0008               	return
  2932     0250                     l2189:
  2933                           
  2934                           ;doprnt.c: 442: return _npowers_[(unsigned char)scl];
  2935     0250  3003               	movlw	3
  2936     0251  00A0               	movwf	___bmul@multiplicand
  2937     0252  0838               	movf	scale@scl,w
  2938     0253  160A  118A  2623  120A  118A  	fcall	___bmul
  2939     0258  3E28               	addlw	low ((__npowers_-__stringbase)| (0+32768))
  2940     0259  0084               	movwf	4
  2941     025A  120A  158A  200A  120A  118A  	fcall	stringdir
  2942     025F  00B2               	movwf	?_scale
  2943     0260  120A  158A  200A  120A  118A  	fcall	stringdir
  2944     0265  00B3               	movwf	?_scale+1
  2945     0266  120A  158A  200A   	fcall	stringdir
  2946     0269  00B4               	movwf	?_scale+2
  2947     026A  0008               	return
  2948     026B                     l2193:
  2949                           
  2950                           ;doprnt.c: 443: };doprnt.c: 444: if(scl>=110)
  2951     026B  0838               	movf	scale@scl,w
  2952     026C  3A80               	xorlw	128
  2953     026D  3E12               	addlw	-238
  2954     026E  1C03               	skipc
  2955     026F  2B16               	goto	l2201
  2956                           
  2957                           ;doprnt.c: 445: return _powers_[(unsigned char)(scl/100+18)] * _powers_[(unsigned char)(
      +                          (scl%100)/10+9)] * _powers_[(unsigned char)(scl%10)];
  2958     0270  3003               	movlw	3
  2959     0271  00A0               	movwf	___bmul@multiplicand
  2960     0272  0838               	movf	scale@scl,w
  2961     0273  00F2               	movwf	___awmod@dividend
  2962     0274  01F3               	clrf	___awmod@dividend+1
  2963     0275  1BF2               	btfsc	___awmod@dividend,7
  2964     0276  03F3               	decf	___awmod@dividend+1,f
  2965     0277  3064               	movlw	100
  2966     0278  00F0               	movwf	___awmod@divisor
  2967     0279  3000               	movlw	0
  2968     027A  00F1               	movwf	___awmod@divisor+1
  2969     027B  160A  118A  27B5  120A  118A  	fcall	___awmod
  2970     0280  0871               	movf	?___awmod+1,w
  2971     0281  00F9               	movwf	___awdiv@dividend+1
  2972     0282  0870               	movf	?___awmod,w
  2973     0283  00F8               	movwf	___awdiv@dividend
  2974     0284  300A               	movlw	10
  2975     0285  00F6               	movwf	___awdiv@divisor
  2976     0286  3000               	movlw	0
  2977     0287  00F7               	movwf	___awdiv@divisor+1
  2978     0288  120A  158A  2103  120A  118A  	fcall	___awdiv
  2979     028D  0876               	movf	?___awdiv,w
  2980     028E  160A  118A  2623  120A  118A  	fcall	___bmul
  2981     0293  3E1C               	addlw	low (((__powers_-__stringbase)| (0+32768)+27))
  2982     0294  0084               	movwf	4
  2983     0295  120A  158A  200A  120A  118A  	fcall	stringdir
  2984     029A  00A3               	movwf	___ftmul@f1
  2985     029B  120A  158A  200A  120A  118A  	fcall	stringdir
  2986     02A0  00A4               	movwf	___ftmul@f1+1
  2987     02A1  120A  158A  200A  120A  118A  	fcall	stringdir
  2988     02A6  00A5               	movwf	___ftmul@f1+2
  2989     02A7  3003               	movlw	3
  2990     02A8  00A0               	movwf	___bmul@multiplicand
  2991     02A9  0838               	movf	scale@scl,w
  2992     02AA  00F8               	movwf	___awdiv@dividend
  2993     02AB  01F9               	clrf	___awdiv@dividend+1
  2994     02AC  1BF8               	btfsc	___awdiv@dividend,7
  2995     02AD  03F9               	decf	___awdiv@dividend+1,f
  2996     02AE  3064               	movlw	100
  2997     02AF  00F6               	movwf	___awdiv@divisor
  2998     02B0  3000               	movlw	0
  2999     02B1  00F7               	movwf	___awdiv@divisor+1
  3000     02B2  120A  158A  2103  120A  118A  	fcall	___awdiv
  3001     02B7  0876               	movf	?___awdiv,w
  3002     02B8  160A  118A  2623  120A  118A  	fcall	___bmul
  3003     02BD  3E37               	addlw	low (((__powers_-__stringbase)| (0+32768)+54))
  3004     02BE  0084               	movwf	4
  3005     02BF  120A  158A  200A  120A  118A  	fcall	stringdir
  3006     02C4  00A6               	movwf	___ftmul@f2
  3007     02C5  120A  158A  200A  120A  118A  	fcall	stringdir
  3008     02CA  00A7               	movwf	___ftmul@f2+1
  3009     02CB  120A  158A  200A  120A  118A  	fcall	stringdir
  3010     02D0  00A8               	movwf	___ftmul@f2+2
  3011     02D1  120A  158A  2399  120A  118A  	fcall	___ftmul
  3012     02D6  0823               	movf	?___ftmul,w
  3013     02D7  00B5               	movwf	_scale$817
  3014     02D8  0824               	movf	?___ftmul+1,w
  3015     02D9  00B6               	movwf	_scale$817+1
  3016     02DA  0825               	movf	?___ftmul+2,w
  3017     02DB  00B7               	movwf	_scale$817+2
  3018                           
  3019                           ;doprnt.c: 445: return _powers_[(unsigned char)(scl/100+18)] * _powers_[(unsigned char)(
      +                          (scl%100)/10+9)] * _powers_[(unsigned char)(scl%10)];
  3020     02DC  3003               	movlw	3
  3021     02DD  00A0               	movwf	___bmul@multiplicand
  3022     02DE  0838               	movf	scale@scl,w
  3023     02DF  00F2               	movwf	___awmod@dividend
  3024     02E0  01F3               	clrf	___awmod@dividend+1
  3025     02E1  1BF2               	btfsc	___awmod@dividend,7
  3026     02E2  03F3               	decf	___awmod@dividend+1,f
  3027     02E3  300A               	movlw	10
  3028     02E4  00F0               	movwf	___awmod@divisor
  3029     02E5  3000               	movlw	0
  3030     02E6  00F1               	movwf	___awmod@divisor+1
  3031     02E7  160A  118A  27B5  120A  118A  	fcall	___awmod
  3032     02EC  0870               	movf	?___awmod,w
  3033     02ED  160A  118A  2623  120A  118A  	fcall	___bmul
  3034     02F2  3E01               	addlw	low ((__powers_-__stringbase)| (0+32768))
  3035     02F3  0084               	movwf	4
  3036     02F4  120A  158A  200A  120A  118A  	fcall	stringdir
  3037     02F9  00A3               	movwf	___ftmul@f1
  3038     02FA  120A  158A  200A  120A  118A  	fcall	stringdir
  3039     02FF  00A4               	movwf	___ftmul@f1+1
  3040     0300  120A  158A  200A  120A  118A  	fcall	stringdir
  3041     0305  00A5               	movwf	___ftmul@f1+2
  3042     0306  0835               	movf	_scale$817,w
  3043     0307  00A6               	movwf	___ftmul@f2
  3044     0308  0836               	movf	_scale$817+1,w
  3045     0309  00A7               	movwf	___ftmul@f2+1
  3046     030A  0837               	movf	_scale$817+2,w
  3047     030B  00A8               	movwf	___ftmul@f2+2
  3048     030C  120A  158A  2399   	fcall	___ftmul
  3049     030F  0823               	movf	?___ftmul,w
  3050     0310  00B2               	movwf	?_scale
  3051     0311  0824               	movf	?___ftmul+1,w
  3052     0312  00B3               	movwf	?_scale+1
  3053     0313  0825               	movf	?___ftmul+2,w
  3054     0314  00B4               	movwf	?_scale+2
  3055     0315  0008               	return
  3056     0316                     l2201:
  3057                           
  3058                           ;doprnt.c: 446: else if(scl > 10)
  3059     0316  0838               	movf	scale@scl,w
  3060     0317  3A80               	xorlw	128
  3061     0318  3E75               	addlw	-139
  3062     0319  1C03               	skipc
  3063     031A  2B79               	goto	l2207
  3064                           
  3065                           ;doprnt.c: 447: return _powers_[(unsigned char)(scl/10+9)] * _powers_[(unsigned char)(sc
      +                          l%10)];
  3066     031B  3003               	movlw	3
  3067     031C  00A0               	movwf	___bmul@multiplicand
  3068     031D  0838               	movf	scale@scl,w
  3069     031E  00F2               	movwf	___awmod@dividend
  3070     031F  01F3               	clrf	___awmod@dividend+1
  3071     0320  1BF2               	btfsc	___awmod@dividend,7
  3072     0321  03F3               	decf	___awmod@dividend+1,f
  3073     0322  300A               	movlw	10
  3074     0323  00F0               	movwf	___awmod@divisor
  3075     0324  3000               	movlw	0
  3076     0325  00F1               	movwf	___awmod@divisor+1
  3077     0326  160A  118A  27B5  120A  118A  	fcall	___awmod
  3078     032B  0870               	movf	?___awmod,w
  3079     032C  160A  118A  2623  120A  118A  	fcall	___bmul
  3080     0331  3E01               	addlw	low ((__powers_-__stringbase)| (0+32768))
  3081     0332  0084               	movwf	4
  3082     0333  120A  158A  200A  120A  118A  	fcall	stringdir
  3083     0338  00A3               	movwf	___ftmul@f1
  3084     0339  120A  158A  200A  120A  118A  	fcall	stringdir
  3085     033E  00A4               	movwf	___ftmul@f1+1
  3086     033F  120A  158A  200A  120A  118A  	fcall	stringdir
  3087     0344  00A5               	movwf	___ftmul@f1+2
  3088     0345  3003               	movlw	3
  3089     0346  00A0               	movwf	___bmul@multiplicand
  3090     0347  0838               	movf	scale@scl,w
  3091     0348  00F8               	movwf	___awdiv@dividend
  3092     0349  01F9               	clrf	___awdiv@dividend+1
  3093     034A  1BF8               	btfsc	___awdiv@dividend,7
  3094     034B  03F9               	decf	___awdiv@dividend+1,f
  3095     034C  300A               	movlw	10
  3096     034D  00F6               	movwf	___awdiv@divisor
  3097     034E  3000               	movlw	0
  3098     034F  00F7               	movwf	___awdiv@divisor+1
  3099     0350  120A  158A  2103  120A  118A  	fcall	___awdiv
  3100     0355  0876               	movf	?___awdiv,w
  3101     0356  160A  118A  2623  120A  118A  	fcall	___bmul
  3102     035B  3E1C               	addlw	low (((__powers_-__stringbase)| (0+32768)+27))
  3103     035C  0084               	movwf	4
  3104     035D  120A  158A  200A  120A  118A  	fcall	stringdir
  3105     0362  00A6               	movwf	___ftmul@f2
  3106     0363  120A  158A  200A  120A  118A  	fcall	stringdir
  3107     0368  00A7               	movwf	___ftmul@f2+1
  3108     0369  120A  158A  200A  120A  118A  	fcall	stringdir
  3109     036E  00A8               	movwf	___ftmul@f2+2
  3110     036F  120A  158A  2399   	fcall	___ftmul
  3111     0372  0823               	movf	?___ftmul,w
  3112     0373  00B2               	movwf	?_scale
  3113     0374  0824               	movf	?___ftmul+1,w
  3114     0375  00B3               	movwf	?_scale+1
  3115     0376  0825               	movf	?___ftmul+2,w
  3116     0377  00B4               	movwf	?_scale+2
  3117     0378  0008               	return
  3118     0379                     l2207:
  3119                           
  3120                           ;doprnt.c: 448: return _powers_[(unsigned char)scl];
  3121     0379  3003               	movlw	3
  3122     037A  00A0               	movwf	___bmul@multiplicand
  3123     037B  0838               	movf	scale@scl,w
  3124     037C  160A  118A  2623  120A  118A  	fcall	___bmul
  3125     0381  3E01               	addlw	low ((__powers_-__stringbase)| (0+32768))
  3126     0382  0084               	movwf	4
  3127     0383  120A  158A  200A  120A  118A  	fcall	stringdir
  3128     0388  00B2               	movwf	?_scale
  3129     0389  120A  158A  200A  120A  118A  	fcall	stringdir
  3130     038E  00B3               	movwf	?_scale+1
  3131     038F  120A  158A  200A   	fcall	stringdir
  3132     0392  00B4               	movwf	?_scale+2
  3133     0393  0008               	return
  3134     0394                     __end_of_scale:
  3135                           
  3136                           	psect	text3
  3137     17B5                     __ptext3:	
  3138 ;; *************** function ___awmod *****************
  3139 ;; Defined at:
  3140 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c90\common\awmod.c"
  3141 ;; Parameters:    Size  Location     Type
  3142 ;;  divisor         2    0[COMMON] int 
  3143 ;;  dividend        2    2[COMMON] int 
  3144 ;; Auto vars:     Size  Location     Type
  3145 ;;  sign            1    5[COMMON] unsigned char 
  3146 ;;  counter         1    4[COMMON] unsigned char 
  3147 ;; Return value:  Size  Location     Type
  3148 ;;                  2    0[COMMON] int 
  3149 ;; Registers used:
  3150 ;;		wreg, status,2, status,0, btemp+1
  3151 ;; Tracked objects:
  3152 ;;		On entry : 300/0
  3153 ;;		On exit  : 300/0
  3154 ;;		Unchanged: 300/0
  3155 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3156 ;;      Params:         4       0       0       0       0
  3157 ;;      Locals:         2       0       0       0       0
  3158 ;;      Temps:          0       0       0       0       0
  3159 ;;      Totals:         6       0       0       0       0
  3160 ;;Total ram usage:        6 bytes
  3161 ;; Hardware stack levels used: 1
  3162 ;; This function calls:
  3163 ;;		Nothing
  3164 ;; This function is called by:
  3165 ;;		_scale
  3166 ;; This function uses a non-reentrant model
  3167 ;;
  3168                           
  3169     17B5                     ___awmod:	
  3170                           ;psect for function ___awmod
  3171                           
  3172                           
  3173                           ;incstack = 0
  3174                           ; Regs used in ___awmod: [wreg+status,2+status,0+btemp+1]
  3175     17B5  01F5               	clrf	___awmod@sign
  3176     17B6  1FF3               	btfss	___awmod@dividend+1,7
  3177     17B7  2FBF               	goto	l1917
  3178     17B8  09F2               	comf	___awmod@dividend,f
  3179     17B9  09F3               	comf	___awmod@dividend+1,f
  3180     17BA  0AF2               	incf	___awmod@dividend,f
  3181     17BB  1903               	skipnz
  3182     17BC  0AF3               	incf	___awmod@dividend+1,f
  3183     17BD  01F5               	clrf	___awmod@sign
  3184     17BE  0AF5               	incf	___awmod@sign,f
  3185     17BF                     l1917:
  3186     17BF  1FF1               	btfss	___awmod@divisor+1,7
  3187     17C0  2FC6               	goto	l1921
  3188     17C1  09F0               	comf	___awmod@divisor,f
  3189     17C2  09F1               	comf	___awmod@divisor+1,f
  3190     17C3  0AF0               	incf	___awmod@divisor,f
  3191     17C4  1903               	skipnz
  3192     17C5  0AF1               	incf	___awmod@divisor+1,f
  3193     17C6                     l1921:
  3194     17C6  0870               	movf	___awmod@divisor,w
  3195     17C7  0471               	iorwf	___awmod@divisor+1,w
  3196     17C8  1903               	btfsc	3,2
  3197     17C9  2FF3               	goto	l1939
  3198     17CA  01F4               	clrf	___awmod@counter
  3199     17CB  0AF4               	incf	___awmod@counter,f
  3200     17CC                     l1929:
  3201     17CC  1BF1               	btfsc	___awmod@divisor+1,7
  3202     17CD  2FDA               	goto	l1931
  3203     17CE  3001               	movlw	1
  3204     17CF                     u2285:
  3205     17CF  1003               	clrc
  3206     17D0  0DF0               	rlf	___awmod@divisor,f
  3207     17D1  0DF1               	rlf	___awmod@divisor+1,f
  3208     17D2  3EFF               	addlw	-1
  3209     17D3  1D03               	skipz
  3210     17D4  2FCF               	goto	u2285
  3211     17D5  3001               	movlw	1
  3212     17D6  00FF               	movwf	127
  3213     17D7  087F               	movf	127,w
  3214     17D8  07F4               	addwf	___awmod@counter,f
  3215     17D9  2FCC               	goto	l1929
  3216     17DA                     l1931:
  3217     17DA  0871               	movf	___awmod@divisor+1,w
  3218     17DB  0273               	subwf	___awmod@dividend+1,w
  3219     17DC  1D03               	skipz
  3220     17DD  2FE0               	goto	u2305
  3221     17DE  0870               	movf	___awmod@divisor,w
  3222     17DF  0272               	subwf	___awmod@dividend,w
  3223     17E0                     u2305:
  3224     17E0  1C03               	skipc
  3225     17E1  2FE8               	goto	l1935
  3226     17E2  0870               	movf	___awmod@divisor,w
  3227     17E3  02F2               	subwf	___awmod@dividend,f
  3228     17E4  0871               	movf	___awmod@divisor+1,w
  3229     17E5  1C03               	skipc
  3230     17E6  03F3               	decf	___awmod@dividend+1,f
  3231     17E7  02F3               	subwf	___awmod@dividend+1,f
  3232     17E8                     l1935:
  3233     17E8  3001               	movlw	1
  3234     17E9                     u2315:
  3235     17E9  1003               	clrc
  3236     17EA  0CF1               	rrf	___awmod@divisor+1,f
  3237     17EB  0CF0               	rrf	___awmod@divisor,f
  3238     17EC  3EFF               	addlw	-1
  3239     17ED  1D03               	skipz
  3240     17EE  2FE9               	goto	u2315
  3241     17EF  3001               	movlw	1
  3242     17F0  02F4               	subwf	___awmod@counter,f
  3243     17F1  1D03               	btfss	3,2
  3244     17F2  2FDA               	goto	l1931
  3245     17F3                     l1939:
  3246     17F3  0875               	movf	___awmod@sign,w
  3247     17F4  1903               	btfsc	3,2
  3248     17F5  2FFB               	goto	l1943
  3249     17F6  09F2               	comf	___awmod@dividend,f
  3250     17F7  09F3               	comf	___awmod@dividend+1,f
  3251     17F8  0AF2               	incf	___awmod@dividend,f
  3252     17F9  1903               	skipnz
  3253     17FA  0AF3               	incf	___awmod@dividend+1,f
  3254     17FB                     l1943:
  3255     17FB  0873               	movf	___awmod@dividend+1,w
  3256     17FC  00F1               	movwf	?___awmod+1
  3257     17FD  0872               	movf	___awmod@dividend,w
  3258     17FE  00F0               	movwf	?___awmod
  3259     17FF  0008               	return
  3260     1800                     __end_of___awmod:
  3261                           
  3262                           	psect	text4
  3263     0903                     __ptext4:	
  3264 ;; *************** function ___awdiv *****************
  3265 ;; Defined at:
  3266 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c90\common\awdiv.c"
  3267 ;; Parameters:    Size  Location     Type
  3268 ;;  divisor         2    6[COMMON] int 
  3269 ;;  dividend        2    8[COMMON] int 
  3270 ;; Auto vars:     Size  Location     Type
  3271 ;;  quotient        2   12[COMMON] int 
  3272 ;;  sign            1   11[COMMON] unsigned char 
  3273 ;;  counter         1   10[COMMON] unsigned char 
  3274 ;; Return value:  Size  Location     Type
  3275 ;;                  2    6[COMMON] int 
  3276 ;; Registers used:
  3277 ;;		wreg, status,2, status,0, btemp+1
  3278 ;; Tracked objects:
  3279 ;;		On entry : 300/0
  3280 ;;		On exit  : 300/0
  3281 ;;		Unchanged: 300/0
  3282 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3283 ;;      Params:         4       0       0       0       0
  3284 ;;      Locals:         4       0       0       0       0
  3285 ;;      Temps:          0       0       0       0       0
  3286 ;;      Totals:         8       0       0       0       0
  3287 ;;Total ram usage:        8 bytes
  3288 ;; Hardware stack levels used: 1
  3289 ;; This function calls:
  3290 ;;		Nothing
  3291 ;; This function is called by:
  3292 ;;		_scale
  3293 ;;		_sprintf
  3294 ;; This function uses a non-reentrant model
  3295 ;;
  3296                           
  3297     0903                     ___awdiv:	
  3298                           ;psect for function ___awdiv
  3299                           
  3300                           
  3301                           ;incstack = 0
  3302                           ; Regs used in ___awdiv: [wreg+status,2+status,0+btemp+1]
  3303     0903  01FB               	clrf	___awdiv@sign
  3304     0904  1FF7               	btfss	___awdiv@divisor+1,7
  3305     0905  290D               	goto	l1873
  3306     0906  09F6               	comf	___awdiv@divisor,f
  3307     0907  09F7               	comf	___awdiv@divisor+1,f
  3308     0908  0AF6               	incf	___awdiv@divisor,f
  3309     0909  1903               	skipnz
  3310     090A  0AF7               	incf	___awdiv@divisor+1,f
  3311     090B  01FB               	clrf	___awdiv@sign
  3312     090C  0AFB               	incf	___awdiv@sign,f
  3313     090D                     l1873:
  3314     090D  1FF9               	btfss	___awdiv@dividend+1,7
  3315     090E  2918               	goto	l1879
  3316     090F  09F8               	comf	___awdiv@dividend,f
  3317     0910  09F9               	comf	___awdiv@dividend+1,f
  3318     0911  0AF8               	incf	___awdiv@dividend,f
  3319     0912  1903               	skipnz
  3320     0913  0AF9               	incf	___awdiv@dividend+1,f
  3321     0914  3001               	movlw	1
  3322     0915  00FF               	movwf	127
  3323     0916  087F               	movf	127,w
  3324     0917  06FB               	xorwf	___awdiv@sign,f
  3325     0918                     l1879:
  3326     0918  01FC               	clrf	___awdiv@quotient
  3327     0919  01FD               	clrf	___awdiv@quotient+1
  3328     091A  0876               	movf	___awdiv@divisor,w
  3329     091B  0477               	iorwf	___awdiv@divisor+1,w
  3330     091C  1903               	btfsc	3,2
  3331     091D  294F               	goto	l1901
  3332     091E  01FA               	clrf	___awdiv@counter
  3333     091F  0AFA               	incf	___awdiv@counter,f
  3334     0920                     l1889:
  3335     0920  1BF7               	btfsc	___awdiv@divisor+1,7
  3336     0921  292E               	goto	l1891
  3337     0922  3001               	movlw	1
  3338     0923                     u2185:
  3339     0923  1003               	clrc
  3340     0924  0DF6               	rlf	___awdiv@divisor,f
  3341     0925  0DF7               	rlf	___awdiv@divisor+1,f
  3342     0926  3EFF               	addlw	-1
  3343     0927  1D03               	skipz
  3344     0928  2923               	goto	u2185
  3345     0929  3001               	movlw	1
  3346     092A  00FF               	movwf	127
  3347     092B  087F               	movf	127,w
  3348     092C  07FA               	addwf	___awdiv@counter,f
  3349     092D  2920               	goto	l1889
  3350     092E                     l1891:
  3351     092E  3001               	movlw	1
  3352     092F                     u2205:
  3353     092F  1003               	clrc
  3354     0930  0DFC               	rlf	___awdiv@quotient,f
  3355     0931  0DFD               	rlf	___awdiv@quotient+1,f
  3356     0932  3EFF               	addlw	-1
  3357     0933  1D03               	skipz
  3358     0934  292F               	goto	u2205
  3359     0935  0877               	movf	___awdiv@divisor+1,w
  3360     0936  0279               	subwf	___awdiv@dividend+1,w
  3361     0937  1D03               	skipz
  3362     0938  293B               	goto	u2215
  3363     0939  0876               	movf	___awdiv@divisor,w
  3364     093A  0278               	subwf	___awdiv@dividend,w
  3365     093B                     u2215:
  3366     093B  1C03               	skipc
  3367     093C  2944               	goto	l1897
  3368     093D  0876               	movf	___awdiv@divisor,w
  3369     093E  02F8               	subwf	___awdiv@dividend,f
  3370     093F  0877               	movf	___awdiv@divisor+1,w
  3371     0940  1C03               	skipc
  3372     0941  03F9               	decf	___awdiv@dividend+1,f
  3373     0942  02F9               	subwf	___awdiv@dividend+1,f
  3374     0943  147C               	bsf	___awdiv@quotient,0
  3375     0944                     l1897:
  3376     0944  3001               	movlw	1
  3377     0945                     u2225:
  3378     0945  1003               	clrc
  3379     0946  0CF7               	rrf	___awdiv@divisor+1,f
  3380     0947  0CF6               	rrf	___awdiv@divisor,f
  3381     0948  3EFF               	addlw	-1
  3382     0949  1D03               	skipz
  3383     094A  2945               	goto	u2225
  3384     094B  3001               	movlw	1
  3385     094C  02FA               	subwf	___awdiv@counter,f
  3386     094D  1D03               	btfss	3,2
  3387     094E  292E               	goto	l1891
  3388     094F                     l1901:
  3389     094F  087B               	movf	___awdiv@sign,w
  3390     0950  1903               	btfsc	3,2
  3391     0951  2957               	goto	l1905
  3392     0952  09FC               	comf	___awdiv@quotient,f
  3393     0953  09FD               	comf	___awdiv@quotient+1,f
  3394     0954  0AFC               	incf	___awdiv@quotient,f
  3395     0955  1903               	skipnz
  3396     0956  0AFD               	incf	___awdiv@quotient+1,f
  3397     0957                     l1905:
  3398     0957  087D               	movf	___awdiv@quotient+1,w
  3399     0958  00F7               	movwf	?___awdiv+1
  3400     0959  087C               	movf	___awdiv@quotient,w
  3401     095A  00F6               	movwf	?___awdiv
  3402     095B  0008               	return
  3403     095C                     __end_of___awdiv:
  3404                           
  3405                           	psect	text5
  3406     1615                     __ptext5:	
  3407 ;; *************** function _isdigit *****************
  3408 ;; Defined at:
  3409 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c90\common\isdigit.c"
  3410 ;; Parameters:    Size  Location     Type
  3411 ;;  c               1    wreg     unsigned char 
  3412 ;; Auto vars:     Size  Location     Type
  3413 ;;  c               1    1[COMMON] unsigned char 
  3414 ;; Return value:  Size  Location     Type
  3415 ;;		None               void
  3416 ;; Registers used:
  3417 ;;		wreg, status,2, status,0
  3418 ;; Tracked objects:
  3419 ;;		On entry : 300/0
  3420 ;;		On exit  : 300/0
  3421 ;;		Unchanged: 300/0
  3422 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3423 ;;      Params:         0       0       0       0       0
  3424 ;;      Locals:         2       0       0       0       0
  3425 ;;      Temps:          0       0       0       0       0
  3426 ;;      Totals:         2       0       0       0       0
  3427 ;;Total ram usage:        2 bytes
  3428 ;; Hardware stack levels used: 1
  3429 ;; This function calls:
  3430 ;;		Nothing
  3431 ;; This function is called by:
  3432 ;;		_sprintf
  3433 ;; This function uses a non-reentrant model
  3434 ;;
  3435                           
  3436     1615                     _isdigit:	
  3437                           ;psect for function _isdigit
  3438                           
  3439                           
  3440                           ;incstack = 0
  3441                           ; Regs used in _isdigit: [wreg+status,2+status,0]
  3442                           ;isdigit@c stored from wreg
  3443     1615  00F1               	movwf	isdigit@c
  3444     1616  01F0               	clrf	_isdigit$619
  3445     1617  303A               	movlw	58
  3446     1618  0271               	subwf	isdigit@c,w
  3447     1619  1803               	skipnc
  3448     161A  2E21               	goto	l2219
  3449     161B  3030               	movlw	48
  3450     161C  0271               	subwf	isdigit@c,w
  3451     161D  1C03               	skipc
  3452     161E  2E21               	goto	l2219
  3453     161F  01F0               	clrf	_isdigit$619
  3454     1620  0AF0               	incf	_isdigit$619,f
  3455     1621                     l2219:
  3456     1621  0C70               	rrf	_isdigit$619,w
  3457     1622  0008               	return
  3458     1623                     __end_of_isdigit:
  3459                           
  3460                           	psect	text6
  3461     0D3B                     __ptext6:	
  3462 ;; *************** function _fround *****************
  3463 ;; Defined at:
  3464 ;;		line 417 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c90\common\doprnt.c"
  3465 ;; Parameters:    Size  Location     Type
  3466 ;;  prec            1    wreg     unsigned char 
  3467 ;; Auto vars:     Size  Location     Type
  3468 ;;  prec            1   27[BANK0 ] unsigned char 
  3469 ;; Return value:  Size  Location     Type
  3470 ;;                  3   18[BANK0 ] unsigned char 
  3471 ;; Registers used:
  3472 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3473 ;; Tracked objects:
  3474 ;;		On entry : 300/0
  3475 ;;		On exit  : 300/0
  3476 ;;		Unchanged: 0/0
  3477 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3478 ;;      Params:         0       3       0       0       0
  3479 ;;      Locals:         0       7       0       0       0
  3480 ;;      Temps:          0       0       0       0       0
  3481 ;;      Totals:         0      10       0       0       0
  3482 ;;Total ram usage:       10 bytes
  3483 ;; Hardware stack levels used: 1
  3484 ;; Hardware stack levels required when called: 2
  3485 ;; This function calls:
  3486 ;;		___bmul
  3487 ;;		___ftmul
  3488 ;;		___lbdiv
  3489 ;;		___lbmod
  3490 ;; This function is called by:
  3491 ;;		_sprintf
  3492 ;; This function uses a non-reentrant model
  3493 ;;
  3494                           
  3495     0D3B                     _fround:	
  3496                           ;psect for function _fround
  3497                           
  3498                           
  3499                           ;incstack = 0
  3500                           ; Regs used in _fround: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3501                           ;fround@prec stored from wreg
  3502     0D3B  00BB               	movwf	fround@prec
  3503                           
  3504                           ;doprnt.c: 421: if(prec>=110)
  3505     0D3C  306E               	movlw	110
  3506     0D3D  023B               	subwf	fround@prec,w
  3507     0D3E  1C03               	skipc
  3508     0D3F  2DE2               	goto	l2159
  3509                           
  3510                           ;doprnt.c: 422: return 0.5 * _npowers_[prec/100U+18U] * _npowers_[(prec%100U)/10U+9U] * 
      +                          _npowers_[prec%10U];
  3511     0D40  3003               	movlw	3
  3512     0D41  00A0               	movwf	___bmul@multiplicand
  3513     0D42  300A               	movlw	10
  3514     0D43  00F6               	movwf	___lbdiv@divisor
  3515     0D44  3064               	movlw	100
  3516     0D45  00F0               	movwf	___lbmod@divisor
  3517     0D46  083B               	movf	fround@prec,w
  3518     0D47  160A  118A  267F  120A  158A  	fcall	___lbmod
  3519     0D4C  160A  118A  26BF  120A  158A  	fcall	___lbdiv
  3520     0D51  160A  118A  2623  120A  158A  	fcall	___bmul
  3521     0D56  3E43               	addlw	low (((__npowers_-__stringbase)| (0+32768)+27))
  3522     0D57  0084               	movwf	4
  3523     0D58  120A  158A  200A  120A  158A  	fcall	stringdir
  3524     0D5D  00A3               	movwf	___ftmul@f1
  3525     0D5E  120A  158A  200A  120A  158A  	fcall	stringdir
  3526     0D63  00A4               	movwf	___ftmul@f1+1
  3527     0D64  120A  158A  200A  120A  158A  	fcall	stringdir
  3528     0D69  00A5               	movwf	___ftmul@f1+2
  3529     0D6A  3003               	movlw	3
  3530     0D6B  00A0               	movwf	___bmul@multiplicand
  3531     0D6C  3064               	movlw	100
  3532     0D6D  00F6               	movwf	___lbdiv@divisor
  3533     0D6E  083B               	movf	fround@prec,w
  3534     0D6F  160A  118A  26BF  120A  158A  	fcall	___lbdiv
  3535     0D74  160A  118A  2623  120A  158A  	fcall	___bmul
  3536     0D79  3E5E               	addlw	low (((__npowers_-__stringbase)| (0+32768)+54))
  3537     0D7A  0084               	movwf	4
  3538     0D7B  120A  158A  200A  120A  158A  	fcall	stringdir
  3539     0D80  00A6               	movwf	___ftmul@f2
  3540     0D81  120A  158A  200A  120A  158A  	fcall	stringdir
  3541     0D86  00A7               	movwf	___ftmul@f2+1
  3542     0D87  120A  158A  200A  120A  158A  	fcall	stringdir
  3543     0D8C  00A8               	movwf	___ftmul@f2+2
  3544     0D8D  120A  158A  2399  120A  158A  	fcall	___ftmul
  3545     0D92  0823               	movf	?___ftmul,w
  3546     0D93  00B8               	movwf	_fround$815
  3547     0D94  0824               	movf	?___ftmul+1,w
  3548     0D95  00B9               	movwf	_fround$815+1
  3549     0D96  0825               	movf	?___ftmul+2,w
  3550     0D97  00BA               	movwf	_fround$815+2
  3551                           
  3552                           ;doprnt.c: 422: return 0.5 * _npowers_[prec/100U+18U] * _npowers_[(prec%100U)/10U+9U] * 
      +                          _npowers_[prec%10U];
  3553     0D98  3003               	movlw	3
  3554     0D99  00A0               	movwf	___bmul@multiplicand
  3555     0D9A  300A               	movlw	10
  3556     0D9B  00F0               	movwf	___lbmod@divisor
  3557     0D9C  083B               	movf	fround@prec,w
  3558     0D9D  160A  118A  267F  120A  158A  	fcall	___lbmod
  3559     0DA2  160A  118A  2623  120A  158A  	fcall	___bmul
  3560     0DA7  3E28               	addlw	low ((__npowers_-__stringbase)| (0+32768))
  3561     0DA8  0084               	movwf	4
  3562     0DA9  120A  158A  200A  120A  158A  	fcall	stringdir
  3563     0DAE  00A3               	movwf	___ftmul@f1
  3564     0DAF  120A  158A  200A  120A  158A  	fcall	stringdir
  3565     0DB4  00A4               	movwf	___ftmul@f1+1
  3566     0DB5  120A  158A  200A  120A  158A  	fcall	stringdir
  3567     0DBA  00A5               	movwf	___ftmul@f1+2
  3568     0DBB  0838               	movf	_fround$815,w
  3569     0DBC  00A6               	movwf	___ftmul@f2
  3570     0DBD  0839               	movf	_fround$815+1,w
  3571     0DBE  00A7               	movwf	___ftmul@f2+1
  3572     0DBF  083A               	movf	_fround$815+2,w
  3573     0DC0  00A8               	movwf	___ftmul@f2+2
  3574     0DC1  120A  158A  2399  120A  158A  	fcall	___ftmul
  3575     0DC6  0823               	movf	?___ftmul,w
  3576     0DC7  00B5               	movwf	_fround$816
  3577     0DC8  0824               	movf	?___ftmul+1,w
  3578     0DC9  00B6               	movwf	_fround$816+1
  3579     0DCA  0825               	movf	?___ftmul+2,w
  3580     0DCB  00B7               	movwf	_fround$816+2
  3581                           
  3582                           ;doprnt.c: 422: return 0.5 * _npowers_[prec/100U+18U] * _npowers_[(prec%100U)/10U+9U] * 
      +                          _npowers_[prec%10U];
  3583     0DCC  3000               	movlw	0
  3584     0DCD  00A3               	movwf	___ftmul@f1
  3585     0DCE  3000               	movlw	0
  3586     0DCF  00A4               	movwf	___ftmul@f1+1
  3587     0DD0  303F               	movlw	63
  3588     0DD1  00A5               	movwf	___ftmul@f1+2
  3589     0DD2  0835               	movf	_fround$816,w
  3590     0DD3  00A6               	movwf	___ftmul@f2
  3591     0DD4  0836               	movf	_fround$816+1,w
  3592     0DD5  00A7               	movwf	___ftmul@f2+1
  3593     0DD6  0837               	movf	_fround$816+2,w
  3594     0DD7  00A8               	movwf	___ftmul@f2+2
  3595     0DD8  120A  158A  2399   	fcall	___ftmul
  3596     0DDB  0823               	movf	?___ftmul,w
  3597     0DDC  00B2               	movwf	?_fround
  3598     0DDD  0824               	movf	?___ftmul+1,w
  3599     0DDE  00B3               	movwf	?_fround+1
  3600     0DDF  0825               	movf	?___ftmul+2,w
  3601     0DE0  00B4               	movwf	?_fround+2
  3602     0DE1  0008               	return
  3603     0DE2                     l2159:
  3604                           
  3605                           ;doprnt.c: 423: else if(prec > 10)
  3606     0DE2  300B               	movlw	11
  3607     0DE3  023B               	subwf	fround@prec,w
  3608     0DE4  1C03               	skipc
  3609     0DE5  2E4D               	goto	l2167
  3610                           
  3611                           ;doprnt.c: 424: return 0.5 * _npowers_[prec/10U+9U] * _npowers_[prec%10U];
  3612     0DE6  3003               	movlw	3
  3613     0DE7  00A0               	movwf	___bmul@multiplicand
  3614     0DE8  300A               	movlw	10
  3615     0DE9  00F0               	movwf	___lbmod@divisor
  3616     0DEA  083B               	movf	fround@prec,w
  3617     0DEB  160A  118A  267F  120A  158A  	fcall	___lbmod
  3618     0DF0  160A  118A  2623  120A  158A  	fcall	___bmul
  3619     0DF5  3E28               	addlw	low ((__npowers_-__stringbase)| (0+32768))
  3620     0DF6  0084               	movwf	4
  3621     0DF7  120A  158A  200A  120A  158A  	fcall	stringdir
  3622     0DFC  00A3               	movwf	___ftmul@f1
  3623     0DFD  120A  158A  200A  120A  158A  	fcall	stringdir
  3624     0E02  00A4               	movwf	___ftmul@f1+1
  3625     0E03  120A  158A  200A  120A  158A  	fcall	stringdir
  3626     0E08  00A5               	movwf	___ftmul@f1+2
  3627     0E09  3003               	movlw	3
  3628     0E0A  00A0               	movwf	___bmul@multiplicand
  3629     0E0B  300A               	movlw	10
  3630     0E0C  00F6               	movwf	___lbdiv@divisor
  3631     0E0D  083B               	movf	fround@prec,w
  3632     0E0E  160A  118A  26BF  120A  158A  	fcall	___lbdiv
  3633     0E13  160A  118A  2623  120A  158A  	fcall	___bmul
  3634     0E18  3E43               	addlw	low (((__npowers_-__stringbase)| (0+32768)+27))
  3635     0E19  0084               	movwf	4
  3636     0E1A  120A  158A  200A  120A  158A  	fcall	stringdir
  3637     0E1F  00A6               	movwf	___ftmul@f2
  3638     0E20  120A  158A  200A  120A  158A  	fcall	stringdir
  3639     0E25  00A7               	movwf	___ftmul@f2+1
  3640     0E26  120A  158A  200A  120A  158A  	fcall	stringdir
  3641     0E2B  00A8               	movwf	___ftmul@f2+2
  3642     0E2C  120A  158A  2399  120A  158A  	fcall	___ftmul
  3643     0E31  0823               	movf	?___ftmul,w
  3644     0E32  00B8               	movwf	_fround$815
  3645     0E33  0824               	movf	?___ftmul+1,w
  3646     0E34  00B9               	movwf	_fround$815+1
  3647     0E35  0825               	movf	?___ftmul+2,w
  3648     0E36  00BA               	movwf	_fround$815+2
  3649                           
  3650                           ;doprnt.c: 424: return 0.5 * _npowers_[prec/10U+9U] * _npowers_[prec%10U];
  3651     0E37  3000               	movlw	0
  3652     0E38  00A3               	movwf	___ftmul@f1
  3653     0E39  3000               	movlw	0
  3654     0E3A  00A4               	movwf	___ftmul@f1+1
  3655     0E3B  303F               	movlw	63
  3656     0E3C  00A5               	movwf	___ftmul@f1+2
  3657     0E3D  0838               	movf	_fround$815,w
  3658     0E3E  00A6               	movwf	___ftmul@f2
  3659     0E3F  0839               	movf	_fround$815+1,w
  3660     0E40  00A7               	movwf	___ftmul@f2+1
  3661     0E41  083A               	movf	_fround$815+2,w
  3662     0E42  00A8               	movwf	___ftmul@f2+2
  3663     0E43  120A  158A  2399   	fcall	___ftmul
  3664     0E46  0823               	movf	?___ftmul,w
  3665     0E47  00B2               	movwf	?_fround
  3666     0E48  0824               	movf	?___ftmul+1,w
  3667     0E49  00B3               	movwf	?_fround+1
  3668     0E4A  0825               	movf	?___ftmul+2,w
  3669     0E4B  00B4               	movwf	?_fround+2
  3670     0E4C  0008               	return
  3671     0E4D                     l2167:
  3672                           
  3673                           ;doprnt.c: 425: return 0.5 * _npowers_[prec];
  3674     0E4D  3000               	movlw	0
  3675     0E4E  00A3               	movwf	___ftmul@f1
  3676     0E4F  3000               	movlw	0
  3677     0E50  00A4               	movwf	___ftmul@f1+1
  3678     0E51  303F               	movlw	63
  3679     0E52  00A5               	movwf	___ftmul@f1+2
  3680     0E53  3003               	movlw	3
  3681     0E54  00A0               	movwf	___bmul@multiplicand
  3682     0E55  083B               	movf	fround@prec,w
  3683     0E56  160A  118A  2623  120A  158A  	fcall	___bmul
  3684     0E5B  3E28               	addlw	low ((__npowers_-__stringbase)| (0+32768))
  3685     0E5C  0084               	movwf	4
  3686     0E5D  120A  158A  200A  120A  158A  	fcall	stringdir
  3687     0E62  00A6               	movwf	___ftmul@f2
  3688     0E63  120A  158A  200A  120A  158A  	fcall	stringdir
  3689     0E68  00A7               	movwf	___ftmul@f2+1
  3690     0E69  120A  158A  200A  120A  158A  	fcall	stringdir
  3691     0E6E  00A8               	movwf	___ftmul@f2+2
  3692     0E6F  120A  158A  2399   	fcall	___ftmul
  3693     0E72  0823               	movf	?___ftmul,w
  3694     0E73  00B2               	movwf	?_fround
  3695     0E74  0824               	movf	?___ftmul+1,w
  3696     0E75  00B3               	movwf	?_fround+1
  3697     0E76  0825               	movf	?___ftmul+2,w
  3698     0E77  00B4               	movwf	?_fround+2
  3699     0E78  0008               	return
  3700     0E79                     __end_of_fround:
  3701                           
  3702                           	psect	text7
  3703     167F                     __ptext7:	
  3704 ;; *************** function ___lbmod *****************
  3705 ;; Defined at:
  3706 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c90\common\lbmod.c"
  3707 ;; Parameters:    Size  Location     Type
  3708 ;;  dividend        1    wreg     unsigned char 
  3709 ;;  divisor         1    0[COMMON] unsigned char 
  3710 ;; Auto vars:     Size  Location     Type
  3711 ;;  dividend        1    3[COMMON] unsigned char 
  3712 ;;  rem             1    5[COMMON] unsigned char 
  3713 ;;  counter         1    4[COMMON] unsigned char 
  3714 ;; Return value:  Size  Location     Type
  3715 ;;                  1    wreg      unsigned char 
  3716 ;; Registers used:
  3717 ;;		wreg, status,2, status,0
  3718 ;; Tracked objects:
  3719 ;;		On entry : 300/0
  3720 ;;		On exit  : 300/0
  3721 ;;		Unchanged: 300/0
  3722 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3723 ;;      Params:         1       0       0       0       0
  3724 ;;      Locals:         3       0       0       0       0
  3725 ;;      Temps:          2       0       0       0       0
  3726 ;;      Totals:         6       0       0       0       0
  3727 ;;Total ram usage:        6 bytes
  3728 ;; Hardware stack levels used: 1
  3729 ;; This function calls:
  3730 ;;		Nothing
  3731 ;; This function is called by:
  3732 ;;		_fround
  3733 ;; This function uses a non-reentrant model
  3734 ;;
  3735                           
  3736     167F                     ___lbmod:	
  3737                           ;psect for function ___lbmod
  3738                           
  3739                           
  3740                           ;incstack = 0
  3741                           ; Regs used in ___lbmod: [wreg+status,2+status,0]
  3742                           ;___lbmod@dividend stored from wreg
  3743     167F  00F3               	movwf	___lbmod@dividend
  3744     1680  3008               	movlw	8
  3745     1681  00F4               	movwf	___lbmod@counter
  3746     1682  01F5               	clrf	___lbmod@rem
  3747     1683                     l2107:
  3748     1683  0873               	movf	___lbmod@dividend,w
  3749     1684  00F1               	movwf	??___lbmod
  3750     1685  3007               	movlw	7
  3751     1686                     u2745:
  3752     1686  1003               	clrc
  3753     1687  0CF1               	rrf	??___lbmod,f
  3754     1688  3EFF               	addlw	-1
  3755     1689  1D03               	skipz
  3756     168A  2E86               	goto	u2745
  3757     168B  0875               	movf	___lbmod@rem,w
  3758     168C  00F2               	movwf	??___lbmod+1
  3759     168D  0772               	addwf	??___lbmod+1,w
  3760     168E  0471               	iorwf	??___lbmod,w
  3761     168F  00F5               	movwf	___lbmod@rem
  3762     1690  1003               	clrc
  3763     1691  0DF3               	rlf	___lbmod@dividend,f
  3764     1692  0870               	movf	___lbmod@divisor,w
  3765     1693  0275               	subwf	___lbmod@rem,w
  3766     1694  1C03               	skipc
  3767     1695  2E98               	goto	l631
  3768     1696  0870               	movf	___lbmod@divisor,w
  3769     1697  02F5               	subwf	___lbmod@rem,f
  3770     1698                     l631:
  3771     1698  3001               	movlw	1
  3772     1699  02F4               	subwf	___lbmod@counter,f
  3773     169A  1D03               	btfss	3,2
  3774     169B  2E83               	goto	l2107
  3775     169C  0875               	movf	___lbmod@rem,w
  3776     169D  0008               	return
  3777     169E                     __end_of___lbmod:
  3778                           
  3779                           	psect	text8
  3780     16BF                     __ptext8:	
  3781 ;; *************** function ___lbdiv *****************
  3782 ;; Defined at:
  3783 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c90\common\lbdiv.c"
  3784 ;; Parameters:    Size  Location     Type
  3785 ;;  dividend        1    wreg     unsigned char 
  3786 ;;  divisor         1    6[COMMON] unsigned char 
  3787 ;; Auto vars:     Size  Location     Type
  3788 ;;  dividend        1    7[COMMON] unsigned char 
  3789 ;;  quotient        1    9[COMMON] unsigned char 
  3790 ;;  counter         1    8[COMMON] unsigned char 
  3791 ;; Return value:  Size  Location     Type
  3792 ;;                  1    wreg      unsigned char 
  3793 ;; Registers used:
  3794 ;;		wreg, status,2, status,0, btemp+1
  3795 ;; Tracked objects:
  3796 ;;		On entry : 300/0
  3797 ;;		On exit  : 300/0
  3798 ;;		Unchanged: 300/0
  3799 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3800 ;;      Params:         1       0       0       0       0
  3801 ;;      Locals:         3       0       0       0       0
  3802 ;;      Temps:          0       0       0       0       0
  3803 ;;      Totals:         4       0       0       0       0
  3804 ;;Total ram usage:        4 bytes
  3805 ;; Hardware stack levels used: 1
  3806 ;; This function calls:
  3807 ;;		Nothing
  3808 ;; This function is called by:
  3809 ;;		_fround
  3810 ;; This function uses a non-reentrant model
  3811 ;;
  3812                           
  3813     16BF                     ___lbdiv:	
  3814                           ;psect for function ___lbdiv
  3815                           
  3816                           
  3817                           ;incstack = 0
  3818                           ; Regs used in ___lbdiv: [wreg+status,2+status,0+btemp+1]
  3819                           ;___lbdiv@dividend stored from wreg
  3820     16BF  00F7               	movwf	___lbdiv@dividend
  3821     16C0  01F9               	clrf	___lbdiv@quotient
  3822     16C1  0876               	movf	___lbdiv@divisor,w
  3823     16C2  1903               	btfsc	3,2
  3824     16C3  2EDE               	goto	l2099
  3825     16C4  01F8               	clrf	___lbdiv@counter
  3826     16C5  0AF8               	incf	___lbdiv@counter,f
  3827     16C6                     l2087:
  3828     16C6  1BF6               	btfsc	___lbdiv@divisor,7
  3829     16C7  2ECF               	goto	l2089
  3830     16C8  1003               	clrc
  3831     16C9  0DF6               	rlf	___lbdiv@divisor,f
  3832     16CA  3001               	movlw	1
  3833     16CB  00FF               	movwf	127
  3834     16CC  087F               	movf	127,w
  3835     16CD  07F8               	addwf	___lbdiv@counter,f
  3836     16CE  2EC6               	goto	l2087
  3837     16CF                     l2089:
  3838     16CF  1003               	clrc
  3839     16D0  0DF9               	rlf	___lbdiv@quotient,f
  3840     16D1  0876               	movf	___lbdiv@divisor,w
  3841     16D2  0277               	subwf	___lbdiv@dividend,w
  3842     16D3  1C03               	skipc
  3843     16D4  2ED9               	goto	L7
  3844     16D5  0876               	movf	___lbdiv@divisor,w
  3845     16D6  02F7               	subwf	___lbdiv@dividend,f
  3846     16D7  1479               	bsf	___lbdiv@quotient,0
  3847     16D8  1003               	clrc
  3848     16D9                     L7:
  3849     16D9  0CF6               	rrf	___lbdiv@divisor,f
  3850     16DA  3001               	movlw	1
  3851     16DB  02F8               	subwf	___lbdiv@counter,f
  3852     16DC  1D03               	btfss	3,2
  3853     16DD  2ECF               	goto	l2089
  3854     16DE                     l2099:
  3855     16DE  0879               	movf	___lbdiv@quotient,w
  3856     16DF  0008               	return
  3857     16E0                     __end_of___lbdiv:
  3858                           
  3859                           	psect	text9
  3860     0B99                     __ptext9:	
  3861 ;; *************** function ___ftmul *****************
  3862 ;; Defined at:
  3863 ;;		line 62 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c90\common\ftmul.c"
  3864 ;; Parameters:    Size  Location     Type
  3865 ;;  f1              3    3[BANK0 ] float 
  3866 ;;  f2              3    6[BANK0 ] float 
  3867 ;; Auto vars:     Size  Location     Type
  3868 ;;  f3_as_produc    3   13[BANK0 ] unsigned um
  3869 ;;  sign            1   17[BANK0 ] unsigned char 
  3870 ;;  cntr            1   16[BANK0 ] unsigned char 
  3871 ;;  exp             1   12[BANK0 ] unsigned char 
  3872 ;; Return value:  Size  Location     Type
  3873 ;;                  3    3[BANK0 ] float 
  3874 ;; Registers used:
  3875 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  3876 ;; Tracked objects:
  3877 ;;		On entry : 300/0
  3878 ;;		On exit  : 300/0
  3879 ;;		Unchanged: 0/0
  3880 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3881 ;;      Params:         0       6       0       0       0
  3882 ;;      Locals:         0       6       0       0       0
  3883 ;;      Temps:          0       3       0       0       0
  3884 ;;      Totals:         0      15       0       0       0
  3885 ;;Total ram usage:       15 bytes
  3886 ;; Hardware stack levels used: 1
  3887 ;; Hardware stack levels required when called: 1
  3888 ;; This function calls:
  3889 ;;		___ftpack
  3890 ;; This function is called by:
  3891 ;;		_main
  3892 ;;		_fround
  3893 ;;		_scale
  3894 ;;		_sprintf
  3895 ;; This function uses a non-reentrant model
  3896 ;;
  3897                           
  3898     0B99                     ___ftmul:	
  3899                           ;psect for function ___ftmul
  3900                           
  3901                           
  3902                           ;incstack = 0
  3903                           ; Regs used in ___ftmul: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  3904     0B99  0823               	movf	___ftmul@f1,w
  3905     0B9A  00A9               	movwf	??___ftmul
  3906     0B9B  0824               	movf	___ftmul@f1+1,w
  3907     0B9C  00AA               	movwf	??___ftmul+1
  3908     0B9D  0825               	movf	___ftmul@f1+2,w
  3909     0B9E  00AB               	movwf	??___ftmul+2
  3910     0B9F  1003               	clrc
  3911     0BA0  0D2A               	rlf	??___ftmul+1,w
  3912     0BA1  0D2B               	rlf	??___ftmul+2,w
  3913     0BA2  00AC               	movwf	___ftmul@exp
  3914     0BA3  082C               	movf	___ftmul@exp,w
  3915     0BA4  1D03               	btfss	3,2
  3916     0BA5  2BAD               	goto	l2027
  3917     0BA6  3000               	movlw	0
  3918     0BA7  00A3               	movwf	?___ftmul
  3919     0BA8  3000               	movlw	0
  3920     0BA9  00A4               	movwf	?___ftmul+1
  3921     0BAA  3000               	movlw	0
  3922     0BAB  00A5               	movwf	?___ftmul+2
  3923     0BAC  0008               	return
  3924     0BAD                     l2027:
  3925     0BAD  0826               	movf	___ftmul@f2,w
  3926     0BAE  00A9               	movwf	??___ftmul
  3927     0BAF  0827               	movf	___ftmul@f2+1,w
  3928     0BB0  00AA               	movwf	??___ftmul+1
  3929     0BB1  0828               	movf	___ftmul@f2+2,w
  3930     0BB2  00AB               	movwf	??___ftmul+2
  3931     0BB3  1003               	clrc
  3932     0BB4  0D2A               	rlf	??___ftmul+1,w
  3933     0BB5  0D2B               	rlf	??___ftmul+2,w
  3934     0BB6  00B1               	movwf	___ftmul@sign
  3935     0BB7  0831               	movf	___ftmul@sign,w
  3936     0BB8  1D03               	btfss	3,2
  3937     0BB9  2BC1               	goto	l2033
  3938     0BBA  3000               	movlw	0
  3939     0BBB  00A3               	movwf	?___ftmul
  3940     0BBC  3000               	movlw	0
  3941     0BBD  00A4               	movwf	?___ftmul+1
  3942     0BBE  3000               	movlw	0
  3943     0BBF  00A5               	movwf	?___ftmul+2
  3944     0BC0  0008               	return
  3945     0BC1                     l2033:
  3946     0BC1  0831               	movf	___ftmul@sign,w
  3947     0BC2  3E7B               	addlw	123
  3948     0BC3  00FF               	movwf	127
  3949     0BC4  087F               	movf	127,w
  3950     0BC5  07AC               	addwf	___ftmul@exp,f
  3951     0BC6  0825               	movf	___ftmul@f1+2,w
  3952     0BC7  00B1               	movwf	___ftmul@sign
  3953     0BC8  0828               	movf	___ftmul@f2+2,w
  3954     0BC9  00FF               	movwf	127
  3955     0BCA  087F               	movf	127,w
  3956     0BCB  06B1               	xorwf	___ftmul@sign,f
  3957     0BCC  3080               	movlw	128
  3958     0BCD  00FF               	movwf	127
  3959     0BCE  087F               	movf	127,w
  3960     0BCF  05B1               	andwf	___ftmul@sign,f
  3961     0BD0  17A4               	bsf	___ftmul@f1+1,7
  3962     0BD1  17A7               	bsf	___ftmul@f2+1,7
  3963     0BD2  30FF               	movlw	255
  3964     0BD3  05A6               	andwf	___ftmul@f2,f
  3965     0BD4  30FF               	movlw	255
  3966     0BD5  05A7               	andwf	___ftmul@f2+1,f
  3967     0BD6  3000               	movlw	0
  3968     0BD7  05A8               	andwf	___ftmul@f2+2,f
  3969     0BD8  3000               	movlw	0
  3970     0BD9  00AD               	movwf	___ftmul@f3_as_product
  3971     0BDA  3000               	movlw	0
  3972     0BDB  00AE               	movwf	___ftmul@f3_as_product+1
  3973     0BDC  3000               	movlw	0
  3974     0BDD  00AF               	movwf	___ftmul@f3_as_product+2
  3975     0BDE  3007               	movlw	7
  3976     0BDF  00B0               	movwf	___ftmul@cntr
  3977     0BE0                     l2051:
  3978     0BE0  1C23               	btfss	___ftmul@f1,0
  3979     0BE1  2BF0               	goto	l2055
  3980     0BE2  0826               	movf	___ftmul@f2,w
  3981     0BE3  07AD               	addwf	___ftmul@f3_as_product,f
  3982     0BE4  0827               	movf	___ftmul@f2+1,w
  3983     0BE5  1103               	clrz
  3984     0BE6  1803               	skipnc
  3985     0BE7  0A27               	incf	___ftmul@f2+1,w
  3986     0BE8  1D03               	btfss	3,2
  3987     0BE9  07AE               	addwf	___ftmul@f3_as_product+1,f
  3988     0BEA  0828               	movf	___ftmul@f2+2,w
  3989     0BEB  1103               	clrz
  3990     0BEC  1803               	skipnc
  3991     0BED  0A28               	incf	___ftmul@f2+2,w
  3992     0BEE  1D03               	btfss	3,2
  3993     0BEF  07AF               	addwf	___ftmul@f3_as_product+2,f
  3994     0BF0                     l2055:
  3995     0BF0  3001               	movlw	1
  3996     0BF1                     u2625:
  3997     0BF1  1003               	clrc
  3998     0BF2  0CA5               	rrf	___ftmul@f1+2,f
  3999     0BF3  0CA4               	rrf	___ftmul@f1+1,f
  4000     0BF4  0CA3               	rrf	___ftmul@f1,f
  4001     0BF5  3EFF               	addlw	-1
  4002     0BF6  1D03               	skipz
  4003     0BF7  2BF1               	goto	u2625
  4004     0BF8  3001               	movlw	1
  4005     0BF9                     u2635:
  4006     0BF9  1003               	clrc
  4007     0BFA  0DA6               	rlf	___ftmul@f2,f
  4008     0BFB  0DA7               	rlf	___ftmul@f2+1,f
  4009     0BFC  0DA8               	rlf	___ftmul@f2+2,f
  4010     0BFD  3EFF               	addlw	-1
  4011     0BFE  1D03               	skipz
  4012     0BFF  2BF9               	goto	u2635
  4013     0C00  3001               	movlw	1
  4014     0C01  02B0               	subwf	___ftmul@cntr,f
  4015     0C02  1D03               	btfss	3,2
  4016     0C03  2BE0               	goto	l2051
  4017     0C04  3009               	movlw	9
  4018     0C05  00B0               	movwf	___ftmul@cntr
  4019     0C06                     l2063:
  4020     0C06  1C23               	btfss	___ftmul@f1,0
  4021     0C07  2C16               	goto	l2067
  4022     0C08  0826               	movf	___ftmul@f2,w
  4023     0C09  07AD               	addwf	___ftmul@f3_as_product,f
  4024     0C0A  0827               	movf	___ftmul@f2+1,w
  4025     0C0B  1103               	clrz
  4026     0C0C  1803               	skipnc
  4027     0C0D  0A27               	incf	___ftmul@f2+1,w
  4028     0C0E  1D03               	btfss	3,2
  4029     0C0F  07AE               	addwf	___ftmul@f3_as_product+1,f
  4030     0C10  0828               	movf	___ftmul@f2+2,w
  4031     0C11  1103               	clrz
  4032     0C12  1803               	skipnc
  4033     0C13  0A28               	incf	___ftmul@f2+2,w
  4034     0C14  1D03               	btfss	3,2
  4035     0C15  07AF               	addwf	___ftmul@f3_as_product+2,f
  4036     0C16                     l2067:
  4037     0C16  3001               	movlw	1
  4038     0C17                     u2675:
  4039     0C17  1003               	clrc
  4040     0C18  0CA5               	rrf	___ftmul@f1+2,f
  4041     0C19  0CA4               	rrf	___ftmul@f1+1,f
  4042     0C1A  0CA3               	rrf	___ftmul@f1,f
  4043     0C1B  3EFF               	addlw	-1
  4044     0C1C  1D03               	skipz
  4045     0C1D  2C17               	goto	u2675
  4046     0C1E  3001               	movlw	1
  4047     0C1F                     u2685:
  4048     0C1F  1003               	clrc
  4049     0C20  0CAF               	rrf	___ftmul@f3_as_product+2,f
  4050     0C21  0CAE               	rrf	___ftmul@f3_as_product+1,f
  4051     0C22  0CAD               	rrf	___ftmul@f3_as_product,f
  4052     0C23  3EFF               	addlw	-1
  4053     0C24  1D03               	skipz
  4054     0C25  2C1F               	goto	u2685
  4055     0C26  3001               	movlw	1
  4056     0C27  02B0               	subwf	___ftmul@cntr,f
  4057     0C28  1D03               	btfss	3,2
  4058     0C29  2C06               	goto	l2063
  4059     0C2A  082D               	movf	___ftmul@f3_as_product,w
  4060     0C2B  00F0               	movwf	___ftpack@arg
  4061     0C2C  082E               	movf	___ftmul@f3_as_product+1,w
  4062     0C2D  00F1               	movwf	___ftpack@arg+1
  4063     0C2E  082F               	movf	___ftmul@f3_as_product+2,w
  4064     0C2F  00F2               	movwf	___ftpack@arg+2
  4065     0C30  082C               	movf	___ftmul@exp,w
  4066     0C31  00F3               	movwf	___ftpack@exp
  4067     0C32  0831               	movf	___ftmul@sign,w
  4068     0C33  00F4               	movwf	___ftpack@sign
  4069     0C34  120A  158A  2215   	fcall	___ftpack
  4070     0C37  0870               	movf	?___ftpack,w
  4071     0C38  1283               	bcf	3,5	;RP0=0, select bank0
  4072     0C39  00A3               	movwf	?___ftmul
  4073     0C3A  0871               	movf	?___ftpack+1,w
  4074     0C3B  00A4               	movwf	?___ftmul+1
  4075     0C3C  0872               	movf	?___ftpack+2,w
  4076     0C3D  00A5               	movwf	?___ftmul+2
  4077     0C3E  0008               	return
  4078     0C3F                     __end_of___ftmul:
  4079                           
  4080                           	psect	text10
  4081     1623                     __ptext10:	
  4082 ;; *************** function ___bmul *****************
  4083 ;; Defined at:
  4084 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c90\common\Umul8.c"
  4085 ;; Parameters:    Size  Location     Type
  4086 ;;  multiplier      1    wreg     unsigned char 
  4087 ;;  multiplicand    1    0[BANK0 ] unsigned char 
  4088 ;; Auto vars:     Size  Location     Type
  4089 ;;  multiplier      1    2[BANK0 ] unsigned char 
  4090 ;;  product         1    1[BANK0 ] unsigned char 
  4091 ;; Return value:  Size  Location     Type
  4092 ;;                  1    wreg      unsigned char 
  4093 ;; Registers used:
  4094 ;;		wreg, status,2, status,0, btemp+1
  4095 ;; Tracked objects:
  4096 ;;		On entry : 300/0
  4097 ;;		On exit  : 300/0
  4098 ;;		Unchanged: 0/0
  4099 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4100 ;;      Params:         0       1       0       0       0
  4101 ;;      Locals:         0       2       0       0       0
  4102 ;;      Temps:          0       0       0       0       0
  4103 ;;      Totals:         0       3       0       0       0
  4104 ;;Total ram usage:        3 bytes
  4105 ;; Hardware stack levels used: 1
  4106 ;; This function calls:
  4107 ;;		Nothing
  4108 ;; This function is called by:
  4109 ;;		_fround
  4110 ;;		_scale
  4111 ;; This function uses a non-reentrant model
  4112 ;;
  4113                           
  4114     1623                     ___bmul:	
  4115                           ;psect for function ___bmul
  4116                           
  4117                           
  4118                           ;incstack = 0
  4119                           ; Regs used in ___bmul: [wreg+status,2+status,0+btemp+1]
  4120                           ;___bmul@multiplier stored from wreg
  4121     1623  00A2               	movwf	___bmul@multiplier
  4122     1624  01A1               	clrf	___bmul@product
  4123     1625                     l1851:
  4124     1625  1C22               	btfss	___bmul@multiplier,0
  4125     1626  2E2B               	goto	l1855
  4126     1627  0820               	movf	___bmul@multiplicand,w
  4127     1628  00FF               	movwf	127
  4128     1629  087F               	movf	127,w
  4129     162A  07A1               	addwf	___bmul@product,f
  4130     162B                     l1855:
  4131     162B  1003               	clrc
  4132     162C  0DA0               	rlf	___bmul@multiplicand,f
  4133     162D  1003               	clrc
  4134     162E  0CA2               	rrf	___bmul@multiplier,f
  4135     162F  0822               	movf	___bmul@multiplier,w
  4136     1630  1D03               	btfss	3,2
  4137     1631  2E25               	goto	l1851
  4138     1632  0821               	movf	___bmul@product,w
  4139     1633  0008               	return
  4140     1634                     __end_of___bmul:
  4141                           
  4142                           	psect	text11
  4143     0AF8                     __ptext11:	
  4144 ;; *************** function __tdiv_to_l_ *****************
  4145 ;; Defined at:
  4146 ;;		line 60 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c90\common\ftdivl.c"
  4147 ;; Parameters:    Size  Location     Type
  4148 ;;  f1              3    0[COMMON] float 
  4149 ;;  f2              3    3[COMMON] float 
  4150 ;; Auto vars:     Size  Location     Type
  4151 ;;  quot            4    0[BANK0 ] unsigned long 
  4152 ;;  exp1            1    5[BANK0 ] unsigned char 
  4153 ;;  cntr            1    4[BANK0 ] unsigned char 
  4154 ;; Return value:  Size  Location     Type
  4155 ;;                  4    0[COMMON] unsigned long 
  4156 ;; Registers used:
  4157 ;;		wreg, status,2, status,0, btemp+1
  4158 ;; Tracked objects:
  4159 ;;		On entry : 300/0
  4160 ;;		On exit  : 300/0
  4161 ;;		Unchanged: 0/0
  4162 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4163 ;;      Params:         6       0       0       0       0
  4164 ;;      Locals:         0       6       0       0       0
  4165 ;;      Temps:          3       0       0       0       0
  4166 ;;      Totals:         9       6       0       0       0
  4167 ;;Total ram usage:       15 bytes
  4168 ;; Hardware stack levels used: 1
  4169 ;; This function calls:
  4170 ;;		Nothing
  4171 ;; This function is called by:
  4172 ;;		_sprintf
  4173 ;; This function uses a non-reentrant model
  4174 ;;
  4175                           
  4176     0AF8                     __tdiv_to_l_:	
  4177                           ;psect for function __tdiv_to_l_
  4178                           
  4179                           
  4180                           ;incstack = 0
  4181                           ; Regs used in __tdiv_to_l_: [wreg+status,2+status,0+btemp+1]
  4182     0AF8  0870               	movf	__tdiv_to_l_@f1,w
  4183     0AF9  00F6               	movwf	??__tdiv_to_l_
  4184     0AFA  0871               	movf	__tdiv_to_l_@f1+1,w
  4185     0AFB  00F7               	movwf	??__tdiv_to_l_+1
  4186     0AFC  0872               	movf	__tdiv_to_l_@f1+2,w
  4187     0AFD  00F8               	movwf	??__tdiv_to_l_+2
  4188     0AFE  1003               	clrc
  4189     0AFF  0D77               	rlf	??__tdiv_to_l_+1,w
  4190     0B00  0D78               	rlf	??__tdiv_to_l_+2,w
  4191     0B01  00A5               	movwf	__tdiv_to_l_@exp1
  4192     0B02  0825               	movf	__tdiv_to_l_@exp1,w
  4193     0B03  1D03               	btfss	3,2
  4194     0B04  2B0E               	goto	l2229
  4195     0B05                     l2225:
  4196     0B05  3000               	movlw	0
  4197     0B06  00F3               	movwf	?__tdiv_to_l_+3
  4198     0B07  3000               	movlw	0
  4199     0B08  00F2               	movwf	?__tdiv_to_l_+2
  4200     0B09  3000               	movlw	0
  4201     0B0A  00F1               	movwf	?__tdiv_to_l_+1
  4202     0B0B  3000               	movlw	0
  4203     0B0C  00F0               	movwf	?__tdiv_to_l_
  4204     0B0D  0008               	return
  4205     0B0E                     l2229:
  4206     0B0E  0873               	movf	__tdiv_to_l_@f2,w
  4207     0B0F  00F6               	movwf	??__tdiv_to_l_
  4208     0B10  0874               	movf	__tdiv_to_l_@f2+1,w
  4209     0B11  00F7               	movwf	??__tdiv_to_l_+1
  4210     0B12  0875               	movf	__tdiv_to_l_@f2+2,w
  4211     0B13  00F8               	movwf	??__tdiv_to_l_+2
  4212     0B14  1003               	clrc
  4213     0B15  0D77               	rlf	??__tdiv_to_l_+1,w
  4214     0B16  0D78               	rlf	??__tdiv_to_l_+2,w
  4215     0B17  00A4               	movwf	__tdiv_to_l_@cntr
  4216     0B18  0824               	movf	__tdiv_to_l_@cntr,w
  4217     0B19  1903               	btfsc	3,2
  4218     0B1A  2B05               	goto	l2225
  4219     0B1B  17F1               	bsf	__tdiv_to_l_@f1+1,7
  4220     0B1C  30FF               	movlw	255
  4221     0B1D  05F0               	andwf	__tdiv_to_l_@f1,f
  4222     0B1E  30FF               	movlw	255
  4223     0B1F  05F1               	andwf	__tdiv_to_l_@f1+1,f
  4224     0B20  3000               	movlw	0
  4225     0B21  05F2               	andwf	__tdiv_to_l_@f1+2,f
  4226     0B22  17F4               	bsf	__tdiv_to_l_@f2+1,7
  4227     0B23  30FF               	movlw	255
  4228     0B24  05F3               	andwf	__tdiv_to_l_@f2,f
  4229     0B25  30FF               	movlw	255
  4230     0B26  05F4               	andwf	__tdiv_to_l_@f2+1,f
  4231     0B27  3000               	movlw	0
  4232     0B28  05F5               	andwf	__tdiv_to_l_@f2+2,f
  4233     0B29  3000               	movlw	0
  4234     0B2A  00A3               	movwf	__tdiv_to_l_@quot+3
  4235     0B2B  3000               	movlw	0
  4236     0B2C  00A2               	movwf	__tdiv_to_l_@quot+2
  4237     0B2D  3000               	movlw	0
  4238     0B2E  00A1               	movwf	__tdiv_to_l_@quot+1
  4239     0B2F  3000               	movlw	0
  4240     0B30  00A0               	movwf	__tdiv_to_l_@quot
  4241     0B31  307F               	movlw	127
  4242     0B32  02A5               	subwf	__tdiv_to_l_@exp1,f
  4243     0B33  3098               	movlw	152
  4244     0B34  0724               	addwf	__tdiv_to_l_@cntr,w
  4245     0B35  00F6               	movwf	??__tdiv_to_l_
  4246     0B36  0876               	movf	??__tdiv_to_l_,w
  4247     0B37  02A5               	subwf	__tdiv_to_l_@exp1,f
  4248     0B38  3018               	movlw	24
  4249     0B39  00A4               	movwf	__tdiv_to_l_@cntr
  4250     0B3A                     l2243:
  4251     0B3A  3001               	movlw	1
  4252     0B3B  00F6               	movwf	??__tdiv_to_l_
  4253     0B3C                     u2895:
  4254     0B3C  1003               	clrc
  4255     0B3D  0DA0               	rlf	__tdiv_to_l_@quot,f
  4256     0B3E  0DA1               	rlf	__tdiv_to_l_@quot+1,f
  4257     0B3F  0DA2               	rlf	__tdiv_to_l_@quot+2,f
  4258     0B40  0DA3               	rlf	__tdiv_to_l_@quot+3,f
  4259     0B41  0BF6               	decfsz	??__tdiv_to_l_,f
  4260     0B42  2B3C               	goto	u2895
  4261     0B43  0875               	movf	__tdiv_to_l_@f2+2,w
  4262     0B44  0272               	subwf	__tdiv_to_l_@f1+2,w
  4263     0B45  1D03               	skipz
  4264     0B46  2B4D               	goto	u2905
  4265     0B47  0874               	movf	__tdiv_to_l_@f2+1,w
  4266     0B48  0271               	subwf	__tdiv_to_l_@f1+1,w
  4267     0B49  1D03               	skipz
  4268     0B4A  2B4D               	goto	u2905
  4269     0B4B  0873               	movf	__tdiv_to_l_@f2,w
  4270     0B4C  0270               	subwf	__tdiv_to_l_@f1,w
  4271     0B4D                     u2905:
  4272     0B4D  1C03               	skipc
  4273     0B4E  2B5A               	goto	l2251
  4274     0B4F  0873               	movf	__tdiv_to_l_@f2,w
  4275     0B50  02F0               	subwf	__tdiv_to_l_@f1,f
  4276     0B51  0874               	movf	__tdiv_to_l_@f2+1,w
  4277     0B52  1C03               	skipc
  4278     0B53  0F74               	incfsz	__tdiv_to_l_@f2+1,w
  4279     0B54  02F1               	subwf	__tdiv_to_l_@f1+1,f
  4280     0B55  0875               	movf	__tdiv_to_l_@f2+2,w
  4281     0B56  1C03               	skipc
  4282     0B57  0A75               	incf	__tdiv_to_l_@f2+2,w
  4283     0B58  02F2               	subwf	__tdiv_to_l_@f1+2,f
  4284     0B59  1420               	bsf	__tdiv_to_l_@quot,0
  4285     0B5A                     l2251:
  4286     0B5A  3001               	movlw	1
  4287     0B5B                     u2915:
  4288     0B5B  1003               	clrc
  4289     0B5C  0DF0               	rlf	__tdiv_to_l_@f1,f
  4290     0B5D  0DF1               	rlf	__tdiv_to_l_@f1+1,f
  4291     0B5E  0DF2               	rlf	__tdiv_to_l_@f1+2,f
  4292     0B5F  3EFF               	addlw	-1
  4293     0B60  1D03               	skipz
  4294     0B61  2B5B               	goto	u2915
  4295     0B62  3001               	movlw	1
  4296     0B63  02A4               	subwf	__tdiv_to_l_@cntr,f
  4297     0B64  1D03               	btfss	3,2
  4298     0B65  2B3A               	goto	l2243
  4299     0B66  1FA5               	btfss	__tdiv_to_l_@exp1,7
  4300     0B67  2B7D               	goto	l2265
  4301     0B68  0825               	movf	__tdiv_to_l_@exp1,w
  4302     0B69  3A80               	xorlw	128
  4303     0B6A  3E97               	addlw	151
  4304     0B6B  1C03               	btfss	3,0
  4305     0B6C  2B05               	goto	l2225
  4306     0B6D                     l2261:
  4307     0B6D  3001               	movlw	1
  4308     0B6E                     u2955:
  4309     0B6E  1003               	clrc
  4310     0B6F  0CA3               	rrf	__tdiv_to_l_@quot+3,f
  4311     0B70  0CA2               	rrf	__tdiv_to_l_@quot+2,f
  4312     0B71  0CA1               	rrf	__tdiv_to_l_@quot+1,f
  4313     0B72  0CA0               	rrf	__tdiv_to_l_@quot,f
  4314     0B73  3EFF               	addlw	-1
  4315     0B74  1D03               	skipz
  4316     0B75  2B6E               	goto	u2955
  4317     0B76  3001               	movlw	1
  4318     0B77  00FF               	movwf	127
  4319     0B78  087F               	movf	127,w
  4320     0B79  07A5               	addwf	__tdiv_to_l_@exp1,f
  4321     0B7A  1903               	btfsc	3,2
  4322     0B7B  2B90               	goto	l2273
  4323     0B7C  2B6D               	goto	l2261
  4324     0B7D                     l2265:
  4325     0B7D  3018               	movlw	24
  4326     0B7E  0225               	subwf	__tdiv_to_l_@exp1,w
  4327     0B7F  1803               	btfsc	3,0
  4328     0B80  2B05               	goto	l2225
  4329     0B81                     l573:
  4330     0B81  0825               	movf	__tdiv_to_l_@exp1,w
  4331     0B82  1903               	btfsc	3,2
  4332     0B83  2B90               	goto	l2273
  4333     0B84  3001               	movlw	1
  4334     0B85  00F6               	movwf	??__tdiv_to_l_
  4335     0B86                     u2985:
  4336     0B86  1003               	clrc
  4337     0B87  0DA0               	rlf	__tdiv_to_l_@quot,f
  4338     0B88  0DA1               	rlf	__tdiv_to_l_@quot+1,f
  4339     0B89  0DA2               	rlf	__tdiv_to_l_@quot+2,f
  4340     0B8A  0DA3               	rlf	__tdiv_to_l_@quot+3,f
  4341     0B8B  0BF6               	decfsz	??__tdiv_to_l_,f
  4342     0B8C  2B86               	goto	u2985
  4343     0B8D  3001               	movlw	1
  4344     0B8E  02A5               	subwf	__tdiv_to_l_@exp1,f
  4345     0B8F  2B81               	goto	l573
  4346     0B90                     l2273:
  4347     0B90  0823               	movf	__tdiv_to_l_@quot+3,w
  4348     0B91  00F3               	movwf	?__tdiv_to_l_+3
  4349     0B92  0822               	movf	__tdiv_to_l_@quot+2,w
  4350     0B93  00F2               	movwf	?__tdiv_to_l_+2
  4351     0B94  0821               	movf	__tdiv_to_l_@quot+1,w
  4352     0B95  00F1               	movwf	?__tdiv_to_l_+1
  4353     0B96  0820               	movf	__tdiv_to_l_@quot,w
  4354     0B97  00F0               	movwf	?__tdiv_to_l_
  4355     0B98  0008               	return
  4356     0B99                     __end_of__tdiv_to_l_:
  4357                           
  4358                           	psect	text12
  4359     002B                     __ptext12:	
  4360 ;; *************** function __div_to_l_ *****************
  4361 ;; Defined at:
  4362 ;;		line 60 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c90\common\fldivl.c"
  4363 ;; Parameters:    Size  Location     Type
  4364 ;;  f1              3    0[COMMON] unsigned long 
  4365 ;;  f2              3    3[COMMON] unsigned long 
  4366 ;; Auto vars:     Size  Location     Type
  4367 ;;  quot            4    0[BANK0 ] unsigned long 
  4368 ;;  exp1            1    5[BANK0 ] unsigned char 
  4369 ;;  cntr            1    4[BANK0 ] unsigned char 
  4370 ;; Return value:  Size  Location     Type
  4371 ;;                  4    0[COMMON] unsigned long 
  4372 ;; Registers used:
  4373 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1
  4374 ;; Tracked objects:
  4375 ;;		On entry : 0/0
  4376 ;;		On exit  : 300/0
  4377 ;;		Unchanged: 0/0
  4378 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4379 ;;      Params:         6       0       0       0       0
  4380 ;;      Locals:         0       6       0       0       0
  4381 ;;      Temps:          8       0       0       0       0
  4382 ;;      Totals:        14       6       0       0       0
  4383 ;;Total ram usage:       20 bytes
  4384 ;; Hardware stack levels used: 1
  4385 ;; This function calls:
  4386 ;;		Nothing
  4387 ;; This function is called by:
  4388 ;;		_sprintf
  4389 ;; This function uses a non-reentrant model
  4390 ;;
  4391                           
  4392     002B                     __div_to_l_:	
  4393                           ;psect for function __div_to_l_
  4394                           
  4395                           
  4396                           ;incstack = 0
  4397                           ; Regs used in __div_to_l_: [wreg-fsr0h+status,2+status,0+btemp+1]
  4398     002B  3070               	movlw	low (__div_to_l_@f1| 0)
  4399     002C  0084               	movwf	4
  4400     002D  0800               	movf	0,w
  4401     002E  00F6               	movwf	??__div_to_l_
  4402     002F  0A84               	incf	4,f
  4403     0030  0800               	movf	0,w
  4404     0031  00F7               	movwf	??__div_to_l_+1
  4405     0032  0A84               	incf	4,f
  4406     0033  0800               	movf	0,w
  4407     0034  00F8               	movwf	??__div_to_l_+2
  4408     0035  0A84               	incf	4,f
  4409     0036  0800               	movf	0,w
  4410     0037  00F9               	movwf	??__div_to_l_+3
  4411     0038  1003               	clrc
  4412     0039  0D78               	rlf	??__div_to_l_+2,w
  4413     003A  0D79               	rlf	??__div_to_l_+3,w
  4414     003B  1283               	bcf	3,5	;RP0=0, select bank0
  4415     003C  1303               	bcf	3,6	;RP1=0, select bank0
  4416     003D  00A5               	movwf	__div_to_l_@exp1
  4417     003E  0825               	movf	__div_to_l_@exp1,w
  4418     003F  1D03               	btfss	3,2
  4419     0040  284A               	goto	l2283
  4420     0041                     l2279:
  4421     0041  3000               	movlw	0
  4422     0042  00F3               	movwf	?__div_to_l_+3
  4423     0043  3000               	movlw	0
  4424     0044  00F2               	movwf	?__div_to_l_+2
  4425     0045  3000               	movlw	0
  4426     0046  00F1               	movwf	?__div_to_l_+1
  4427     0047  3000               	movlw	0
  4428     0048  00F0               	movwf	?__div_to_l_
  4429     0049  0008               	return
  4430     004A                     l2283:
  4431     004A  3073               	movlw	low (__div_to_l_@f2| 0)
  4432     004B  0084               	movwf	4
  4433     004C  0800               	movf	0,w
  4434     004D  00F6               	movwf	??__div_to_l_
  4435     004E  0A84               	incf	4,f
  4436     004F  0800               	movf	0,w
  4437     0050  00F7               	movwf	??__div_to_l_+1
  4438     0051  0A84               	incf	4,f
  4439     0052  0800               	movf	0,w
  4440     0053  00F8               	movwf	??__div_to_l_+2
  4441     0054  0A84               	incf	4,f
  4442     0055  0800               	movf	0,w
  4443     0056  00F9               	movwf	??__div_to_l_+3
  4444     0057  1003               	clrc
  4445     0058  0D78               	rlf	??__div_to_l_+2,w
  4446     0059  0D79               	rlf	??__div_to_l_+3,w
  4447     005A  00A4               	movwf	__div_to_l_@cntr
  4448     005B  0824               	movf	__div_to_l_@cntr,w
  4449     005C  1903               	btfsc	3,2
  4450     005D  2841               	goto	l2279
  4451     005E  3070               	movlw	low (__div_to_l_@f1| 0)
  4452     005F  0084               	movwf	4
  4453     0060  3000               	movlw	0
  4454     0061  0480               	iorwf	0,f
  4455     0062  0A84               	incf	4,f
  4456     0063  3000               	movlw	0
  4457     0064  0480               	iorwf	0,f
  4458     0065  0A84               	incf	4,f
  4459     0066  3080               	movlw	128
  4460     0067  0480               	iorwf	0,f
  4461     0068  0A84               	incf	4,f
  4462     0069  3000               	movlw	0
  4463     006A  0480               	iorwf	0,f
  4464     006B  3070               	movlw	low (__div_to_l_@f1| 0)
  4465     006C  0084               	movwf	4
  4466     006D  30FF               	movlw	255
  4467     006E  0580               	andwf	0,f
  4468     006F  0A84               	incf	4,f
  4469     0070  30FF               	movlw	255
  4470     0071  0580               	andwf	0,f
  4471     0072  0A84               	incf	4,f
  4472     0073  30FF               	movlw	255
  4473     0074  0580               	andwf	0,f
  4474     0075  0A84               	incf	4,f
  4475     0076  3000               	movlw	0
  4476     0077  0580               	andwf	0,f
  4477     0078  3073               	movlw	low (__div_to_l_@f2| 0)
  4478     0079  0084               	movwf	4
  4479     007A  3000               	movlw	0
  4480     007B  0480               	iorwf	0,f
  4481     007C  0A84               	incf	4,f
  4482     007D  3000               	movlw	0
  4483     007E  0480               	iorwf	0,f
  4484     007F  0A84               	incf	4,f
  4485     0080  3080               	movlw	128
  4486     0081  0480               	iorwf	0,f
  4487     0082  0A84               	incf	4,f
  4488     0083  3000               	movlw	0
  4489     0084  0480               	iorwf	0,f
  4490     0085  3073               	movlw	low (__div_to_l_@f2| 0)
  4491     0086  0084               	movwf	4
  4492     0087  30FF               	movlw	255
  4493     0088  0580               	andwf	0,f
  4494     0089  0A84               	incf	4,f
  4495     008A  30FF               	movlw	255
  4496     008B  0580               	andwf	0,f
  4497     008C  0A84               	incf	4,f
  4498     008D  30FF               	movlw	255
  4499     008E  0580               	andwf	0,f
  4500     008F  0A84               	incf	4,f
  4501     0090  3000               	movlw	0
  4502     0091  0580               	andwf	0,f
  4503     0092  3000               	movlw	0
  4504     0093  00A3               	movwf	__div_to_l_@quot+3
  4505     0094  3000               	movlw	0
  4506     0095  00A2               	movwf	__div_to_l_@quot+2
  4507     0096  3000               	movlw	0
  4508     0097  00A1               	movwf	__div_to_l_@quot+1
  4509     0098  3000               	movlw	0
  4510     0099  00A0               	movwf	__div_to_l_@quot
  4511     009A  307F               	movlw	127
  4512     009B  02A5               	subwf	__div_to_l_@exp1,f
  4513     009C  30A0               	movlw	160
  4514     009D  0724               	addwf	__div_to_l_@cntr,w
  4515     009E  00F6               	movwf	??__div_to_l_
  4516     009F  0876               	movf	??__div_to_l_,w
  4517     00A0  02A5               	subwf	__div_to_l_@exp1,f
  4518     00A1  3020               	movlw	32
  4519     00A2  00A4               	movwf	__div_to_l_@cntr
  4520     00A3                     l2299:
  4521     00A3  3001               	movlw	1
  4522     00A4  00F6               	movwf	??__div_to_l_
  4523     00A5                     u3025:
  4524     00A5  1003               	clrc
  4525     00A6  0DA0               	rlf	__div_to_l_@quot,f
  4526     00A7  0DA1               	rlf	__div_to_l_@quot+1,f
  4527     00A8  0DA2               	rlf	__div_to_l_@quot+2,f
  4528     00A9  0DA3               	rlf	__div_to_l_@quot+3,f
  4529     00AA  0BF6               	decfsz	??__div_to_l_,f
  4530     00AB  28A5               	goto	u3025
  4531     00AC  3073               	movlw	low (__div_to_l_@f2| 0)
  4532     00AD  0084               	movwf	4
  4533     00AE  0800               	movf	0,w
  4534     00AF  00F6               	movwf	??__div_to_l_
  4535     00B0  0A84               	incf	4,f
  4536     00B1  0800               	movf	0,w
  4537     00B2  00F7               	movwf	??__div_to_l_+1
  4538     00B3  0A84               	incf	4,f
  4539     00B4  0800               	movf	0,w
  4540     00B5  00F8               	movwf	??__div_to_l_+2
  4541     00B6  0A84               	incf	4,f
  4542     00B7  0800               	movf	0,w
  4543     00B8  00F9               	movwf	??__div_to_l_+3
  4544     00B9  3070               	movlw	low (__div_to_l_@f1| 0)
  4545     00BA  0084               	movwf	4
  4546     00BB  0800               	movf	0,w
  4547     00BC  00FA               	movwf	??__div_to_l_+4
  4548     00BD  0A84               	incf	4,f
  4549     00BE  0800               	movf	0,w
  4550     00BF  00FB               	movwf	??__div_to_l_+5
  4551     00C0  0A84               	incf	4,f
  4552     00C1  0800               	movf	0,w
  4553     00C2  00FC               	movwf	??__div_to_l_+6
  4554     00C3  0A84               	incf	4,f
  4555     00C4  0800               	movf	0,w
  4556     00C5  00FD               	movwf	??__div_to_l_+7
  4557     00C6  0879               	movf	??__div_to_l_+3,w
  4558     00C7  027D               	subwf	??__div_to_l_+7,w
  4559     00C8  1D03               	skipz
  4560     00C9  28D4               	goto	u3035
  4561     00CA  0878               	movf	??__div_to_l_+2,w
  4562     00CB  027C               	subwf	??__div_to_l_+6,w
  4563     00CC  1D03               	skipz
  4564     00CD  28D4               	goto	u3035
  4565     00CE  0877               	movf	??__div_to_l_+1,w
  4566     00CF  027B               	subwf	??__div_to_l_+5,w
  4567     00D0  1D03               	skipz
  4568     00D1  28D4               	goto	u3035
  4569     00D2  0876               	movf	??__div_to_l_,w
  4570     00D3  027A               	subwf	??__div_to_l_+4,w
  4571     00D4                     u3035:
  4572     00D4  1C03               	skipc
  4573     00D5  28F9               	goto	l486
  4574     00D6  3073               	movlw	low (__div_to_l_@f2| 0)
  4575     00D7  0084               	movwf	4
  4576     00D8  0800               	movf	0,w
  4577     00D9  00F6               	movwf	??__div_to_l_
  4578     00DA  0A84               	incf	4,f
  4579     00DB  0800               	movf	0,w
  4580     00DC  00F7               	movwf	??__div_to_l_+1
  4581     00DD  0A84               	incf	4,f
  4582     00DE  0800               	movf	0,w
  4583     00DF  00F8               	movwf	??__div_to_l_+2
  4584     00E0  0A84               	incf	4,f
  4585     00E1  0800               	movf	0,w
  4586     00E2  00F9               	movwf	??__div_to_l_+3
  4587     00E3  3070               	movlw	low (__div_to_l_@f1| 0)
  4588     00E4  0084               	movwf	4
  4589     00E5  0876               	movf	??__div_to_l_,w
  4590     00E6  0280               	subwf	0,f
  4591     00E7  0A84               	incf	4,f
  4592     00E8  0877               	movf	??__div_to_l_+1,w
  4593     00E9  1C03               	skipc
  4594     00EA  0F77               	incfsz	??__div_to_l_+1,w
  4595     00EB  0280               	subwf	0,f
  4596     00EC  0A84               	incf	4,f
  4597     00ED  0878               	movf	??__div_to_l_+2,w
  4598     00EE  1C03               	skipc
  4599     00EF  0F78               	incfsz	??__div_to_l_+2,w
  4600     00F0  0280               	subwf	0,f
  4601     00F1  0A84               	incf	4,f
  4602     00F2  0879               	movf	??__div_to_l_+3,w
  4603     00F3  1C03               	skipc
  4604     00F4  0A79               	incf	??__div_to_l_+3,w
  4605     00F5  0280               	subwf	0,f
  4606     00F6  3003               	movlw	3
  4607     00F7  0284               	subwf	4,f
  4608     00F8  1420               	bsf	__div_to_l_@quot,0
  4609     00F9                     l486:
  4610     00F9  3070               	movlw	low (__div_to_l_@f1| 0)
  4611     00FA  0084               	movwf	4
  4612     00FB  1003               	clrc
  4613     00FC  0D80               	rlf	0,f
  4614     00FD  0A84               	incf	4,f
  4615     00FE  0D80               	rlf	0,f
  4616     00FF  0A84               	incf	4,f
  4617     0100  0D80               	rlf	0,f
  4618     0101  0A84               	incf	4,f
  4619     0102  0D80               	rlf	0,f
  4620     0103  0384               	decf	4,f
  4621     0104  0384               	decf	4,f
  4622     0105  0384               	decf	4,f
  4623     0106  3001               	movlw	1
  4624     0107  02A4               	subwf	__div_to_l_@cntr,f
  4625     0108  1D03               	btfss	3,2
  4626     0109  28A3               	goto	l2299
  4627     010A  1FA5               	btfss	__div_to_l_@exp1,7
  4628     010B  2921               	goto	l2319
  4629     010C  0825               	movf	__div_to_l_@exp1,w
  4630     010D  3A80               	xorlw	128
  4631     010E  3E9F               	addlw	159
  4632     010F  1C03               	btfss	3,0
  4633     0110  2841               	goto	l2279
  4634     0111                     l2315:
  4635     0111  3001               	movlw	1
  4636     0112                     u3075:
  4637     0112  1003               	clrc
  4638     0113  0CA3               	rrf	__div_to_l_@quot+3,f
  4639     0114  0CA2               	rrf	__div_to_l_@quot+2,f
  4640     0115  0CA1               	rrf	__div_to_l_@quot+1,f
  4641     0116  0CA0               	rrf	__div_to_l_@quot,f
  4642     0117  3EFF               	addlw	-1
  4643     0118  1D03               	skipz
  4644     0119  2912               	goto	u3075
  4645     011A  3001               	movlw	1
  4646     011B  00FF               	movwf	127
  4647     011C  087F               	movf	127,w
  4648     011D  07A5               	addwf	__div_to_l_@exp1,f
  4649     011E  1903               	btfsc	3,2
  4650     011F  2934               	goto	l2327
  4651     0120  2911               	goto	l2315
  4652     0121                     l2319:
  4653     0121  3020               	movlw	32
  4654     0122  0225               	subwf	__div_to_l_@exp1,w
  4655     0123  1803               	btfsc	3,0
  4656     0124  2841               	goto	l2279
  4657     0125                     l494:
  4658     0125  0825               	movf	__div_to_l_@exp1,w
  4659     0126  1903               	btfsc	3,2
  4660     0127  2934               	goto	l2327
  4661     0128  3001               	movlw	1
  4662     0129  00F6               	movwf	??__div_to_l_
  4663     012A                     u3105:
  4664     012A  1003               	clrc
  4665     012B  0DA0               	rlf	__div_to_l_@quot,f
  4666     012C  0DA1               	rlf	__div_to_l_@quot+1,f
  4667     012D  0DA2               	rlf	__div_to_l_@quot+2,f
  4668     012E  0DA3               	rlf	__div_to_l_@quot+3,f
  4669     012F  0BF6               	decfsz	??__div_to_l_,f
  4670     0130  292A               	goto	u3105
  4671     0131  3001               	movlw	1
  4672     0132  02A5               	subwf	__div_to_l_@exp1,f
  4673     0133  2925               	goto	l494
  4674     0134                     l2327:
  4675     0134  0823               	movf	__div_to_l_@quot+3,w
  4676     0135  00F3               	movwf	?__div_to_l_+3
  4677     0136  0822               	movf	__div_to_l_@quot+2,w
  4678     0137  00F2               	movwf	?__div_to_l_+2
  4679     0138  0821               	movf	__div_to_l_@quot+1,w
  4680     0139  00F1               	movwf	?__div_to_l_+1
  4681     013A  0820               	movf	__div_to_l_@quot,w
  4682     013B  00F0               	movwf	?__div_to_l_
  4683     013C  0008               	return
  4684     013D                     __end_of__div_to_l_:
  4685                           
  4686                           	psect	text13
  4687     169E                     __ptext13:	
  4688 ;; *************** function ___wmul *****************
  4689 ;; Defined at:
  4690 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c90\common\Umul16.c"
  4691 ;; Parameters:    Size  Location     Type
  4692 ;;  multiplier      2    0[COMMON] unsigned int 
  4693 ;;  multiplicand    2    2[COMMON] unsigned int 
  4694 ;; Auto vars:     Size  Location     Type
  4695 ;;  product         2    4[COMMON] unsigned int 
  4696 ;; Return value:  Size  Location     Type
  4697 ;;                  2    0[COMMON] unsigned int 
  4698 ;; Registers used:
  4699 ;;		wreg, status,2, status,0
  4700 ;; Tracked objects:
  4701 ;;		On entry : 300/0
  4702 ;;		On exit  : 300/0
  4703 ;;		Unchanged: 300/0
  4704 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4705 ;;      Params:         4       0       0       0       0
  4706 ;;      Locals:         2       0       0       0       0
  4707 ;;      Temps:          0       0       0       0       0
  4708 ;;      Totals:         6       0       0       0       0
  4709 ;;Total ram usage:        6 bytes
  4710 ;; Hardware stack levels used: 1
  4711 ;; This function calls:
  4712 ;;		Nothing
  4713 ;; This function is called by:
  4714 ;;		_sprintf
  4715 ;; This function uses a non-reentrant model
  4716 ;;
  4717                           
  4718     169E                     ___wmul:	
  4719                           ;psect for function ___wmul
  4720                           
  4721                           
  4722                           ;incstack = 0
  4723                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  4724     169E  01F4               	clrf	___wmul@product
  4725     169F  01F5               	clrf	___wmul@product+1
  4726     16A0                     l2333:
  4727     16A0  1C70               	btfss	___wmul@multiplier,0
  4728     16A1  2EA8               	goto	l277
  4729     16A2  0872               	movf	___wmul@multiplicand,w
  4730     16A3  07F4               	addwf	___wmul@product,f
  4731     16A4  1803               	skipnc
  4732     16A5  0AF5               	incf	___wmul@product+1,f
  4733     16A6  0873               	movf	___wmul@multiplicand+1,w
  4734     16A7  07F5               	addwf	___wmul@product+1,f
  4735     16A8                     l277:
  4736     16A8  3001               	movlw	1
  4737     16A9                     u3135:
  4738     16A9  1003               	clrc
  4739     16AA  0DF2               	rlf	___wmul@multiplicand,f
  4740     16AB  0DF3               	rlf	___wmul@multiplicand+1,f
  4741     16AC  3EFF               	addlw	-1
  4742     16AD  1D03               	skipz
  4743     16AE  2EA9               	goto	u3135
  4744     16AF  3001               	movlw	1
  4745     16B0                     u3145:
  4746     16B0  1003               	clrc
  4747     16B1  0CF1               	rrf	___wmul@multiplier+1,f
  4748     16B2  0CF0               	rrf	___wmul@multiplier,f
  4749     16B3  3EFF               	addlw	-1
  4750     16B4  1D03               	skipz
  4751     16B5  2EB0               	goto	u3145
  4752     16B6  0870               	movf	___wmul@multiplier,w
  4753     16B7  0471               	iorwf	___wmul@multiplier+1,w
  4754     16B8  1D03               	btfss	3,2
  4755     16B9  2EA0               	goto	l2333
  4756     16BA  0875               	movf	___wmul@product+1,w
  4757     16BB  00F1               	movwf	?___wmul+1
  4758     16BC  0874               	movf	___wmul@product,w
  4759     16BD  00F0               	movwf	?___wmul
  4760     16BE  0008               	return
  4761     16BF                     __end_of___wmul:
  4762                           
  4763                           	psect	text14
  4764     0004                     __ptext14:	
  4765 ;; *************** function ___lltoft *****************
  4766 ;; Defined at:
  4767 ;;		line 35 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c90\common\lltoft.c"
  4768 ;; Parameters:    Size  Location     Type
  4769 ;;  c               4    8[COMMON] unsigned long 
  4770 ;; Auto vars:     Size  Location     Type
  4771 ;;  exp             1   12[COMMON] unsigned char 
  4772 ;; Return value:  Size  Location     Type
  4773 ;;                  3    8[COMMON] float 
  4774 ;; Registers used:
  4775 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  4776 ;; Tracked objects:
  4777 ;;		On entry : 300/0
  4778 ;;		On exit  : 200/0
  4779 ;;		Unchanged: 200/0
  4780 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4781 ;;      Params:         4       0       0       0       0
  4782 ;;      Locals:         1       0       0       0       0
  4783 ;;      Temps:          0       0       0       0       0
  4784 ;;      Totals:         5       0       0       0       0
  4785 ;;Total ram usage:        5 bytes
  4786 ;; Hardware stack levels used: 1
  4787 ;; Hardware stack levels required when called: 1
  4788 ;; This function calls:
  4789 ;;		___ftpack
  4790 ;; This function is called by:
  4791 ;;		_sprintf
  4792 ;; This function uses a non-reentrant model
  4793 ;;
  4794                           
  4795     0004                     ___lltoft:	
  4796                           ;psect for function ___lltoft
  4797                           
  4798                           
  4799                           ;incstack = 0
  4800                           ; Regs used in ___lltoft: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  4801     0004  308E               	movlw	142
  4802     0005  00FC               	movwf	___lltoft@exp
  4803     0006                     l2479:
  4804     0006  30FF               	movlw	255
  4805     0007  057B               	andwf	___lltoft@c+3,w
  4806     0008  1903               	btfsc	3,2
  4807     0009  2818               	goto	l2481
  4808     000A  3001               	movlw	1
  4809     000B                     u3445:
  4810     000B  1003               	clrc
  4811     000C  0CFB               	rrf	___lltoft@c+3,f
  4812     000D  0CFA               	rrf	___lltoft@c+2,f
  4813     000E  0CF9               	rrf	___lltoft@c+1,f
  4814     000F  0CF8               	rrf	___lltoft@c,f
  4815     0010  3EFF               	addlw	-1
  4816     0011  1D03               	skipz
  4817     0012  280B               	goto	u3445
  4818     0013  3001               	movlw	1
  4819     0014  00FF               	movwf	127
  4820     0015  087F               	movf	127,w
  4821     0016  07FC               	addwf	___lltoft@exp,f
  4822     0017  2806               	goto	l2479
  4823     0018                     l2481:
  4824     0018  0878               	movf	___lltoft@c,w
  4825     0019  00F0               	movwf	___ftpack@arg
  4826     001A  0879               	movf	___lltoft@c+1,w
  4827     001B  00F1               	movwf	___ftpack@arg+1
  4828     001C  087A               	movf	___lltoft@c+2,w
  4829     001D  00F2               	movwf	___ftpack@arg+2
  4830     001E  087C               	movf	___lltoft@exp,w
  4831     001F  00F3               	movwf	___ftpack@exp
  4832     0020  01F4               	clrf	___ftpack@sign
  4833     0021  120A  158A  2215   	fcall	___ftpack
  4834     0024  0870               	movf	?___ftpack,w
  4835     0025  00F8               	movwf	?___lltoft
  4836     0026  0871               	movf	?___ftpack+1,w
  4837     0027  00F9               	movwf	?___lltoft+1
  4838     0028  0872               	movf	?___ftpack+2,w
  4839     0029  00FA               	movwf	?___lltoft+2
  4840     002A  0008               	return
  4841     002B                     __end_of___lltoft:
  4842                           
  4843                           	psect	text15
  4844     08B7                     __ptext15:	
  4845 ;; *************** function ___llmod *****************
  4846 ;; Defined at:
  4847 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c90\common\llmod.c"
  4848 ;; Parameters:    Size  Location     Type
  4849 ;;  divisor         4    0[COMMON] unsigned long 
  4850 ;;  dividend        4    4[COMMON] unsigned long 
  4851 ;; Auto vars:     Size  Location     Type
  4852 ;;  counter         1    9[COMMON] unsigned char 
  4853 ;; Return value:  Size  Location     Type
  4854 ;;                  4    0[COMMON] unsigned long 
  4855 ;; Registers used:
  4856 ;;		wreg, status,2, status,0, btemp+1
  4857 ;; Tracked objects:
  4858 ;;		On entry : 300/0
  4859 ;;		On exit  : 300/0
  4860 ;;		Unchanged: 300/0
  4861 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4862 ;;      Params:         8       0       0       0       0
  4863 ;;      Locals:         1       0       0       0       0
  4864 ;;      Temps:          1       0       0       0       0
  4865 ;;      Totals:        10       0       0       0       0
  4866 ;;Total ram usage:       10 bytes
  4867 ;; Hardware stack levels used: 1
  4868 ;; This function calls:
  4869 ;;		Nothing
  4870 ;; This function is called by:
  4871 ;;		_sprintf
  4872 ;; This function uses a non-reentrant model
  4873 ;;
  4874                           
  4875     08B7                     ___llmod:	
  4876                           ;psect for function ___llmod
  4877                           
  4878                           
  4879                           ;incstack = 0
  4880                           ; Regs used in ___llmod: [wreg+status,2+status,0+btemp+1]
  4881     08B7  0873               	movf	___llmod@divisor+3,w
  4882     08B8  0472               	iorwf	___llmod@divisor+2,w
  4883     08B9  0471               	iorwf	___llmod@divisor+1,w
  4884     08BA  0470               	iorwf	___llmod@divisor,w
  4885     08BB  1903               	skipnz
  4886     08BC  28FA               	goto	l2469
  4887     08BD  01F9               	clrf	___llmod@counter
  4888     08BE  0AF9               	incf	___llmod@counter,f
  4889     08BF                     l2459:
  4890     08BF  1BF3               	btfsc	___llmod@divisor+3,7
  4891     08C0  28CF               	goto	l2461
  4892     08C1  3001               	movlw	1
  4893     08C2  00F8               	movwf	??___llmod
  4894     08C3                     u3395:
  4895     08C3  1003               	clrc
  4896     08C4  0DF0               	rlf	___llmod@divisor,f
  4897     08C5  0DF1               	rlf	___llmod@divisor+1,f
  4898     08C6  0DF2               	rlf	___llmod@divisor+2,f
  4899     08C7  0DF3               	rlf	___llmod@divisor+3,f
  4900     08C8  0BF8               	decfsz	??___llmod,f
  4901     08C9  28C3               	goto	u3395
  4902     08CA  3001               	movlw	1
  4903     08CB  00FF               	movwf	127
  4904     08CC  087F               	movf	127,w
  4905     08CD  07F9               	addwf	___llmod@counter,f
  4906     08CE  28BF               	goto	l2459
  4907     08CF                     l2461:
  4908     08CF  0873               	movf	___llmod@divisor+3,w
  4909     08D0  0277               	subwf	___llmod@dividend+3,w
  4910     08D1  1D03               	skipz
  4911     08D2  28DD               	goto	u3415
  4912     08D3  0872               	movf	___llmod@divisor+2,w
  4913     08D4  0276               	subwf	___llmod@dividend+2,w
  4914     08D5  1D03               	skipz
  4915     08D6  28DD               	goto	u3415
  4916     08D7  0871               	movf	___llmod@divisor+1,w
  4917     08D8  0275               	subwf	___llmod@dividend+1,w
  4918     08D9  1D03               	skipz
  4919     08DA  28DD               	goto	u3415
  4920     08DB  0870               	movf	___llmod@divisor,w
  4921     08DC  0274               	subwf	___llmod@dividend,w
  4922     08DD                     u3415:
  4923     08DD  1C03               	skipc
  4924     08DE  28ED               	goto	l2465
  4925     08DF  0870               	movf	___llmod@divisor,w
  4926     08E0  02F4               	subwf	___llmod@dividend,f
  4927     08E1  0871               	movf	___llmod@divisor+1,w
  4928     08E2  1C03               	skipc
  4929     08E3  0F71               	incfsz	___llmod@divisor+1,w
  4930     08E4  02F5               	subwf	___llmod@dividend+1,f
  4931     08E5  0872               	movf	___llmod@divisor+2,w
  4932     08E6  1C03               	skipc
  4933     08E7  0F72               	incfsz	___llmod@divisor+2,w
  4934     08E8  02F6               	subwf	___llmod@dividend+2,f
  4935     08E9  0873               	movf	___llmod@divisor+3,w
  4936     08EA  1C03               	skipc
  4937     08EB  0F73               	incfsz	___llmod@divisor+3,w
  4938     08EC  02F7               	subwf	___llmod@dividend+3,f
  4939     08ED                     l2465:
  4940     08ED  3001               	movlw	1
  4941     08EE                     u3425:
  4942     08EE  1003               	clrc
  4943     08EF  0CF3               	rrf	___llmod@divisor+3,f
  4944     08F0  0CF2               	rrf	___llmod@divisor+2,f
  4945     08F1  0CF1               	rrf	___llmod@divisor+1,f
  4946     08F2  0CF0               	rrf	___llmod@divisor,f
  4947     08F3  3EFF               	addlw	-1
  4948     08F4  1D03               	skipz
  4949     08F5  28EE               	goto	u3425
  4950     08F6  3001               	movlw	1
  4951     08F7  02F9               	subwf	___llmod@counter,f
  4952     08F8  1D03               	btfss	3,2
  4953     08F9  28CF               	goto	l2461
  4954     08FA                     l2469:
  4955     08FA  0877               	movf	___llmod@dividend+3,w
  4956     08FB  00F3               	movwf	?___llmod+3
  4957     08FC  0876               	movf	___llmod@dividend+2,w
  4958     08FD  00F2               	movwf	?___llmod+2
  4959     08FE  0875               	movf	___llmod@dividend+1,w
  4960     08FF  00F1               	movwf	?___llmod+1
  4961     0900  0874               	movf	___llmod@dividend,w
  4962     0901  00F0               	movwf	?___llmod
  4963     0902  0008               	return
  4964     0903                     __end_of___llmod:
  4965                           
  4966                           	psect	text16
  4967     09B7                     __ptext16:	
  4968 ;; *************** function ___lldiv *****************
  4969 ;; Defined at:
  4970 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c90\common\__lldiv.c"
  4971 ;; Parameters:    Size  Location     Type
  4972 ;;  divisor         4    0[COMMON] unsigned long 
  4973 ;;  dividend        4    4[COMMON] unsigned long 
  4974 ;; Auto vars:     Size  Location     Type
  4975 ;;  quotient        4    9[COMMON] unsigned long 
  4976 ;;  counter         1   13[COMMON] unsigned char 
  4977 ;; Return value:  Size  Location     Type
  4978 ;;                  4    0[COMMON] unsigned long 
  4979 ;; Registers used:
  4980 ;;		wreg, status,2, status,0, btemp+1
  4981 ;; Tracked objects:
  4982 ;;		On entry : 300/0
  4983 ;;		On exit  : 300/0
  4984 ;;		Unchanged: 300/0
  4985 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4986 ;;      Params:         8       0       0       0       0
  4987 ;;      Locals:         5       0       0       0       0
  4988 ;;      Temps:          1       0       0       0       0
  4989 ;;      Totals:        14       0       0       0       0
  4990 ;;Total ram usage:       14 bytes
  4991 ;; Hardware stack levels used: 1
  4992 ;; This function calls:
  4993 ;;		Nothing
  4994 ;; This function is called by:
  4995 ;;		_sprintf
  4996 ;; This function uses a non-reentrant model
  4997 ;;
  4998                           
  4999     09B7                     ___lldiv:	
  5000                           ;psect for function ___lldiv
  5001                           
  5002                           
  5003                           ;incstack = 0
  5004                           ; Regs used in ___lldiv: [wreg+status,2+status,0+btemp+1]
  5005     09B7  3000               	movlw	0
  5006     09B8  00FC               	movwf	___lldiv@quotient+3
  5007     09B9  3000               	movlw	0
  5008     09BA  00FB               	movwf	___lldiv@quotient+2
  5009     09BB  3000               	movlw	0
  5010     09BC  00FA               	movwf	___lldiv@quotient+1
  5011     09BD  3000               	movlw	0
  5012     09BE  00F9               	movwf	___lldiv@quotient
  5013     09BF  0873               	movf	___lldiv@divisor+3,w
  5014     09C0  0472               	iorwf	___lldiv@divisor+2,w
  5015     09C1  0471               	iorwf	___lldiv@divisor+1,w
  5016     09C2  0470               	iorwf	___lldiv@divisor,w
  5017     09C3  1903               	skipnz
  5018     09C4  2A0C               	goto	l2367
  5019     09C5  01FD               	clrf	___lldiv@counter
  5020     09C6  0AFD               	incf	___lldiv@counter,f
  5021     09C7                     l2353:
  5022     09C7  1BF3               	btfsc	___lldiv@divisor+3,7
  5023     09C8  29D7               	goto	l2355
  5024     09C9  3001               	movlw	1
  5025     09CA  00F8               	movwf	??___lldiv
  5026     09CB                     u3175:
  5027     09CB  1003               	clrc
  5028     09CC  0DF0               	rlf	___lldiv@divisor,f
  5029     09CD  0DF1               	rlf	___lldiv@divisor+1,f
  5030     09CE  0DF2               	rlf	___lldiv@divisor+2,f
  5031     09CF  0DF3               	rlf	___lldiv@divisor+3,f
  5032     09D0  0BF8               	decfsz	??___lldiv,f
  5033     09D1  29CB               	goto	u3175
  5034     09D2  3001               	movlw	1
  5035     09D3  00FF               	movwf	127
  5036     09D4  087F               	movf	127,w
  5037     09D5  07FD               	addwf	___lldiv@counter,f
  5038     09D6  29C7               	goto	l2353
  5039     09D7                     l2355:
  5040     09D7  3001               	movlw	1
  5041     09D8  00F8               	movwf	??___lldiv
  5042     09D9                     u3195:
  5043     09D9  1003               	clrc
  5044     09DA  0DF9               	rlf	___lldiv@quotient,f
  5045     09DB  0DFA               	rlf	___lldiv@quotient+1,f
  5046     09DC  0DFB               	rlf	___lldiv@quotient+2,f
  5047     09DD  0DFC               	rlf	___lldiv@quotient+3,f
  5048     09DE  0BF8               	decfsz	??___lldiv,f
  5049     09DF  29D9               	goto	u3195
  5050     09E0  0873               	movf	___lldiv@divisor+3,w
  5051     09E1  0277               	subwf	___lldiv@dividend+3,w
  5052     09E2  1D03               	skipz
  5053     09E3  29EE               	goto	u3205
  5054     09E4  0872               	movf	___lldiv@divisor+2,w
  5055     09E5  0276               	subwf	___lldiv@dividend+2,w
  5056     09E6  1D03               	skipz
  5057     09E7  29EE               	goto	u3205
  5058     09E8  0871               	movf	___lldiv@divisor+1,w
  5059     09E9  0275               	subwf	___lldiv@dividend+1,w
  5060     09EA  1D03               	skipz
  5061     09EB  29EE               	goto	u3205
  5062     09EC  0870               	movf	___lldiv@divisor,w
  5063     09ED  0274               	subwf	___lldiv@dividend,w
  5064     09EE                     u3205:
  5065     09EE  1C03               	skipc
  5066     09EF  29FF               	goto	l2363
  5067     09F0  0870               	movf	___lldiv@divisor,w
  5068     09F1  02F4               	subwf	___lldiv@dividend,f
  5069     09F2  0871               	movf	___lldiv@divisor+1,w
  5070     09F3  1C03               	skipc
  5071     09F4  0F71               	incfsz	___lldiv@divisor+1,w
  5072     09F5  02F5               	subwf	___lldiv@dividend+1,f
  5073     09F6  0872               	movf	___lldiv@divisor+2,w
  5074     09F7  1C03               	skipc
  5075     09F8  0F72               	incfsz	___lldiv@divisor+2,w
  5076     09F9  02F6               	subwf	___lldiv@dividend+2,f
  5077     09FA  0873               	movf	___lldiv@divisor+3,w
  5078     09FB  1C03               	skipc
  5079     09FC  0F73               	incfsz	___lldiv@divisor+3,w
  5080     09FD  02F7               	subwf	___lldiv@dividend+3,f
  5081     09FE  1479               	bsf	___lldiv@quotient,0
  5082     09FF                     l2363:
  5083     09FF  3001               	movlw	1
  5084     0A00                     u3215:
  5085     0A00  1003               	clrc
  5086     0A01  0CF3               	rrf	___lldiv@divisor+3,f
  5087     0A02  0CF2               	rrf	___lldiv@divisor+2,f
  5088     0A03  0CF1               	rrf	___lldiv@divisor+1,f
  5089     0A04  0CF0               	rrf	___lldiv@divisor,f
  5090     0A05  3EFF               	addlw	-1
  5091     0A06  1D03               	skipz
  5092     0A07  2A00               	goto	u3215
  5093     0A08  3001               	movlw	1
  5094     0A09  02FD               	subwf	___lldiv@counter,f
  5095     0A0A  1D03               	btfss	3,2
  5096     0A0B  29D7               	goto	l2355
  5097     0A0C                     l2367:
  5098     0A0C  087C               	movf	___lldiv@quotient+3,w
  5099     0A0D  00F3               	movwf	?___lldiv+3
  5100     0A0E  087B               	movf	___lldiv@quotient+2,w
  5101     0A0F  00F2               	movwf	?___lldiv+2
  5102     0A10  087A               	movf	___lldiv@quotient+1,w
  5103     0A11  00F1               	movwf	?___lldiv+1
  5104     0A12  0879               	movf	___lldiv@quotient,w
  5105     0A13  00F0               	movwf	?___lldiv
  5106     0A14  0008               	return
  5107     0A15                     __end_of___lldiv:
  5108                           
  5109                           	psect	text17
  5110     0A81                     __ptext17:	
  5111 ;; *************** function ___fttol *****************
  5112 ;; Defined at:
  5113 ;;		line 44 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c90\common\fttol.c"
  5114 ;; Parameters:    Size  Location     Type
  5115 ;;  f1              3   25[BANK0 ] float 
  5116 ;; Auto vars:     Size  Location     Type
  5117 ;;  lval            4   33[BANK0 ] unsigned long 
  5118 ;;  exp1            1   37[BANK0 ] unsigned char 
  5119 ;;  sign1           1   32[BANK0 ] unsigned char 
  5120 ;; Return value:  Size  Location     Type
  5121 ;;                  4   25[BANK0 ] long 
  5122 ;; Registers used:
  5123 ;;		wreg, status,2, status,0, btemp+1
  5124 ;; Tracked objects:
  5125 ;;		On entry : 300/0
  5126 ;;		On exit  : 300/0
  5127 ;;		Unchanged: 0/0
  5128 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5129 ;;      Params:         0       4       0       0       0
  5130 ;;      Locals:         0       6       0       0       0
  5131 ;;      Temps:          0       3       0       0       0
  5132 ;;      Totals:         0      13       0       0       0
  5133 ;;Total ram usage:       13 bytes
  5134 ;; Hardware stack levels used: 1
  5135 ;; This function calls:
  5136 ;;		Nothing
  5137 ;; This function is called by:
  5138 ;;		_sprintf
  5139 ;; This function uses a non-reentrant model
  5140 ;;
  5141                           
  5142     0A81                     ___fttol:	
  5143                           ;psect for function ___fttol
  5144                           
  5145                           
  5146                           ;incstack = 0
  5147                           ; Regs used in ___fttol: [wreg+status,2+status,0+btemp+1]
  5148     0A81  0839               	movf	___fttol@f1,w
  5149     0A82  00BD               	movwf	??___fttol
  5150     0A83  083A               	movf	___fttol@f1+1,w
  5151     0A84  00BE               	movwf	??___fttol+1
  5152     0A85  083B               	movf	___fttol@f1+2,w
  5153     0A86  00BF               	movwf	??___fttol+2
  5154     0A87  1003               	clrc
  5155     0A88  0D3E               	rlf	??___fttol+1,w
  5156     0A89  0D3F               	rlf	??___fttol+2,w
  5157     0A8A  00C5               	movwf	___fttol@exp1
  5158     0A8B  0845               	movf	___fttol@exp1,w
  5159     0A8C  1D03               	btfss	3,2
  5160     0A8D  2A97               	goto	l2413
  5161     0A8E                     l2409:
  5162     0A8E  3000               	movlw	0
  5163     0A8F  00BC               	movwf	?___fttol+3
  5164     0A90  3000               	movlw	0
  5165     0A91  00BB               	movwf	?___fttol+2
  5166     0A92  3000               	movlw	0
  5167     0A93  00BA               	movwf	?___fttol+1
  5168     0A94  3000               	movlw	0
  5169     0A95  00B9               	movwf	?___fttol
  5170     0A96  0008               	return
  5171     0A97                     l2413:
  5172     0A97  0839               	movf	___fttol@f1,w
  5173     0A98  00BD               	movwf	??___fttol
  5174     0A99  083A               	movf	___fttol@f1+1,w
  5175     0A9A  00BE               	movwf	??___fttol+1
  5176     0A9B  083B               	movf	___fttol@f1+2,w
  5177     0A9C  00BF               	movwf	??___fttol+2
  5178     0A9D  3017               	movlw	23
  5179     0A9E                     u3295:
  5180     0A9E  1003               	clrc
  5181     0A9F  0CBF               	rrf	??___fttol+2,f
  5182     0AA0  0CBE               	rrf	??___fttol+1,f
  5183     0AA1  0CBD               	rrf	??___fttol,f
  5184     0AA2  3EFF               	addlw	-1
  5185     0AA3  1D03               	skipz
  5186     0AA4  2A9E               	goto	u3295
  5187     0AA5  083D               	movf	??___fttol,w
  5188     0AA6  00C0               	movwf	___fttol@sign1
  5189     0AA7  17BA               	bsf	___fttol@f1+1,7
  5190     0AA8  30FF               	movlw	255
  5191     0AA9  05B9               	andwf	___fttol@f1,f
  5192     0AAA  30FF               	movlw	255
  5193     0AAB  05BA               	andwf	___fttol@f1+1,f
  5194     0AAC  3000               	movlw	0
  5195     0AAD  05BB               	andwf	___fttol@f1+2,f
  5196     0AAE  0839               	movf	___fttol@f1,w
  5197     0AAF  00C1               	movwf	___fttol@lval
  5198     0AB0  083A               	movf	___fttol@f1+1,w
  5199     0AB1  00C2               	movwf	___fttol@lval+1
  5200     0AB2  083B               	movf	___fttol@f1+2,w
  5201     0AB3  00C3               	movwf	___fttol@lval+2
  5202     0AB4  01C4               	clrf	___fttol@lval+3
  5203     0AB5  308E               	movlw	142
  5204     0AB6  02C5               	subwf	___fttol@exp1,f
  5205     0AB7  1FC5               	btfss	___fttol@exp1,7
  5206     0AB8  2ACE               	goto	l2435
  5207     0AB9  0845               	movf	___fttol@exp1,w
  5208     0ABA  3A80               	xorlw	128
  5209     0ABB  3E8F               	addlw	143
  5210     0ABC  1C03               	btfss	3,0
  5211     0ABD  2A8E               	goto	l2409
  5212     0ABE                     l2431:
  5213     0ABE  3001               	movlw	1
  5214     0ABF                     u3325:
  5215     0ABF  1003               	clrc
  5216     0AC0  0CC4               	rrf	___fttol@lval+3,f
  5217     0AC1  0CC3               	rrf	___fttol@lval+2,f
  5218     0AC2  0CC2               	rrf	___fttol@lval+1,f
  5219     0AC3  0CC1               	rrf	___fttol@lval,f
  5220     0AC4  3EFF               	addlw	-1
  5221     0AC5  1D03               	skipz
  5222     0AC6  2ABF               	goto	u3325
  5223     0AC7  3001               	movlw	1
  5224     0AC8  00FF               	movwf	127
  5225     0AC9  087F               	movf	127,w
  5226     0ACA  07C5               	addwf	___fttol@exp1,f
  5227     0ACB  1903               	btfsc	3,2
  5228     0ACC  2AE1               	goto	l2443
  5229     0ACD  2ABE               	goto	l2431
  5230     0ACE                     l2435:
  5231     0ACE  3018               	movlw	24
  5232     0ACF  0245               	subwf	___fttol@exp1,w
  5233     0AD0  1803               	btfsc	3,0
  5234     0AD1  2A8E               	goto	l2409
  5235     0AD2                     l614:
  5236     0AD2  0845               	movf	___fttol@exp1,w
  5237     0AD3  1903               	btfsc	3,2
  5238     0AD4  2AE1               	goto	l2443
  5239     0AD5  3001               	movlw	1
  5240     0AD6  00BD               	movwf	??___fttol
  5241     0AD7                     u3355:
  5242     0AD7  1003               	clrc
  5243     0AD8  0DC1               	rlf	___fttol@lval,f
  5244     0AD9  0DC2               	rlf	___fttol@lval+1,f
  5245     0ADA  0DC3               	rlf	___fttol@lval+2,f
  5246     0ADB  0DC4               	rlf	___fttol@lval+3,f
  5247     0ADC  0BBD               	decfsz	??___fttol,f
  5248     0ADD  2AD7               	goto	u3355
  5249     0ADE  3001               	movlw	1
  5250     0ADF  02C5               	subwf	___fttol@exp1,f
  5251     0AE0  2AD2               	goto	l614
  5252     0AE1                     l2443:
  5253     0AE1  0840               	movf	___fttol@sign1,w
  5254     0AE2  1903               	btfsc	3,2
  5255     0AE3  2AEF               	goto	l2447
  5256     0AE4  09C1               	comf	___fttol@lval,f
  5257     0AE5  09C2               	comf	___fttol@lval+1,f
  5258     0AE6  09C3               	comf	___fttol@lval+2,f
  5259     0AE7  09C4               	comf	___fttol@lval+3,f
  5260     0AE8  0AC1               	incf	___fttol@lval,f
  5261     0AE9  1903               	skipnz
  5262     0AEA  0AC2               	incf	___fttol@lval+1,f
  5263     0AEB  1903               	skipnz
  5264     0AEC  0AC3               	incf	___fttol@lval+2,f
  5265     0AED  1903               	skipnz
  5266     0AEE  0AC4               	incf	___fttol@lval+3,f
  5267     0AEF                     l2447:
  5268     0AEF  0844               	movf	___fttol@lval+3,w
  5269     0AF0  00BC               	movwf	?___fttol+3
  5270     0AF1  0843               	movf	___fttol@lval+2,w
  5271     0AF2  00BB               	movwf	?___fttol+2
  5272     0AF3  0842               	movf	___fttol@lval+1,w
  5273     0AF4  00BA               	movwf	?___fttol+1
  5274     0AF5  0841               	movf	___fttol@lval,w
  5275     0AF6  00B9               	movwf	?___fttol
  5276     0AF7  0008               	return
  5277     0AF8                     __end_of___fttol:
  5278                           
  5279                           	psect	text18
  5280     089A                     __ptext18:	
  5281 ;; *************** function ___ftsub *****************
  5282 ;; Defined at:
  5283 ;;		line 17 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c90\common\ftsub.c"
  5284 ;; Parameters:    Size  Location     Type
  5285 ;;  f2              3   40[BANK0 ] float 
  5286 ;;  f1              3   43[BANK0 ] float 
  5287 ;; Auto vars:     Size  Location     Type
  5288 ;;		None
  5289 ;; Return value:  Size  Location     Type
  5290 ;;                  3   40[BANK0 ] float 
  5291 ;; Registers used:
  5292 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  5293 ;; Tracked objects:
  5294 ;;		On entry : 300/0
  5295 ;;		On exit  : 300/0
  5296 ;;		Unchanged: 0/0
  5297 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5298 ;;      Params:         0       6       0       0       0
  5299 ;;      Locals:         0       0       0       0       0
  5300 ;;      Temps:          0       0       0       0       0
  5301 ;;      Totals:         0       6       0       0       0
  5302 ;;Total ram usage:        6 bytes
  5303 ;; Hardware stack levels used: 1
  5304 ;; Hardware stack levels required when called: 2
  5305 ;; This function calls:
  5306 ;;		___ftadd
  5307 ;; This function is called by:
  5308 ;;		_sprintf
  5309 ;; This function uses a non-reentrant model
  5310 ;;
  5311                           
  5312     089A                     ___ftsub:	
  5313                           ;psect for function ___ftsub
  5314                           
  5315                           
  5316                           ;incstack = 0
  5317                           ; Regs used in ___ftsub: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  5318     089A  084A               	movf	___ftsub@f2+2,w
  5319     089B  0449               	iorwf	___ftsub@f2+1,w
  5320     089C  0448               	iorwf	___ftsub@f2,w
  5321     089D  1903               	skipnz
  5322     089E  28A1               	goto	l2403
  5323     089F  3080               	movlw	128
  5324     08A0  06CA               	xorwf	___ftsub@f2+2,f
  5325     08A1                     l2403:
  5326     08A1  084B               	movf	___ftsub@f1,w
  5327     08A2  00BC               	movwf	___ftadd@f1
  5328     08A3  084C               	movf	___ftsub@f1+1,w
  5329     08A4  00BD               	movwf	___ftadd@f1+1
  5330     08A5  084D               	movf	___ftsub@f1+2,w
  5331     08A6  00BE               	movwf	___ftadd@f1+2
  5332     08A7  0848               	movf	___ftsub@f2,w
  5333     08A8  00BF               	movwf	___ftadd@f2
  5334     08A9  0849               	movf	___ftsub@f2+1,w
  5335     08AA  00C0               	movwf	___ftadd@f2+1
  5336     08AB  084A               	movf	___ftsub@f2+2,w
  5337     08AC  00C1               	movwf	___ftadd@f2+2
  5338     08AD  120A  158A  243F   	fcall	___ftadd
  5339     08B0  083C               	movf	?___ftadd,w
  5340     08B1  00C8               	movwf	?___ftsub
  5341     08B2  083D               	movf	?___ftadd+1,w
  5342     08B3  00C9               	movwf	?___ftsub+1
  5343     08B4  083E               	movf	?___ftadd+2,w
  5344     08B5  00CA               	movwf	?___ftsub+2
  5345     08B6  0008               	return
  5346     08B7                     __end_of___ftsub:
  5347                           
  5348                           	psect	text19
  5349     0C3F                     __ptext19:	
  5350 ;; *************** function ___ftadd *****************
  5351 ;; Defined at:
  5352 ;;		line 86 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c90\common\ftadd.c"
  5353 ;; Parameters:    Size  Location     Type
  5354 ;;  f1              3   28[BANK0 ] float 
  5355 ;;  f2              3   31[BANK0 ] float 
  5356 ;; Auto vars:     Size  Location     Type
  5357 ;;  exp1            1   39[BANK0 ] unsigned char 
  5358 ;;  exp2            1   38[BANK0 ] unsigned char 
  5359 ;;  sign            1   37[BANK0 ] unsigned char 
  5360 ;; Return value:  Size  Location     Type
  5361 ;;                  3   28[BANK0 ] float 
  5362 ;; Registers used:
  5363 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  5364 ;; Tracked objects:
  5365 ;;		On entry : 300/0
  5366 ;;		On exit  : 300/0
  5367 ;;		Unchanged: 0/0
  5368 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5369 ;;      Params:         0       6       0       0       0
  5370 ;;      Locals:         0       3       0       0       0
  5371 ;;      Temps:          0       3       0       0       0
  5372 ;;      Totals:         0      12       0       0       0
  5373 ;;Total ram usage:       12 bytes
  5374 ;; Hardware stack levels used: 1
  5375 ;; Hardware stack levels required when called: 1
  5376 ;; This function calls:
  5377 ;;		___ftpack
  5378 ;; This function is called by:
  5379 ;;		_sprintf
  5380 ;;		___ftsub
  5381 ;; This function uses a non-reentrant model
  5382 ;;
  5383                           
  5384     0C3F                     ___ftadd:	
  5385                           ;psect for function ___ftadd
  5386                           
  5387                           
  5388                           ;incstack = 0
  5389                           ; Regs used in ___ftadd: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  5390     0C3F  083C               	movf	___ftadd@f1,w
  5391     0C40  00C2               	movwf	??___ftadd
  5392     0C41  083D               	movf	___ftadd@f1+1,w
  5393     0C42  00C3               	movwf	??___ftadd+1
  5394     0C43  083E               	movf	___ftadd@f1+2,w
  5395     0C44  00C4               	movwf	??___ftadd+2
  5396     0C45  1003               	clrc
  5397     0C46  0D43               	rlf	??___ftadd+1,w
  5398     0C47  0D44               	rlf	??___ftadd+2,w
  5399     0C48  00C7               	movwf	___ftadd@exp1
  5400     0C49  083F               	movf	___ftadd@f2,w
  5401     0C4A  00C2               	movwf	??___ftadd
  5402     0C4B  0840               	movf	___ftadd@f2+1,w
  5403     0C4C  00C3               	movwf	??___ftadd+1
  5404     0C4D  0841               	movf	___ftadd@f2+2,w
  5405     0C4E  00C4               	movwf	??___ftadd+2
  5406     0C4F  1003               	clrc
  5407     0C50  0D43               	rlf	??___ftadd+1,w
  5408     0C51  0D44               	rlf	??___ftadd+2,w
  5409     0C52  00C6               	movwf	___ftadd@exp2
  5410     0C53  0847               	movf	___ftadd@exp1,w
  5411     0C54  1903               	btfsc	3,2
  5412     0C55  2C62               	goto	l1953
  5413     0C56  0846               	movf	___ftadd@exp2,w
  5414     0C57  0247               	subwf	___ftadd@exp1,w
  5415     0C58  1803               	skipnc
  5416     0C59  2C69               	goto	l1957
  5417     0C5A  0846               	movf	___ftadd@exp2,w
  5418     0C5B  00C2               	movwf	??___ftadd
  5419     0C5C  0847               	movf	___ftadd@exp1,w
  5420     0C5D  02C2               	subwf	??___ftadd,f
  5421     0C5E  3019               	movlw	25
  5422     0C5F  0242               	subwf	??___ftadd,w
  5423     0C60  1C03               	skipc
  5424     0C61  2C69               	goto	l1957
  5425     0C62                     l1953:
  5426     0C62  083F               	movf	___ftadd@f2,w
  5427     0C63  00BC               	movwf	?___ftadd
  5428     0C64  0840               	movf	___ftadd@f2+1,w
  5429     0C65  00BD               	movwf	?___ftadd+1
  5430     0C66  0841               	movf	___ftadd@f2+2,w
  5431     0C67  00BE               	movwf	?___ftadd+2
  5432     0C68  0008               	return
  5433     0C69                     l1957:
  5434     0C69  0846               	movf	___ftadd@exp2,w
  5435     0C6A  1903               	btfsc	3,2
  5436     0C6B  0008               	return
  5437     0C6C  0847               	movf	___ftadd@exp1,w
  5438     0C6D  0246               	subwf	___ftadd@exp2,w
  5439     0C6E  1803               	skipnc
  5440     0C6F  2C78               	goto	l1963
  5441     0C70  0847               	movf	___ftadd@exp1,w
  5442     0C71  00C2               	movwf	??___ftadd
  5443     0C72  0846               	movf	___ftadd@exp2,w
  5444     0C73  02C2               	subwf	??___ftadd,f
  5445     0C74  3019               	movlw	25
  5446     0C75  0242               	subwf	??___ftadd,w
  5447     0C76  1803               	btfsc	3,0
  5448     0C77  0008               	return
  5449     0C78                     l1963:
  5450     0C78  3006               	movlw	6
  5451     0C79  00C5               	movwf	___ftadd@sign
  5452     0C7A  1BBE               	btfsc	___ftadd@f1+2,7
  5453     0C7B  17C5               	bsf	___ftadd@sign,7
  5454     0C7C  1BC1               	btfsc	___ftadd@f2+2,7
  5455     0C7D  1745               	bsf	___ftadd@sign,6
  5456     0C7E  17BD               	bsf	___ftadd@f1+1,7
  5457     0C7F  30FF               	movlw	255
  5458     0C80  05BC               	andwf	___ftadd@f1,f
  5459     0C81  30FF               	movlw	255
  5460     0C82  05BD               	andwf	___ftadd@f1+1,f
  5461     0C83  3000               	movlw	0
  5462     0C84  05BE               	andwf	___ftadd@f1+2,f
  5463     0C85  17C0               	bsf	___ftadd@f2+1,7
  5464     0C86  30FF               	movlw	255
  5465     0C87  05BF               	andwf	___ftadd@f2,f
  5466     0C88  30FF               	movlw	255
  5467     0C89  05C0               	andwf	___ftadd@f2+1,f
  5468     0C8A  3000               	movlw	0
  5469     0C8B  05C1               	andwf	___ftadd@f2+2,f
  5470     0C8C  0846               	movf	___ftadd@exp2,w
  5471     0C8D  0247               	subwf	___ftadd@exp1,w
  5472     0C8E  1803               	skipnc
  5473     0C8F  2CB6               	goto	l1987
  5474     0C90                     l1975:
  5475     0C90  3001               	movlw	1
  5476     0C91                     u2435:
  5477     0C91  1003               	clrc
  5478     0C92  0DBF               	rlf	___ftadd@f2,f
  5479     0C93  0DC0               	rlf	___ftadd@f2+1,f
  5480     0C94  0DC1               	rlf	___ftadd@f2+2,f
  5481     0C95  3EFF               	addlw	-1
  5482     0C96  1D03               	skipz
  5483     0C97  2C91               	goto	u2435
  5484     0C98  3001               	movlw	1
  5485     0C99  02C6               	subwf	___ftadd@exp2,f
  5486     0C9A  0846               	movf	___ftadd@exp2,w
  5487     0C9B  0647               	xorwf	___ftadd@exp1,w
  5488     0C9C  1903               	skipnz
  5489     0C9D  2CB1               	goto	l1985
  5490     0C9E  3001               	movlw	1
  5491     0C9F  02C5               	subwf	___ftadd@sign,f
  5492     0CA0  0845               	movf	___ftadd@sign,w
  5493     0CA1  3907               	andlw	7
  5494     0CA2  1903               	btfsc	3,2
  5495     0CA3  2CB1               	goto	l1985
  5496     0CA4  2C90               	goto	l1975
  5497     0CA5                     l1981:
  5498     0CA5  3001               	movlw	1
  5499     0CA6                     u2465:
  5500     0CA6  1003               	clrc
  5501     0CA7  0CBE               	rrf	___ftadd@f1+2,f
  5502     0CA8  0CBD               	rrf	___ftadd@f1+1,f
  5503     0CA9  0CBC               	rrf	___ftadd@f1,f
  5504     0CAA  3EFF               	addlw	-1
  5505     0CAB  1D03               	skipz
  5506     0CAC  2CA6               	goto	u2465
  5507     0CAD  3001               	movlw	1
  5508     0CAE  00FF               	movwf	127
  5509     0CAF  087F               	movf	127,w
  5510     0CB0  07C7               	addwf	___ftadd@exp1,f
  5511     0CB1                     l1985:
  5512     0CB1  0847               	movf	___ftadd@exp1,w
  5513     0CB2  0646               	xorwf	___ftadd@exp2,w
  5514     0CB3  1903               	btfsc	3,2
  5515     0CB4  2CDF               	goto	l537
  5516     0CB5  2CA5               	goto	l1981
  5517     0CB6                     l1987:
  5518     0CB6  0847               	movf	___ftadd@exp1,w
  5519     0CB7  0246               	subwf	___ftadd@exp2,w
  5520     0CB8  1803               	skipnc
  5521     0CB9  2CDF               	goto	l537
  5522     0CBA                     l1989:
  5523     0CBA  3001               	movlw	1
  5524     0CBB                     u2495:
  5525     0CBB  1003               	clrc
  5526     0CBC  0DBC               	rlf	___ftadd@f1,f
  5527     0CBD  0DBD               	rlf	___ftadd@f1+1,f
  5528     0CBE  0DBE               	rlf	___ftadd@f1+2,f
  5529     0CBF  3EFF               	addlw	-1
  5530     0CC0  1D03               	skipz
  5531     0CC1  2CBB               	goto	u2495
  5532     0CC2  3001               	movlw	1
  5533     0CC3  02C7               	subwf	___ftadd@exp1,f
  5534     0CC4  0846               	movf	___ftadd@exp2,w
  5535     0CC5  0647               	xorwf	___ftadd@exp1,w
  5536     0CC6  1903               	skipnz
  5537     0CC7  2CDB               	goto	l1999
  5538     0CC8  3001               	movlw	1
  5539     0CC9  02C5               	subwf	___ftadd@sign,f
  5540     0CCA  0845               	movf	___ftadd@sign,w
  5541     0CCB  3907               	andlw	7
  5542     0CCC  1903               	btfsc	3,2
  5543     0CCD  2CDB               	goto	l1999
  5544     0CCE  2CBA               	goto	l1989
  5545     0CCF                     l1995:
  5546     0CCF  3001               	movlw	1
  5547     0CD0                     u2525:
  5548     0CD0  1003               	clrc
  5549     0CD1  0CC1               	rrf	___ftadd@f2+2,f
  5550     0CD2  0CC0               	rrf	___ftadd@f2+1,f
  5551     0CD3  0CBF               	rrf	___ftadd@f2,f
  5552     0CD4  3EFF               	addlw	-1
  5553     0CD5  1D03               	skipz
  5554     0CD6  2CD0               	goto	u2525
  5555     0CD7  3001               	movlw	1
  5556     0CD8  00FF               	movwf	127
  5557     0CD9  087F               	movf	127,w
  5558     0CDA  07C6               	addwf	___ftadd@exp2,f
  5559     0CDB                     l1999:
  5560     0CDB  0847               	movf	___ftadd@exp1,w
  5561     0CDC  0646               	xorwf	___ftadd@exp2,w
  5562     0CDD  1D03               	skipz
  5563     0CDE  2CCF               	goto	l1995
  5564     0CDF                     l537:
  5565     0CDF  1FC5               	btfss	___ftadd@sign,7
  5566     0CE0  2CF1               	goto	l2003
  5567     0CE1  30FF               	movlw	255
  5568     0CE2  06BC               	xorwf	___ftadd@f1,f
  5569     0CE3  30FF               	movlw	255
  5570     0CE4  06BD               	xorwf	___ftadd@f1+1,f
  5571     0CE5  30FF               	movlw	255
  5572     0CE6  06BE               	xorwf	___ftadd@f1+2,f
  5573     0CE7  3001               	movlw	1
  5574     0CE8  07BC               	addwf	___ftadd@f1,f
  5575     0CE9  3000               	movlw	0
  5576     0CEA  1803               	skipnc
  5577     0CEB  3001               	movlw	1
  5578     0CEC  07BD               	addwf	___ftadd@f1+1,f
  5579     0CED  3000               	movlw	0
  5580     0CEE  1803               	skipnc
  5581     0CEF  3001               	movlw	1
  5582     0CF0  07BE               	addwf	___ftadd@f1+2,f
  5583     0CF1                     l2003:
  5584     0CF1  1F45               	btfss	___ftadd@sign,6
  5585     0CF2  2D03               	goto	l2007
  5586     0CF3  30FF               	movlw	255
  5587     0CF4  06BF               	xorwf	___ftadd@f2,f
  5588     0CF5  30FF               	movlw	255
  5589     0CF6  06C0               	xorwf	___ftadd@f2+1,f
  5590     0CF7  30FF               	movlw	255
  5591     0CF8  06C1               	xorwf	___ftadd@f2+2,f
  5592     0CF9  3001               	movlw	1
  5593     0CFA  07BF               	addwf	___ftadd@f2,f
  5594     0CFB  3000               	movlw	0
  5595     0CFC  1803               	skipnc
  5596     0CFD  3001               	movlw	1
  5597     0CFE  07C0               	addwf	___ftadd@f2+1,f
  5598     0CFF  3000               	movlw	0
  5599     0D00  1803               	skipnc
  5600     0D01  3001               	movlw	1
  5601     0D02  07C1               	addwf	___ftadd@f2+2,f
  5602     0D03                     l2007:
  5603     0D03  01C5               	clrf	___ftadd@sign
  5604     0D04  083C               	movf	___ftadd@f1,w
  5605     0D05  07BF               	addwf	___ftadd@f2,f
  5606     0D06  083D               	movf	___ftadd@f1+1,w
  5607     0D07  1103               	clrz
  5608     0D08  1803               	skipnc
  5609     0D09  0A3D               	incf	___ftadd@f1+1,w
  5610     0D0A  1D03               	btfss	3,2
  5611     0D0B  07C0               	addwf	___ftadd@f2+1,f
  5612     0D0C  083E               	movf	___ftadd@f1+2,w
  5613     0D0D  1103               	clrz
  5614     0D0E  1803               	skipnc
  5615     0D0F  0A3E               	incf	___ftadd@f1+2,w
  5616     0D10  1D03               	btfss	3,2
  5617     0D11  07C1               	addwf	___ftadd@f2+2,f
  5618     0D12  1FC1               	btfss	___ftadd@f2+2,7
  5619     0D13  2D26               	goto	l2017
  5620     0D14  30FF               	movlw	255
  5621     0D15  06BF               	xorwf	___ftadd@f2,f
  5622     0D16  30FF               	movlw	255
  5623     0D17  06C0               	xorwf	___ftadd@f2+1,f
  5624     0D18  30FF               	movlw	255
  5625     0D19  06C1               	xorwf	___ftadd@f2+2,f
  5626     0D1A  3001               	movlw	1
  5627     0D1B  07BF               	addwf	___ftadd@f2,f
  5628     0D1C  3000               	movlw	0
  5629     0D1D  1803               	skipnc
  5630     0D1E  3001               	movlw	1
  5631     0D1F  07C0               	addwf	___ftadd@f2+1,f
  5632     0D20  3000               	movlw	0
  5633     0D21  1803               	skipnc
  5634     0D22  3001               	movlw	1
  5635     0D23  07C1               	addwf	___ftadd@f2+2,f
  5636     0D24  01C5               	clrf	___ftadd@sign
  5637     0D25  0AC5               	incf	___ftadd@sign,f
  5638     0D26                     l2017:
  5639     0D26  083F               	movf	___ftadd@f2,w
  5640     0D27  00F0               	movwf	___ftpack@arg
  5641     0D28  0840               	movf	___ftadd@f2+1,w
  5642     0D29  00F1               	movwf	___ftpack@arg+1
  5643     0D2A  0841               	movf	___ftadd@f2+2,w
  5644     0D2B  00F2               	movwf	___ftpack@arg+2
  5645     0D2C  0847               	movf	___ftadd@exp1,w
  5646     0D2D  00F3               	movwf	___ftpack@exp
  5647     0D2E  0845               	movf	___ftadd@sign,w
  5648     0D2F  00F4               	movwf	___ftpack@sign
  5649     0D30  120A  158A  2215   	fcall	___ftpack
  5650     0D33  0870               	movf	?___ftpack,w
  5651     0D34  1283               	bcf	3,5	;RP0=0, select bank0
  5652     0D35  00BC               	movwf	?___ftadd
  5653     0D36  0871               	movf	?___ftpack+1,w
  5654     0D37  00BD               	movwf	?___ftadd+1
  5655     0D38  0872               	movf	?___ftpack+2,w
  5656     0D39  00BE               	movwf	?___ftadd+2
  5657     0D3A  0008               	return
  5658     0D3B                     __end_of___ftadd:
  5659                           
  5660                           	psect	text20
  5661     1605                     __ptext20:	
  5662 ;; *************** function ___ftneg *****************
  5663 ;; Defined at:
  5664 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c90\common\ftneg.c"
  5665 ;; Parameters:    Size  Location     Type
  5666 ;;  f1              3    0[COMMON] float 
  5667 ;; Auto vars:     Size  Location     Type
  5668 ;;		None
  5669 ;; Return value:  Size  Location     Type
  5670 ;;                  3    0[COMMON] float 
  5671 ;; Registers used:
  5672 ;;		wreg
  5673 ;; Tracked objects:
  5674 ;;		On entry : 300/0
  5675 ;;		On exit  : 300/0
  5676 ;;		Unchanged: 300/0
  5677 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5678 ;;      Params:         3       0       0       0       0
  5679 ;;      Locals:         0       0       0       0       0
  5680 ;;      Temps:          0       0       0       0       0
  5681 ;;      Totals:         3       0       0       0       0
  5682 ;;Total ram usage:        3 bytes
  5683 ;; Hardware stack levels used: 1
  5684 ;; This function calls:
  5685 ;;		Nothing
  5686 ;; This function is called by:
  5687 ;;		_sprintf
  5688 ;; This function uses a non-reentrant model
  5689 ;;
  5690                           
  5691     1605                     ___ftneg:	
  5692                           ;psect for function ___ftneg
  5693                           
  5694                           
  5695                           ;incstack = 0
  5696                           ; Regs used in ___ftneg: [wreg]
  5697     1605  0872               	movf	___ftneg@f1+2,w
  5698     1606  0471               	iorwf	___ftneg@f1+1,w
  5699     1607  0470               	iorwf	___ftneg@f1,w
  5700     1608  1903               	skipnz
  5701     1609  0008               	return
  5702     160A  3080               	movlw	128
  5703     160B  06F2               	xorwf	___ftneg@f1+2,f
  5704     160C  0008               	return
  5705     160D                     __end_of___ftneg:
  5706                           
  5707                           	psect	text21
  5708     170D                     __ptext21:	
  5709 ;; *************** function ___ftge *****************
  5710 ;; Defined at:
  5711 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c90\common\ftge.c"
  5712 ;; Parameters:    Size  Location     Type
  5713 ;;  ff1             3    0[COMMON] float 
  5714 ;;  ff2             3    3[COMMON] float 
  5715 ;; Auto vars:     Size  Location     Type
  5716 ;;		None
  5717 ;; Return value:  Size  Location     Type
  5718 ;;		None               void
  5719 ;; Registers used:
  5720 ;;		wreg, status,2, status,0
  5721 ;; Tracked objects:
  5722 ;;		On entry : 300/0
  5723 ;;		On exit  : 300/0
  5724 ;;		Unchanged: 300/0
  5725 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5726 ;;      Params:         6       0       0       0       0
  5727 ;;      Locals:         0       0       0       0       0
  5728 ;;      Temps:          0       0       0       0       0
  5729 ;;      Totals:         6       0       0       0       0
  5730 ;;Total ram usage:        6 bytes
  5731 ;; Hardware stack levels used: 1
  5732 ;; This function calls:
  5733 ;;		Nothing
  5734 ;; This function is called by:
  5735 ;;		_sprintf
  5736 ;; This function uses a non-reentrant model
  5737 ;;
  5738                           
  5739     170D                     ___ftge:	
  5740                           ;psect for function ___ftge
  5741                           
  5742                           
  5743                           ;incstack = 0
  5744                           ; Regs used in ___ftge: [wreg+status,2+status,0]
  5745     170D  1FF2               	btfss	___ftge@ff1+2,7
  5746     170E  2F1C               	goto	l2375
  5747     170F  0870               	movf	___ftge@ff1,w
  5748     1710  3C00               	sublw	0
  5749     1711  00F0               	movwf	___ftge@ff1
  5750     1712  0871               	movf	___ftge@ff1+1,w
  5751     1713  1C03               	skipc
  5752     1714  0F71               	incfsz	___ftge@ff1+1,w
  5753     1715  3C00               	sublw	0
  5754     1716  00F1               	movwf	___ftge@ff1+1
  5755     1717  0872               	movf	___ftge@ff1+2,w
  5756     1718  1C03               	skipc
  5757     1719  0F72               	incfsz	___ftge@ff1+2,w
  5758     171A  3C80               	sublw	128
  5759     171B  00F2               	movwf	___ftge@ff1+2
  5760     171C                     l2375:
  5761     171C  1FF5               	btfss	___ftge@ff2+2,7
  5762     171D  2F2B               	goto	l2379
  5763     171E  0873               	movf	___ftge@ff2,w
  5764     171F  3C00               	sublw	0
  5765     1720  00F3               	movwf	___ftge@ff2
  5766     1721  0874               	movf	___ftge@ff2+1,w
  5767     1722  1C03               	skipc
  5768     1723  0F74               	incfsz	___ftge@ff2+1,w
  5769     1724  3C00               	sublw	0
  5770     1725  00F4               	movwf	___ftge@ff2+1
  5771     1726  0875               	movf	___ftge@ff2+2,w
  5772     1727  1C03               	skipc
  5773     1728  0F75               	incfsz	___ftge@ff2+2,w
  5774     1729  3C80               	sublw	128
  5775     172A  00F5               	movwf	___ftge@ff2+2
  5776     172B                     l2379:
  5777     172B  3080               	movlw	128
  5778     172C  06F2               	xorwf	___ftge@ff1+2,f
  5779     172D  3080               	movlw	128
  5780     172E  06F5               	xorwf	___ftge@ff2+2,f
  5781     172F  0875               	movf	___ftge@ff2+2,w
  5782     1730  0272               	subwf	___ftge@ff1+2,w
  5783     1731  1D03               	skipz
  5784     1732  0008               	return
  5785     1733  0874               	movf	___ftge@ff2+1,w
  5786     1734  0271               	subwf	___ftge@ff1+1,w
  5787     1735  1D03               	skipz
  5788     1736  0008               	return
  5789     1737  0873               	movf	___ftge@ff2,w
  5790     1738  0270               	subwf	___ftge@ff1,w
  5791     1739  0008               	return
  5792     173A                     __end_of___ftge:
  5793                           
  5794                           	psect	text22
  5795     1662                     __ptext22:	
  5796 ;; *************** function ___awtoft *****************
  5797 ;; Defined at:
  5798 ;;		line 32 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c90\common\awtoft.c"
  5799 ;; Parameters:    Size  Location     Type
  5800 ;;  c               2    8[COMMON] int 
  5801 ;; Auto vars:     Size  Location     Type
  5802 ;;  sign            1   11[COMMON] unsigned char 
  5803 ;; Return value:  Size  Location     Type
  5804 ;;                  3    8[COMMON] float 
  5805 ;; Registers used:
  5806 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  5807 ;; Tracked objects:
  5808 ;;		On entry : 300/100
  5809 ;;		On exit  : 200/0
  5810 ;;		Unchanged: 200/0
  5811 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5812 ;;      Params:         3       0       0       0       0
  5813 ;;      Locals:         1       0       0       0       0
  5814 ;;      Temps:          0       0       0       0       0
  5815 ;;      Totals:         4       0       0       0       0
  5816 ;;Total ram usage:        4 bytes
  5817 ;; Hardware stack levels used: 1
  5818 ;; Hardware stack levels required when called: 1
  5819 ;; This function calls:
  5820 ;;		___ftpack
  5821 ;; This function is called by:
  5822 ;;		_main
  5823 ;; This function uses a non-reentrant model
  5824 ;;
  5825                           
  5826     1662                     ___awtoft:	
  5827                           ;psect for function ___awtoft
  5828                           
  5829                           
  5830                           ;incstack = 0
  5831                           ; Regs used in ___awtoft: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  5832     1662  01FB               	clrf	___awtoft@sign
  5833     1663  1FF9               	btfss	___awtoft@c+1,7
  5834     1664  2E6C               	goto	l2737
  5835     1665  09F8               	comf	___awtoft@c,f
  5836     1666  09F9               	comf	___awtoft@c+1,f
  5837     1667  0AF8               	incf	___awtoft@c,f
  5838     1668  1903               	skipnz
  5839     1669  0AF9               	incf	___awtoft@c+1,f
  5840     166A  01FB               	clrf	___awtoft@sign
  5841     166B  0AFB               	incf	___awtoft@sign,f
  5842     166C                     l2737:
  5843     166C  0878               	movf	___awtoft@c,w
  5844     166D  00F0               	movwf	___ftpack@arg
  5845     166E  0879               	movf	___awtoft@c+1,w
  5846     166F  00F1               	movwf	___ftpack@arg+1
  5847     1670  01F2               	clrf	___ftpack@arg+2
  5848     1671  308E               	movlw	142
  5849     1672  00F3               	movwf	___ftpack@exp
  5850     1673  087B               	movf	___awtoft@sign,w
  5851     1674  00F4               	movwf	___ftpack@sign
  5852     1675  120A  158A  2215   	fcall	___ftpack
  5853     1678  0870               	movf	?___ftpack,w
  5854     1679  00F8               	movwf	?___awtoft
  5855     167A  0871               	movf	?___ftpack+1,w
  5856     167B  00F9               	movwf	?___awtoft+1
  5857     167C  0872               	movf	?___ftpack+2,w
  5858     167D  00FA               	movwf	?___awtoft+2
  5859     167E  0008               	return
  5860     167F                     __end_of___awtoft:
  5861                           
  5862                           	psect	text23
  5863     0A15                     __ptext23:	
  5864 ;; *************** function ___ftpack *****************
  5865 ;; Defined at:
  5866 ;;		line 62 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c90\common\float.c"
  5867 ;; Parameters:    Size  Location     Type
  5868 ;;  arg             3    0[COMMON] unsigned um
  5869 ;;  exp             1    3[COMMON] unsigned char 
  5870 ;;  sign            1    4[COMMON] unsigned char 
  5871 ;; Auto vars:     Size  Location     Type
  5872 ;;		None
  5873 ;; Return value:  Size  Location     Type
  5874 ;;                  3    0[COMMON] float 
  5875 ;; Registers used:
  5876 ;;		wreg, status,2, status,0, btemp+1
  5877 ;; Tracked objects:
  5878 ;;		On entry : 200/0
  5879 ;;		On exit  : 200/0
  5880 ;;		Unchanged: 200/0
  5881 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5882 ;;      Params:         5       0       0       0       0
  5883 ;;      Locals:         0       0       0       0       0
  5884 ;;      Temps:          3       0       0       0       0
  5885 ;;      Totals:         8       0       0       0       0
  5886 ;;Total ram usage:        8 bytes
  5887 ;; Hardware stack levels used: 1
  5888 ;; This function calls:
  5889 ;;		Nothing
  5890 ;; This function is called by:
  5891 ;;		___awtoft
  5892 ;;		___ftadd
  5893 ;;		___ftmul
  5894 ;;		___lltoft
  5895 ;; This function uses a non-reentrant model
  5896 ;;
  5897                           
  5898     0A15                     ___ftpack:	
  5899                           ;psect for function ___ftpack
  5900                           
  5901                           
  5902                           ;incstack = 0
  5903                           ; Regs used in ___ftpack: [wreg+status,2+status,0+btemp+1]
  5904     0A15  0873               	movf	___ftpack@exp,w
  5905     0A16  1903               	btfsc	3,2
  5906     0A17  2A1D               	goto	l1807
  5907     0A18  0872               	movf	___ftpack@arg+2,w
  5908     0A19  0471               	iorwf	___ftpack@arg+1,w
  5909     0A1A  0470               	iorwf	___ftpack@arg,w
  5910     0A1B  1D03               	skipz
  5911     0A1C  2A30               	goto	l1815
  5912     0A1D                     l1807:
  5913     0A1D  3000               	movlw	0
  5914     0A1E  00F0               	movwf	?___ftpack
  5915     0A1F  3000               	movlw	0
  5916     0A20  00F1               	movwf	?___ftpack+1
  5917     0A21  3000               	movlw	0
  5918     0A22  00F2               	movwf	?___ftpack+2
  5919     0A23  0008               	return
  5920     0A24                     l1811:
  5921     0A24  3001               	movlw	1
  5922     0A25  00FF               	movwf	127
  5923     0A26  087F               	movf	127,w
  5924     0A27  07F3               	addwf	___ftpack@exp,f
  5925     0A28  3001               	movlw	1
  5926     0A29                     u1995:
  5927     0A29  1003               	clrc
  5928     0A2A  0CF2               	rrf	___ftpack@arg+2,f
  5929     0A2B  0CF1               	rrf	___ftpack@arg+1,f
  5930     0A2C  0CF0               	rrf	___ftpack@arg,f
  5931     0A2D  3EFF               	addlw	-1
  5932     0A2E  1D03               	skipz
  5933     0A2F  2A29               	goto	u1995
  5934     0A30                     l1815:
  5935     0A30  30FE               	movlw	254
  5936     0A31  0572               	andwf	___ftpack@arg+2,w
  5937     0A32  1903               	btfsc	3,2
  5938     0A33  2A4B               	goto	l1823
  5939     0A34  2A24               	goto	l1811
  5940     0A35                     l1817:
  5941     0A35  3001               	movlw	1
  5942     0A36  00FF               	movwf	127
  5943     0A37  087F               	movf	127,w
  5944     0A38  07F3               	addwf	___ftpack@exp,f
  5945     0A39  3001               	movlw	1
  5946     0A3A  07F0               	addwf	___ftpack@arg,f
  5947     0A3B  3000               	movlw	0
  5948     0A3C  1803               	skipnc
  5949     0A3D  3001               	movlw	1
  5950     0A3E  07F1               	addwf	___ftpack@arg+1,f
  5951     0A3F  3000               	movlw	0
  5952     0A40  1803               	skipnc
  5953     0A41  3001               	movlw	1
  5954     0A42  07F2               	addwf	___ftpack@arg+2,f
  5955     0A43  3001               	movlw	1
  5956     0A44                     u2015:
  5957     0A44  1003               	clrc
  5958     0A45  0CF2               	rrf	___ftpack@arg+2,f
  5959     0A46  0CF1               	rrf	___ftpack@arg+1,f
  5960     0A47  0CF0               	rrf	___ftpack@arg,f
  5961     0A48  3EFF               	addlw	-1
  5962     0A49  1D03               	skipz
  5963     0A4A  2A44               	goto	u2015
  5964     0A4B                     l1823:
  5965     0A4B  30FF               	movlw	255
  5966     0A4C  0572               	andwf	___ftpack@arg+2,w
  5967     0A4D  1903               	btfsc	3,2
  5968     0A4E  2A5E               	goto	l1827
  5969     0A4F  2A35               	goto	l1817
  5970     0A50                     l1829:
  5971     0A50  3002               	movlw	2
  5972     0A51  0273               	subwf	___ftpack@exp,w
  5973     0A52  1C03               	btfss	3,0
  5974     0A53  2A60               	goto	l513
  5975     0A54  3001               	movlw	1
  5976     0A55  02F3               	subwf	___ftpack@exp,f
  5977     0A56  3001               	movlw	1
  5978     0A57                     u2035:
  5979     0A57  1003               	clrc
  5980     0A58  0DF0               	rlf	___ftpack@arg,f
  5981     0A59  0DF1               	rlf	___ftpack@arg+1,f
  5982     0A5A  0DF2               	rlf	___ftpack@arg+2,f
  5983     0A5B  3EFF               	addlw	-1
  5984     0A5C  1D03               	skipz
  5985     0A5D  2A57               	goto	u2035
  5986     0A5E                     l1827:
  5987     0A5E  1FF1               	btfss	___ftpack@arg+1,7
  5988     0A5F  2A50               	goto	l1829
  5989     0A60                     l513:
  5990     0A60  1873               	btfsc	___ftpack@exp,0
  5991     0A61  2A68               	goto	l514
  5992     0A62  30FF               	movlw	255
  5993     0A63  05F0               	andwf	___ftpack@arg,f
  5994     0A64  307F               	movlw	127
  5995     0A65  05F1               	andwf	___ftpack@arg+1,f
  5996     0A66  30FF               	movlw	255
  5997     0A67  05F2               	andwf	___ftpack@arg+2,f
  5998     0A68                     l514:
  5999     0A68  1003               	clrc
  6000     0A69  0CF3               	rrf	___ftpack@exp,f
  6001     0A6A  0873               	movf	___ftpack@exp,w
  6002     0A6B  00F5               	movwf	??___ftpack
  6003     0A6C  01F6               	clrf	??___ftpack+1
  6004     0A6D  01F7               	clrf	??___ftpack+2
  6005     0A6E  3010               	movlw	16
  6006     0A6F                     u2075:
  6007     0A6F  1003               	clrc
  6008     0A70  0DF5               	rlf	??___ftpack,f
  6009     0A71  0DF6               	rlf	??___ftpack+1,f
  6010     0A72  0DF7               	rlf	??___ftpack+2,f
  6011     0A73  3EFF               	addlw	-1
  6012     0A74  1D03               	skipz
  6013     0A75  2A6F               	goto	u2075
  6014     0A76  0875               	movf	??___ftpack,w
  6015     0A77  04F0               	iorwf	___ftpack@arg,f
  6016     0A78  0876               	movf	??___ftpack+1,w
  6017     0A79  04F1               	iorwf	___ftpack@arg+1,f
  6018     0A7A  0877               	movf	??___ftpack+2,w
  6019     0A7B  04F2               	iorwf	___ftpack@arg+2,f
  6020     0A7C  0874               	movf	___ftpack@sign,w
  6021     0A7D  1903               	btfsc	3,2
  6022     0A7E  0008               	return
  6023     0A7F  17F2               	bsf	___ftpack@arg+2,7
  6024     0A80  0008               	return
  6025     0A81                     __end_of___ftpack:
  6026                           
  6027                           	psect	text24
  6028     173A                     __ptext24:	
  6029 ;; *************** function _Lcd_Write_String *****************
  6030 ;; Defined at:
  6031 ;;		line 124 in file "main.c"
  6032 ;; Parameters:    Size  Location     Type
  6033 ;;  a               2    5[COMMON] PTR unsigned char 
  6034 ;;		 -> STR_6(5), STR_4(5), STR_2(5), main@char_digital(15), 
  6035 ;; Auto vars:     Size  Location     Type
  6036 ;;  i               2   10[COMMON] int 
  6037 ;; Return value:  Size  Location     Type
  6038 ;;                  1    wreg      void 
  6039 ;; Registers used:
  6040 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  6041 ;; Tracked objects:
  6042 ;;		On entry : 200/0
  6043 ;;		On exit  : 300/0
  6044 ;;		Unchanged: 0/0
  6045 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6046 ;;      Params:         2       0       0       0       0
  6047 ;;      Locals:         2       0       0       0       0
  6048 ;;      Temps:          3       0       0       0       0
  6049 ;;      Totals:         7       0       0       0       0
  6050 ;;Total ram usage:        7 bytes
  6051 ;; Hardware stack levels used: 1
  6052 ;; Hardware stack levels required when called: 2
  6053 ;; This function calls:
  6054 ;;		_Lcd_Write_Char
  6055 ;; This function is called by:
  6056 ;;		_main
  6057 ;; This function uses a non-reentrant model
  6058 ;;
  6059                           
  6060     173A                     _Lcd_Write_String:	
  6061                           ;psect for function _Lcd_Write_String
  6062                           
  6063                           
  6064                           ;main.c: 126: int i;;main.c: 127: for (i = 0; a[i] != '\0'; i++)
  6065                           
  6066                           ;incstack = 0
  6067                           ; Regs used in _Lcd_Write_String: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  6068     173A  01FA               	clrf	Lcd_Write_String@i
  6069     173B  01FB               	clrf	Lcd_Write_String@i+1
  6070     173C                     l2521:
  6071     173C  087A               	movf	Lcd_Write_String@i,w
  6072     173D  0775               	addwf	Lcd_Write_String@a,w
  6073     173E  00F8               	movwf	??_Lcd_Write_String+1
  6074     173F  0876               	movf	Lcd_Write_String@a+1,w
  6075     1740  00F7               	movwf	??_Lcd_Write_String
  6076     1741  1803               	skipnc
  6077     1742  0AF7               	incf	??_Lcd_Write_String,f
  6078     1743  1BFA               	btfsc	Lcd_Write_String@i,7
  6079     1744  03F7               	decf	??_Lcd_Write_String,f
  6080     1745  0877               	movf	??_Lcd_Write_String,w
  6081     1746  00F9               	movwf	??_Lcd_Write_String+2
  6082     1747  0879               	movf	??_Lcd_Write_String+2,w
  6083     1748  1283               	bcf	3,5	;RP0=0, select bank0
  6084     1749  1303               	bcf	3,6	;RP1=0, select bank0
  6085     174A  00FF               	movwf	127
  6086     174B  0878               	movf	??_Lcd_Write_String+1,w
  6087     174C  0084               	movwf	4
  6088     174D  120A  158A  2000  160A  118A  	fcall	stringtab
  6089     1752  3A00               	xorlw	0
  6090     1753  1903               	btfsc	3,2
  6091     1754  0008               	return
  6092                           
  6093                           ;main.c: 128: Lcd_Write_Char(a[i]);
  6094     1755  087A               	movf	Lcd_Write_String@i,w
  6095     1756  0775               	addwf	Lcd_Write_String@a,w
  6096     1757  00F8               	movwf	??_Lcd_Write_String+1
  6097     1758  0876               	movf	Lcd_Write_String@a+1,w
  6098     1759  00F7               	movwf	??_Lcd_Write_String
  6099     175A  1803               	skipnc
  6100     175B  0AF7               	incf	??_Lcd_Write_String,f
  6101     175C  1BFA               	btfsc	Lcd_Write_String@i,7
  6102     175D  03F7               	decf	??_Lcd_Write_String,f
  6103     175E  0877               	movf	??_Lcd_Write_String,w
  6104     175F  00F9               	movwf	??_Lcd_Write_String+2
  6105     1760  0879               	movf	??_Lcd_Write_String+2,w
  6106     1761  1283               	bcf	3,5	;RP0=0, select bank0
  6107     1762  1303               	bcf	3,6	;RP1=0, select bank0
  6108     1763  00FF               	movwf	127
  6109     1764  0878               	movf	??_Lcd_Write_String+1,w
  6110     1765  0084               	movwf	4
  6111     1766  120A  158A  2000  160A  118A  	fcall	stringtab
  6112     176B  160A  118A  26E0  160A  118A  	fcall	_Lcd_Write_Char
  6113     1770  3001               	movlw	1
  6114     1771  07FA               	addwf	Lcd_Write_String@i,f
  6115     1772  1803               	skipnc
  6116     1773  0AFB               	incf	Lcd_Write_String@i+1,f
  6117     1774  3000               	movlw	0
  6118     1775  07FB               	addwf	Lcd_Write_String@i+1,f
  6119     1776  2F3C               	goto	l2521
  6120     1777                     __end_of_Lcd_Write_String:
  6121                           
  6122                           	psect	text25
  6123     16E0                     __ptext25:	
  6124 ;; *************** function _Lcd_Write_Char *****************
  6125 ;; Defined at:
  6126 ;;		line 109 in file "main.c"
  6127 ;; Parameters:    Size  Location     Type
  6128 ;;  a               1    wreg     unsigned char 
  6129 ;; Auto vars:     Size  Location     Type
  6130 ;;  a               1    4[COMMON] unsigned char 
  6131 ;;  y               1    3[COMMON] unsigned char 
  6132 ;;  temp            1    2[COMMON] unsigned char 
  6133 ;; Return value:  Size  Location     Type
  6134 ;;                  1    wreg      void 
  6135 ;; Registers used:
  6136 ;;		wreg, status,2, status,0, pclath, cstack
  6137 ;; Tracked objects:
  6138 ;;		On entry : 300/0
  6139 ;;		On exit  : 300/0
  6140 ;;		Unchanged: 0/0
  6141 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6142 ;;      Params:         0       0       0       0       0
  6143 ;;      Locals:         3       0       0       0       0
  6144 ;;      Temps:          1       0       0       0       0
  6145 ;;      Totals:         4       0       0       0       0
  6146 ;;Total ram usage:        4 bytes
  6147 ;; Hardware stack levels used: 1
  6148 ;; Hardware stack levels required when called: 1
  6149 ;; This function calls:
  6150 ;;		_Lcd_Port
  6151 ;; This function is called by:
  6152 ;;		_Lcd_Write_String
  6153 ;; This function uses a non-reentrant model
  6154 ;;
  6155                           
  6156     16E0                     _Lcd_Write_Char:	
  6157                           ;psect for function _Lcd_Write_Char
  6158                           
  6159                           
  6160                           ;incstack = 0
  6161                           ; Regs used in _Lcd_Write_Char: [wreg+status,2+status,0+pclath+cstack]
  6162                           ;Lcd_Write_Char@a stored from wreg
  6163     16E0  00F4               	movwf	Lcd_Write_Char@a
  6164                           
  6165                           ;main.c: 111: char temp, y;;main.c: 112: temp = a & 0x0F;
  6166     16E1  0874               	movf	Lcd_Write_Char@a,w
  6167     16E2  390F               	andlw	15
  6168     16E3  00F2               	movwf	Lcd_Write_Char@temp
  6169                           
  6170                           ;main.c: 113: y = a & 0xF0;
  6171     16E4  0874               	movf	Lcd_Write_Char@a,w
  6172     16E5  39F0               	andlw	240
  6173     16E6  00F3               	movwf	Lcd_Write_Char@y
  6174                           
  6175                           ;main.c: 114: RC0 = 1;
  6176     16E7  1407               	bsf	7,0	;volatile
  6177                           
  6178                           ;main.c: 115: Lcd_Port(y >> 4);
  6179     16E8  0873               	movf	Lcd_Write_Char@y,w
  6180     16E9  00F1               	movwf	??_Lcd_Write_Char
  6181     16EA  3004               	movlw	4
  6182     16EB                     u2775:
  6183     16EB  1003               	clrc
  6184     16EC  0CF1               	rrf	??_Lcd_Write_Char,f
  6185     16ED  3EFF               	addlw	-1
  6186     16EE  1D03               	skipz
  6187     16EF  2EEB               	goto	u2775
  6188     16F0  0871               	movf	??_Lcd_Write_Char,w
  6189     16F1  160A  118A  2634  160A  118A  	fcall	_Lcd_Port
  6190                           
  6191                           ;main.c: 116: RC2 = 1;
  6192     16F6  1507               	bsf	7,2	;volatile
  6193                           
  6194                           ;main.c: 117: _delay((unsigned long)((40)*(4000000/4000000.0)));
  6195     16F7  300D               	movlw	13
  6196     16F8  00F1               	movwf	??_Lcd_Write_Char
  6197     16F9                     u3937:
  6198     16F9  0BF1               	decfsz	??_Lcd_Write_Char,f
  6199     16FA  2EF9               	goto	u3937
  6200                           
  6201                           ;main.c: 118: RC2 = 0;
  6202     16FB  1283               	bcf	3,5	;RP0=0, select bank0
  6203     16FC  1303               	bcf	3,6	;RP1=0, select bank0
  6204     16FD  1107               	bcf	7,2	;volatile
  6205                           
  6206                           ;main.c: 119: Lcd_Port(temp);
  6207     16FE  0872               	movf	Lcd_Write_Char@temp,w
  6208     16FF  160A  118A  2634  160A  118A  	fcall	_Lcd_Port
  6209                           
  6210                           ;main.c: 120: RC2 = 1;
  6211     1704  1507               	bsf	7,2	;volatile
  6212                           
  6213                           ;main.c: 121: _delay((unsigned long)((40)*(4000000/4000000.0)));
  6214     1705  300D               	movlw	13
  6215     1706  00F1               	movwf	??_Lcd_Write_Char
  6216     1707                     u3947:
  6217     1707  0BF1               	decfsz	??_Lcd_Write_Char,f
  6218     1708  2F07               	goto	u3947
  6219                           
  6220                           ;main.c: 122: RC2 = 0;
  6221     1709  1283               	bcf	3,5	;RP0=0, select bank0
  6222     170A  1303               	bcf	3,6	;RP1=0, select bank0
  6223     170B  1107               	bcf	7,2	;volatile
  6224     170C  0008               	return
  6225     170D                     __end_of_Lcd_Write_Char:
  6226                           
  6227                           	psect	text26
  6228     1777                     __ptext26:	
  6229 ;; *************** function _Lcd_Set_Cursor *****************
  6230 ;; Defined at:
  6231 ;;		line 72 in file "main.c"
  6232 ;; Parameters:    Size  Location     Type
  6233 ;;  a               1    wreg     unsigned char 
  6234 ;;  b               1    4[COMMON] unsigned char 
  6235 ;; Auto vars:     Size  Location     Type
  6236 ;;  a               1    6[COMMON] unsigned char 
  6237 ;;  temp            1    9[COMMON] unsigned char 
  6238 ;;  y               1    8[COMMON] unsigned char 
  6239 ;;  z               1    7[COMMON] unsigned char 
  6240 ;; Return value:  Size  Location     Type
  6241 ;;                  1    wreg      void 
  6242 ;; Registers used:
  6243 ;;		wreg, status,2, status,0, pclath, cstack
  6244 ;; Tracked objects:
  6245 ;;		On entry : 200/100
  6246 ;;		On exit  : 200/0
  6247 ;;		Unchanged: 0/0
  6248 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6249 ;;      Params:         1       0       0       0       0
  6250 ;;      Locals:         4       0       0       0       0
  6251 ;;      Temps:          1       0       0       0       0
  6252 ;;      Totals:         6       0       0       0       0
  6253 ;;Total ram usage:        6 bytes
  6254 ;; Hardware stack levels used: 1
  6255 ;; Hardware stack levels required when called: 2
  6256 ;; This function calls:
  6257 ;;		_Lcd_Cmd
  6258 ;; This function is called by:
  6259 ;;		_main
  6260 ;; This function uses a non-reentrant model
  6261 ;;
  6262                           
  6263     1777                     _Lcd_Set_Cursor:	
  6264                           ;psect for function _Lcd_Set_Cursor
  6265                           
  6266                           
  6267                           ;incstack = 0
  6268                           ; Regs used in _Lcd_Set_Cursor: [wreg+status,2+status,0+pclath+cstack]
  6269                           ;Lcd_Set_Cursor@a stored from wreg
  6270     1777  00F6               	movwf	Lcd_Set_Cursor@a
  6271                           
  6272                           ;main.c: 74: char temp, z, y;;main.c: 75: if (a == 1)
  6273     1778  0376               	decf	Lcd_Set_Cursor@a,w
  6274     1779  1D03               	btfss	3,2
  6275     177A  2F96               	goto	l2495
  6276                           
  6277                           ;main.c: 76: {;main.c: 77: temp = 0x80 + b - 1;
  6278     177B  0874               	movf	Lcd_Set_Cursor@b,w
  6279     177C  3E7F               	addlw	127
  6280     177D  00F9               	movwf	Lcd_Set_Cursor@temp
  6281                           
  6282                           ;main.c: 78: z = temp >> 4;
  6283     177E  0879               	movf	Lcd_Set_Cursor@temp,w
  6284     177F  00F5               	movwf	??_Lcd_Set_Cursor
  6285     1780  3004               	movlw	4
  6286     1781                     u3475:
  6287     1781  1003               	clrc
  6288     1782  0CF5               	rrf	??_Lcd_Set_Cursor,f
  6289     1783  3EFF               	addlw	-1
  6290     1784  1D03               	skipz
  6291     1785  2F81               	goto	u3475
  6292     1786  0875               	movf	??_Lcd_Set_Cursor,w
  6293     1787  00F7               	movwf	Lcd_Set_Cursor@z
  6294                           
  6295                           ;main.c: 79: y = temp & 0x0F;
  6296     1788  0879               	movf	Lcd_Set_Cursor@temp,w
  6297     1789  390F               	andlw	15
  6298     178A  00F8               	movwf	Lcd_Set_Cursor@y
  6299                           
  6300                           ;main.c: 80: Lcd_Cmd(z);
  6301     178B  0877               	movf	Lcd_Set_Cursor@z,w
  6302     178C  160A  118A  264A  160A  118A  	fcall	_Lcd_Cmd
  6303                           
  6304                           ;main.c: 81: Lcd_Cmd(y);
  6305     1791  0878               	movf	Lcd_Set_Cursor@y,w
  6306     1792  160A  118A  264A   	fcall	_Lcd_Cmd
  6307                           
  6308                           ;main.c: 82: }
  6309     1795  0008               	return
  6310     1796                     l2495:
  6311                           
  6312                           ;main.c: 83: else if (a == 2)
  6313     1796  3002               	movlw	2
  6314     1797  0676               	xorwf	Lcd_Set_Cursor@a,w
  6315     1798  1D03               	btfss	3,2
  6316     1799  0008               	return
  6317                           
  6318                           ;main.c: 84: {;main.c: 85: temp = 0xC0 + b - 1;
  6319     179A  0874               	movf	Lcd_Set_Cursor@b,w
  6320     179B  3EBF               	addlw	191
  6321     179C  00F9               	movwf	Lcd_Set_Cursor@temp
  6322                           
  6323                           ;main.c: 86: z = temp >> 4;
  6324     179D  0879               	movf	Lcd_Set_Cursor@temp,w
  6325     179E  00F5               	movwf	??_Lcd_Set_Cursor
  6326     179F  3004               	movlw	4
  6327     17A0                     u3495:
  6328     17A0  1003               	clrc
  6329     17A1  0CF5               	rrf	??_Lcd_Set_Cursor,f
  6330     17A2  3EFF               	addlw	-1
  6331     17A3  1D03               	skipz
  6332     17A4  2FA0               	goto	u3495
  6333     17A5  0875               	movf	??_Lcd_Set_Cursor,w
  6334     17A6  00F7               	movwf	Lcd_Set_Cursor@z
  6335                           
  6336                           ;main.c: 87: y = temp & 0x0F;
  6337     17A7  0879               	movf	Lcd_Set_Cursor@temp,w
  6338     17A8  390F               	andlw	15
  6339     17A9  00F8               	movwf	Lcd_Set_Cursor@y
  6340                           
  6341                           ;main.c: 88: Lcd_Cmd(z);
  6342     17AA  0877               	movf	Lcd_Set_Cursor@z,w
  6343     17AB  160A  118A  264A  160A  118A  	fcall	_Lcd_Cmd
  6344                           
  6345                           ;main.c: 89: Lcd_Cmd(y);
  6346     17B0  0878               	movf	Lcd_Set_Cursor@y,w
  6347     17B1  160A  118A  264A   	fcall	_Lcd_Cmd
  6348     17B4  0008               	return
  6349     17B5                     __end_of_Lcd_Set_Cursor:
  6350                           
  6351                           	psect	text27
  6352     095C                     __ptext27:	
  6353 ;; *************** function _Lcd_Init *****************
  6354 ;; Defined at:
  6355 ;;		line 92 in file "main.c"
  6356 ;; Parameters:    Size  Location     Type
  6357 ;;		None
  6358 ;; Auto vars:     Size  Location     Type
  6359 ;;		None
  6360 ;; Return value:  Size  Location     Type
  6361 ;;                  1    wreg      void 
  6362 ;; Registers used:
  6363 ;;		wreg, status,2, status,0, pclath, cstack
  6364 ;; Tracked objects:
  6365 ;;		On entry : B00/0
  6366 ;;		On exit  : 300/0
  6367 ;;		Unchanged: 0/0
  6368 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6369 ;;      Params:         0       0       0       0       0
  6370 ;;      Locals:         0       0       0       0       0
  6371 ;;      Temps:          2       0       0       0       0
  6372 ;;      Totals:         2       0       0       0       0
  6373 ;;Total ram usage:        2 bytes
  6374 ;; Hardware stack levels used: 1
  6375 ;; Hardware stack levels required when called: 2
  6376 ;; This function calls:
  6377 ;;		_Lcd_Cmd
  6378 ;;		_Lcd_Port
  6379 ;; This function is called by:
  6380 ;;		_main
  6381 ;; This function uses a non-reentrant model
  6382 ;;
  6383                           
  6384     095C                     _Lcd_Init:	
  6385                           ;psect for function _Lcd_Init
  6386                           
  6387                           
  6388                           ;main.c: 94: Lcd_Port(0x00);
  6389                           
  6390                           ;incstack = 0
  6391                           ; Regs used in _Lcd_Init: [wreg+status,2+status,0+pclath+cstack]
  6392     095C  3000               	movlw	0
  6393     095D  160A  118A  2634  120A  158A  	fcall	_Lcd_Port
  6394                           
  6395                           ;main.c: 95: _delay((unsigned long)((20)*(4000000/4000.0)));
  6396     0962  301A               	movlw	26
  6397     0963  00F5               	movwf	??_Lcd_Init+1
  6398     0964  30F8               	movlw	248
  6399     0965  00F4               	movwf	??_Lcd_Init
  6400     0966                     u3957:
  6401     0966  0BF4               	decfsz	??_Lcd_Init,f
  6402     0967  2966               	goto	u3957
  6403     0968  0BF5               	decfsz	??_Lcd_Init+1,f
  6404     0969  2966               	goto	u3957
  6405     096A  0000               	nop
  6406                           
  6407                           ;main.c: 96: Lcd_Cmd(0x03);
  6408     096B  3003               	movlw	3
  6409     096C  160A  118A  264A  120A  158A  	fcall	_Lcd_Cmd
  6410                           
  6411                           ;main.c: 97: _delay((unsigned long)((5)*(4000000/4000.0)));
  6412     0971  3007               	movlw	7
  6413     0972  00F5               	movwf	??_Lcd_Init+1
  6414     0973  307D               	movlw	125
  6415     0974  00F4               	movwf	??_Lcd_Init
  6416     0975                     u3967:
  6417     0975  0BF4               	decfsz	??_Lcd_Init,f
  6418     0976  2975               	goto	u3967
  6419     0977  0BF5               	decfsz	??_Lcd_Init+1,f
  6420     0978  2975               	goto	u3967
  6421                           
  6422                           ;main.c: 98: Lcd_Cmd(0x03);
  6423     0979  3003               	movlw	3
  6424     097A  160A  118A  264A  120A  158A  	fcall	_Lcd_Cmd
  6425                           
  6426                           ;main.c: 99: _delay((unsigned long)((11)*(4000000/4000.0)));
  6427     097F  300F               	movlw	15
  6428     0980  00F5               	movwf	??_Lcd_Init+1
  6429     0981  3047               	movlw	71
  6430     0982  00F4               	movwf	??_Lcd_Init
  6431     0983                     u3977:
  6432     0983  0BF4               	decfsz	??_Lcd_Init,f
  6433     0984  2983               	goto	u3977
  6434     0985  0BF5               	decfsz	??_Lcd_Init+1,f
  6435     0986  2983               	goto	u3977
  6436     0987  2988               	nop2
  6437                           
  6438                           ;main.c: 100: Lcd_Cmd(0x03);
  6439     0988  3003               	movlw	3
  6440     0989  160A  118A  264A  120A  158A  	fcall	_Lcd_Cmd
  6441                           
  6442                           ;main.c: 101: Lcd_Cmd(0x02);
  6443     098E  3002               	movlw	2
  6444     098F  160A  118A  264A  120A  158A  	fcall	_Lcd_Cmd
  6445                           
  6446                           ;main.c: 102: Lcd_Cmd(0x02);
  6447     0994  3002               	movlw	2
  6448     0995  160A  118A  264A  120A  158A  	fcall	_Lcd_Cmd
  6449                           
  6450                           ;main.c: 103: Lcd_Cmd(0x08);
  6451     099A  3008               	movlw	8
  6452     099B  160A  118A  264A  120A  158A  	fcall	_Lcd_Cmd
  6453                           
  6454                           ;main.c: 104: Lcd_Cmd(0x00);
  6455     09A0  3000               	movlw	0
  6456     09A1  160A  118A  264A  120A  158A  	fcall	_Lcd_Cmd
  6457                           
  6458                           ;main.c: 105: Lcd_Cmd(0x0C);
  6459     09A6  300C               	movlw	12
  6460     09A7  160A  118A  264A  120A  158A  	fcall	_Lcd_Cmd
  6461                           
  6462                           ;main.c: 106: Lcd_Cmd(0x00);
  6463     09AC  3000               	movlw	0
  6464     09AD  160A  118A  264A  120A  158A  	fcall	_Lcd_Cmd
  6465                           
  6466                           ;main.c: 107: Lcd_Cmd(0x06);
  6467     09B2  3006               	movlw	6
  6468     09B3  160A  118A  264A   	fcall	_Lcd_Cmd
  6469     09B6  0008               	return
  6470     09B7                     __end_of_Lcd_Init:
  6471                           
  6472                           	psect	text28
  6473     164A                     __ptext28:	
  6474 ;; *************** function _Lcd_Cmd *****************
  6475 ;; Defined at:
  6476 ;;		line 59 in file "main.c"
  6477 ;; Parameters:    Size  Location     Type
  6478 ;;  a               1    wreg     unsigned char 
  6479 ;; Auto vars:     Size  Location     Type
  6480 ;;  a               1    3[COMMON] unsigned char 
  6481 ;; Return value:  Size  Location     Type
  6482 ;;                  1    wreg      void 
  6483 ;; Registers used:
  6484 ;;		wreg, status,2, status,0, pclath, cstack
  6485 ;; Tracked objects:
  6486 ;;		On entry : 0/100
  6487 ;;		On exit  : 300/0
  6488 ;;		Unchanged: 0/0
  6489 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6490 ;;      Params:         0       0       0       0       0
  6491 ;;      Locals:         1       0       0       0       0
  6492 ;;      Temps:          2       0       0       0       0
  6493 ;;      Totals:         3       0       0       0       0
  6494 ;;Total ram usage:        3 bytes
  6495 ;; Hardware stack levels used: 1
  6496 ;; Hardware stack levels required when called: 1
  6497 ;; This function calls:
  6498 ;;		_Lcd_Port
  6499 ;; This function is called by:
  6500 ;;		_Lcd_Set_Cursor
  6501 ;;		_Lcd_Init
  6502 ;; This function uses a non-reentrant model
  6503 ;;
  6504                           
  6505     164A                     _Lcd_Cmd:	
  6506                           ;psect for function _Lcd_Cmd
  6507                           
  6508                           
  6509                           ;incstack = 0
  6510                           ; Regs used in _Lcd_Cmd: [wreg+status,2+status,0+pclath+cstack]
  6511                           ;Lcd_Cmd@a stored from wreg
  6512     164A  00F3               	movwf	Lcd_Cmd@a
  6513                           
  6514                           ;main.c: 61: RC0 = 0;
  6515     164B  1283               	bcf	3,5	;RP0=0, select bank0
  6516     164C  1303               	bcf	3,6	;RP1=0, select bank0
  6517     164D  1007               	bcf	7,0	;volatile
  6518                           
  6519                           ;main.c: 62: Lcd_Port(a);
  6520     164E  0873               	movf	Lcd_Cmd@a,w
  6521     164F  160A  118A  2634  160A  118A  	fcall	_Lcd_Port
  6522                           
  6523                           ;main.c: 63: RC2 = 1;
  6524     1654  1507               	bsf	7,2	;volatile
  6525                           
  6526                           ;main.c: 64: _delay((unsigned long)((4)*(4000000/4000.0)));
  6527     1655  3006               	movlw	6
  6528     1656  00F2               	movwf	??_Lcd_Cmd+1
  6529     1657  3030               	movlw	48
  6530     1658  00F1               	movwf	??_Lcd_Cmd
  6531     1659                     u3987:
  6532     1659  0BF1               	decfsz	??_Lcd_Cmd,f
  6533     165A  2E59               	goto	u3987
  6534     165B  0BF2               	decfsz	??_Lcd_Cmd+1,f
  6535     165C  2E59               	goto	u3987
  6536     165D  0000               	nop
  6537                           
  6538                           ;main.c: 65: RC2 = 0;
  6539     165E  1283               	bcf	3,5	;RP0=0, select bank0
  6540     165F  1303               	bcf	3,6	;RP1=0, select bank0
  6541     1660  1107               	bcf	7,2	;volatile
  6542     1661  0008               	return
  6543     1662                     __end_of_Lcd_Cmd:
  6544                           
  6545                           	psect	text29
  6546     1634                     __ptext29:	
  6547 ;; *************** function _Lcd_Port *****************
  6548 ;; Defined at:
  6549 ;;		line 40 in file "main.c"
  6550 ;; Parameters:    Size  Location     Type
  6551 ;;  a               1    wreg     unsigned char 
  6552 ;; Auto vars:     Size  Location     Type
  6553 ;;  a               1    0[COMMON] unsigned char 
  6554 ;; Return value:  Size  Location     Type
  6555 ;;                  1    wreg      void 
  6556 ;; Registers used:
  6557 ;;		wreg
  6558 ;; Tracked objects:
  6559 ;;		On entry : 300/0
  6560 ;;		On exit  : 300/0
  6561 ;;		Unchanged: 0/0
  6562 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6563 ;;      Params:         0       0       0       0       0
  6564 ;;      Locals:         1       0       0       0       0
  6565 ;;      Temps:          0       0       0       0       0
  6566 ;;      Totals:         1       0       0       0       0
  6567 ;;Total ram usage:        1 bytes
  6568 ;; Hardware stack levels used: 1
  6569 ;; This function calls:
  6570 ;;		Nothing
  6571 ;; This function is called by:
  6572 ;;		_Lcd_Cmd
  6573 ;;		_Lcd_Init
  6574 ;;		_Lcd_Write_Char
  6575 ;; This function uses a non-reentrant model
  6576 ;;
  6577                           
  6578     1634                     _Lcd_Port:	
  6579                           ;psect for function _Lcd_Port
  6580                           
  6581                           
  6582                           ;incstack = 0
  6583                           ; Regs used in _Lcd_Port: [wreg]
  6584                           ;Lcd_Port@a stored from wreg
  6585     1634  00F0               	movwf	Lcd_Port@a
  6586                           
  6587                           ;main.c: 42: if (a & 1)
  6588     1635  1C70               	btfss	Lcd_Port@a,0
  6589     1636  2E39               	goto	l49
  6590                           
  6591                           ;main.c: 43: RD4 = 1;
  6592     1637  1608               	bsf	8,4	;volatile
  6593     1638  2E3A               	goto	l50
  6594     1639                     l49:
  6595                           
  6596                           ;main.c: 44: else;main.c: 45: RD4 = 0;
  6597     1639  1208               	bcf	8,4	;volatile
  6598     163A                     l50:
  6599                           
  6600                           ;main.c: 46: if (a & 2)
  6601     163A  1CF0               	btfss	Lcd_Port@a,1
  6602     163B  2E3E               	goto	l51
  6603                           
  6604                           ;main.c: 47: RD5 = 1;
  6605     163C  1688               	bsf	8,5	;volatile
  6606     163D  2E3F               	goto	l52
  6607     163E                     l51:
  6608                           
  6609                           ;main.c: 48: else;main.c: 49: RD5 = 0;
  6610     163E  1288               	bcf	8,5	;volatile
  6611     163F                     l52:
  6612                           
  6613                           ;main.c: 50: if (a & 4)
  6614     163F  1D70               	btfss	Lcd_Port@a,2
  6615     1640  2E43               	goto	l53
  6616                           
  6617                           ;main.c: 51: RD6 = 1;
  6618     1641  1708               	bsf	8,6	;volatile
  6619     1642  2E44               	goto	l54
  6620     1643                     l53:
  6621                           
  6622                           ;main.c: 52: else;main.c: 53: RD6 = 0;
  6623     1643  1308               	bcf	8,6	;volatile
  6624     1644                     l54:
  6625                           
  6626                           ;main.c: 54: if (a & 8)
  6627     1644  1DF0               	btfss	Lcd_Port@a,3
  6628     1645  2E48               	goto	l55
  6629                           
  6630                           ;main.c: 55: RD7 = 1;
  6631     1646  1788               	bsf	8,7	;volatile
  6632     1647  0008               	return
  6633     1648                     l55:
  6634                           
  6635                           ;main.c: 56: else;main.c: 57: RD7 = 0;
  6636     1648  1388               	bcf	8,7	;volatile
  6637     1649  0008               	return
  6638     164A                     __end_of_Lcd_Port:
  6639     007E                     btemp	set	126	;btemp
  6640     007E                     wtemp0	set	126
  6641                           
  6642                           	psect	config
  6643                           
  6644                           ;Config register CONFIG @ 0x2007
  6645                           ;	Oscillator Selection bits
  6646                           ;	FOSC = XT, XT oscillator
  6647                           ;	Watchdog Timer Enable bit
  6648                           ;	WDTE = OFF, WDT disabled
  6649                           ;	Power-up Timer Enable bit
  6650                           ;	PWRTE = OFF, PWRT disabled
  6651                           ;	Brown-out Reset Enable bit
  6652                           ;	BOREN = ON, BOR enabled
  6653                           ;	Low-Voltage (Single-Supply) In-Circuit Serial Programming Enable bit
  6654                           ;	LVP = ON, RB3/PGM pin has PGM function; low-voltage programming enabled
  6655                           ;	Data EEPROM Memory Code Protection bit
  6656                           ;	CPD = OFF, Data EEPROM code protection off
  6657                           ;	Flash Program Memory Write Enable bits
  6658                           ;	WRT = OFF, Write protection off; all program memory may be written to by EECON control
  6659                           ;	In-Circuit Debugger Mode bit
  6660                           ;	DEBUG = 0x1, unprogrammed default
  6661                           ;	Flash Program Memory Code Protection bit
  6662                           ;	CP = OFF, Code protection off
  6663     2007                     	org	8199
  6664     2007  3FF9               	dw	16377

Data Sizes:
    Strings     20
    Constant    118
    Data        0
    BSS         18
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     79      79
    BANK1            80     17      35
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    Lcd_Write_String@a	PTR unsigned char  size(2) Largest target is 15
		 -> main@char_digital(BANK1[15]), STR_2(CODE[5]), STR_4(CODE[5]), STR_6(CODE[5]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    sprintf@f	PTR const unsigned char  size(1) Largest target is 5
		 -> STR_1(CODE[5]), STR_3(CODE[5]), STR_5(CODE[5]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 15
		 -> main@char_digital(BANK1[15]), 


Critical Paths under _main in COMMON

    _sprintf->___awdiv
    _sprintf->___lldiv
    _sprintf->__div_to_l_
    _scale->___awdiv
    ___awdiv->___awmod
    ___lbdiv->___lbmod
    ___ftmul->___awdiv
    ___bmul->___awdiv
    ___lltoft->___ftpack
    ___awtoft->___ftpack
    _Lcd_Write_String->_Lcd_Write_Char
    _Lcd_Write_Char->_Lcd_Port
    _Lcd_Set_Cursor->_Lcd_Cmd
    _Lcd_Init->_Lcd_Cmd
    _Lcd_Cmd->_Lcd_Port

Critical Paths under _main in BANK0

    _main->_sprintf
    _sprintf->___ftsub
    _scale->___ftmul
    _fround->___ftmul
    ___ftmul->___bmul
    ___fttol->_scale
    ___ftsub->___ftadd
    ___ftadd->_fround

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                17    17      0   40197
                                              0 BANK1     17    17      0
                           _Lcd_Init
                     _Lcd_Set_Cursor
                   _Lcd_Write_String
                           ___awtoft
                            ___ftmul
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             40    36      4   32289
                                             46 BANK0     33    29      4
                            ___awdiv
                            ___ftadd
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                            ___lldiv
                            ___llmod
                           ___lltoft
                             ___wmul
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                            _isdigit
                              _scale
 ---------------------------------------------------------------------------------
 (2) _scale                                                7     4      3    7054
                                             18 BANK0      7     4      3
                            ___awdiv
                            ___awmod
                             ___bmul
                            ___ftmul
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              6     2      4     932
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4    1042
                                              6 COMMON     8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              2     2      0      68
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (2) _fround                                              10     7      3    5521
                                             18 BANK0     10     7      3
                             ___bmul
                            ___ftmul
                            ___lbdiv
                            ___lbmod
 ---------------------------------------------------------------------------------
 (3) ___lbmod                                              6     5      1     318
                                              0 COMMON     6     5      1
 ---------------------------------------------------------------------------------
 (3) ___lbdiv                                              4     3      1     321
                                              6 COMMON     4     3      1
                            ___lbmod (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftmul                                             15     9      6    4077
                                              3 BANK0     15     9      6
                            ___awdiv (ARG)
                            ___awmod (ARG)
                             ___bmul (ARG)
                           ___ftpack
                            ___lbdiv (ARG)
                            ___lbmod (ARG)
 ---------------------------------------------------------------------------------
 (3) ___bmul                                               3     2      1     560
                                              0 BANK0      3     2      1
                            ___awdiv (ARG)
                            ___awmod (ARG)
                            ___lbdiv (ARG)
                            ___lbmod (ARG)
 ---------------------------------------------------------------------------------
 (2) __tdiv_to_l_                                         15     9      6     409
                                              0 COMMON     9     3      6
                                              0 BANK0      6     6      0
 ---------------------------------------------------------------------------------
 (2) __div_to_l_                                          20    14      6     552
                                              0 COMMON    14     8      6
                                              0 BANK0      6     6      0
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4    1276
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lltoft                                             5     1      4    2069
                                              8 COMMON     5     1      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___llmod                                             10     2      8     477
                                              0 COMMON    10     2      8
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             14     6      8     374
                                              0 COMMON    14     6      8
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             13     9      4     411
                                             25 BANK0     13     9      4
                            ___ftmul (ARG)
                              _scale (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftsub                                              6     0      6    3172
                                             40 BANK0      6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftadd                                             12     6      6    2999
                                             28 BANK0     12     6      6
                           ___ftpack
                             _fround (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftneg                                              3     0      3      98
                                              0 COMMON     3     0      3
 ---------------------------------------------------------------------------------
 (2) ___ftge                                               6     0      6     560
                                              0 COMMON     6     0      6
 ---------------------------------------------------------------------------------
 (1) ___awtoft                                             4     1      3    2197
                                              8 COMMON     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             8     3      5    1947
                                              0 COMMON     8     3      5
 ---------------------------------------------------------------------------------
 (1) _Lcd_Write_String                                     7     5      2     586
                                              5 COMMON     7     5      2
                     _Lcd_Write_Char
 ---------------------------------------------------------------------------------
 (2) _Lcd_Write_Char                                       4     4      0     178
                                              1 COMMON     4     4      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (1) _Lcd_Set_Cursor                                       6     5      1     698
                                              4 COMMON     6     5      1
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (1) _Lcd_Init                                             2     2      0     198
                                              4 COMMON     2     2      0
                            _Lcd_Cmd
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (2) _Lcd_Cmd                                              3     3      0     110
                                              1 COMMON     3     3      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (3) _Lcd_Port                                             1     1      0      88
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Lcd_Init
     _Lcd_Cmd
       _Lcd_Port
     _Lcd_Port
   _Lcd_Set_Cursor
     _Lcd_Cmd
   _Lcd_Write_String
     _Lcd_Write_Char
       _Lcd_Port
   ___awtoft
     ___ftpack
   ___ftmul
     ___awdiv (ARG)
       ___awmod (ARG)
     ___awmod (ARG)
     ___bmul (ARG)
       ___awdiv (ARG)
       ___awmod (ARG)
       ___lbdiv (ARG)
         ___lbmod (ARG)
       ___lbmod (ARG)
     ___ftpack (ARG)
     ___lbdiv (ARG)
     ___lbmod (ARG)
   _sprintf
     ___awdiv
     ___ftadd
       ___ftpack
       _fround (ARG)
         ___bmul
         ___ftmul
         ___lbdiv
         ___lbmod
     ___ftge
     ___ftmul
     ___ftneg
     ___ftsub
       ___ftadd
       ___lltoft (ARG)
         ___ftpack
     ___fttol
       ___ftmul (ARG)
       _scale (ARG)
         ___awdiv
         ___awmod
         ___bmul
         ___ftmul
     ___lldiv
     ___llmod
     ___lltoft
     ___wmul
     __div_to_l_
     __tdiv_to_l_
     _fround
     _isdigit
     _scale

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      E       E       1      100.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0      80       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     4F      4F       5       98.8%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50     11      23       7       43.8%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0      80      12        0.0%


Microchip Technology PIC Macro Assembler V2.45 build 20230818022343 
Symbol Table                                                                                   Fri Dec 22 21:14:21 2023

                       pc 0002            ___bmul@product 0021                        _D0 00AF  
                      _D1 00AC                        _D2 00A9                        l50 163A  
                      l51 163E                        l52 163F                        l53 1643  
                      l54 1644                        l55 1648                        l49 1639  
                      l90 0F0D                        l93 0F88                        l87 0E92  
            ___awdiv@sign 007B                        fsr 0004       ___wmul@multiplicand 0072  
            ___ftadd@exp1 0047              ___ftadd@exp2 0046              ___ftadd@sign 0045  
                     l226 03FB                       _AN0 00A6                       l513 0A60  
                     _AN1 00A3                       l514 0A68                       _AN2 00A0  
                     l267 07CA                       l277 16A8                       l614 0AD2  
                     l631 1698                       l537 0CDF                       l573 0B81  
                     l494 0125                       l486 00F9                       _RC0 0038  
                     _RC2 003A                       _RD4 0044                       _RD5 0045  
                     _RD6 0046                       _RD7 0047                       fsr0 0004  
                     indf 0000              ___awmod@sign 0075               _sprintf$818 0058  
                    l2003 0CF1                      l2007 0D03                      l2017 0D26  
                    l2033 0BC1                      l2201 0316                      l2051 0BE0  
                    l2027 0BAD                      l2107 1683                      l2063 0C06  
                    l2055 0BF0                      l2207 0379                      l2225 0B05  
                    l2403 08A1                      l2315 0111                      l2251 0B5A  
                    l2243 0B3A                      l2067 0C16                      l2219 1621  
                    l2413 0A97                      l2333 16A0                      l2261 0B6D  
                    l2229 0B0E                      l2431 0ABE                      l2327 0134  
                    l2319 0121                      l2087 16C6                      l2167 0E4D  
                    l2159 0DE2                      l2183 01ED                      l2521 173C  
                    l2409 0A8E                      l2353 09C7                      l2273 0B90  
                    l2265 0B7D                      l2089 16CF                      l2193 026B  
                    l2601 0508                      l1811 0A24                      l2443 0AE1  
                    l2435 0ACE                      l2363 09FF                      l2355 09D7  
                    l2283 004A                      l2099 16DE                      l2531 03AD  
                    l2461 08CF                      l1901 094F                      l2189 0250  
                    l2613 0562                      l2605 0532                      l1823 0A4B  
                    l1815 0A30                      l1807 0A1D                      l2375 171C  
                    l2447 0AEF                      l2367 0A0C                      l2279 0041  
                    l2703 07B5                      l2631 05E7                      l1817 0A35  
                    l2465 08ED                      l2481 0018                      l1905 0957  
                    l1921 17C6                      l2617 0579                      l2705 07BA  
                    l1827 0A5E                      l2379 172B                      l2459 08BF  
                    l2299 00A3                      l1851 1625                      l1931 17DA  
                    l2627 05AB                      l2563 041F                      l2555 03FD  
                    l2547 03C0                      l2723 0397                      l1829 0A50  
                    l2469 08FA                      l1917 17BF                      l2717 07E0  
                    l2661 0692                      l2645 0625                      l2637 05E9  
                    l2573 0456                      l2725 07F0                      l2557 040F  
                    l2549 03F7                      l2495 1796                      l2479 0006  
                    l1855 162B                      l1943 17FB                      l1935 17E8  
                    l2737 166C                      l1953 0C62                      l1873 090D  
                    l1929 17CC                      l2681 06D8                      l2673 06BF  
                    l1963 0C78                      l1891 092E                      l1939 17F3  
                    l2667 06A3                      l2659 0632                      l1981 0CA5  
                    l1957 0C69                      l2597 04EF                      l2589 04B2  
                    l2765 0E8D                      l1975 0C90                      l1879 0918  
                    l1985 0CB1                      l1897 0944                      l1889 0920  
                    l2697 07A6                      l1995 0CCF                      l1987 0CB6  
                    l1989 0CBA                      l1999 0CDB                      STR_1 0895  
                    STR_2 0886                      STR_3 0895                      STR_4 088B  
                    STR_5 0895                      STR_6 0890                      u2015 0A44  
                    u2035 0A57                      u2205 092F                      u2215 093B  
                    u3105 012A                      u3025 00A5                      u2225 0945  
                    u2305 17E0                      u2075 0A6F                      u3035 00D4  
                    u2315 17E9                      u3205 09EE                      u3215 0A00  
                    u3135 16A9                      u3145 16B0                      u2185 0923  
                    u2435 0C91                      u3075 0112                      u2525 0CD0  
                    u3325 0ABF                      u2285 17CF                      u3175 09CB  
                    u3415 08DD                      u2465 0CA6                      u3425 08EE  
                    u2625 0BF1                      u3355 0AD7                      u3195 09D9  
                    u2635 0BF9                      u3445 000B                      u3605 046C  
                    u2495 0CBB                      u3295 0A9E                      u2905 0B4D  
                    u2745 1686                      u3705 05EC                      u3475 1781  
                    u3395 08C3                      u2915 0B5B                      u2675 0C17  
                    u3715 061B                      u2685 0C1F                      u3805 0770  
                    u3645 0511                      u3495 17A0                      u2775 16EB  
                    u3655 053D                      u3745 063A                      u1995 0A29  
                    u2955 0B6E                      u3765 06AC                      u3685 0560  
                    u2895 0B3C                      u3855 07D1                      u3775 06B9  
                    u3937 16F9                      u2985 0B86                      u3865 07DE  
                    u3947 1707                      u3795 0710                      u3957 0966  
                    u3967 0975                      u3977 0983                      u3987 1659  
       ?_Lcd_Write_String 0075                      _main 0E79              ___ftpack@arg 0070  
            ___ftpack@exp 0073                      btemp 007E                      start 0000  
      ??_Lcd_Write_String 0077           __end_of_Lcd_Cmd 1662         ___bmul@multiplier 0022  
            ___ftmul@cntr 0030              ___ftmul@sign 0031              ___fttol@exp1 0045  
            ___fttol@lval 0041                     ?_main 0070           __end_of___awdiv 095C  
         __end_of___lbdiv 16E0           __end_of___ftadd 0D3B           __end_of___awmod 1800  
         __end_of___lbmod 169E           __end_of___ftneg 160D           __end_of___lldiv 0A15  
         __end_of___ftmul 0C3F           ___awdiv@divisor 0076           __end_of___llmod 0903  
         __end_of___ftsub 08B7           __end_of___fttol 0AF8           ___awdiv@counter 007A  
                   _PORTC 0007                     _PORTD 0008                     _TRISA 0085  
                   _TRISC 0087                     _TRISD 0088              ___lltoft@exp 007C  
           ___awtoft@sign 007B           __end_of_dpowers 0886                     _scale 013D  
         __end_of_isdigit 1623             ___ftpack@sign 0074                     pclath 000A  
                   status 0003                     wtemp0 007E           __end_of_sprintf 07F5  
         ___lbdiv@divisor 0076           ___lbdiv@counter 0078          __end_of_Lcd_Init 09B7  
        __end_of_Lcd_Port 164A          main@char_digital 00B4           __initialization 07F5  
            __end_of_main 1000                    ??_main 00B2             ___fttol@sign1 0040  
        ___llmod@dividend 0074                    ?_scale 0032                    _ADRESH 001E  
                  _ADRESL 009E          ___awdiv@dividend 0078          __end_of___awtoft 167F  
        __end_of___ftpack 0A81          __end_of___lltoft 002B                 ??_Lcd_Cmd 0071  
        __end_of__powers_ 0837                    ___bmul 1623                    ___ftge 170D  
                  ___wmul 169E                 ??___awdiv 007A                 ??___lbdiv 0077  
               ??___ftadd 0042                 ??___awmod 0074                 ??___lbmod 0071  
               ??___ftneg 0073                 ??___lldiv 0078                 ??___ftmul 0029  
               ??___llmod 0078                 ??___ftsub 007E                 ??___fttol 003D  
                  _fround 0D3B          ___awdiv@quotient 007C           ___awmod@divisor 0070  
         ___awmod@counter 0074     ___ftmul@f3_as_product 002D                 ??_isdigit 0070  
               ??_sprintf 0052          ___lbdiv@dividend 0077           Lcd_Set_Cursor@a 0076  
         Lcd_Set_Cursor@b 0074           Lcd_Set_Cursor@y 0078           Lcd_Set_Cursor@z 0077  
         ___lbmod@divisor 0070   __end_of__initialization 07FC           ___lbmod@counter 0074  
              ___ftadd@f1 003C                ___ftadd@f2 003F                ___ftge@ff1 0070  
              ___ftge@ff2 0073                ___ftneg@f1 0070                ___awtoft@c 0078  
     ___bmul@multiplicand 0020                ___ftmul@f1 0023                ___ftmul@f2 0026  
              ___ftsub@f1 004B                ___ftsub@f2 0048                ___fttol@f1 0039  
          __pcstackCOMMON 0070                ___lltoft@c 0078             __end_of_scale 0394  
        ___lbdiv@quotient 0079            _Lcd_Set_Cursor 1777                __div_to_l_ 002B  
               ?_Lcd_Init 0070                 ?_Lcd_Port 0070           __div_to_l_@exp1 0025  
         __div_to_l_@cntr 0024                   ??_scale 007E           __div_to_l_@quot 0020  
              __pbssBANK1 00A0             __div_to_l_@f1 0070             __div_to_l_@f2 0073  
              __pmaintext 0E79                   ?___bmul 0020                   ?___ftge 0070  
                 ?___wmul 0070                   ?_fround 0032                 ?___awtoft 0078  
               ?___ftpack 0070    __end_of_Lcd_Set_Cursor 17B5                 ?___lltoft 0078  
              ??_Lcd_Init 0074                ??_Lcd_Port 0070                __stringtab 0800  
          _Lcd_Write_Char 16E0                   _Lcd_Cmd 164A         __end_of__npowers_ 085E  
                 ___awdiv 0903                   ___lbdiv 16BF                   ___ftadd 0C3F  
                 ___awmod 17B5                   ___lbmod 167F                   ___ftneg 1605  
                 ___lldiv 09B7                   ___ftmul 0B99                   ___llmod 08B7  
                 ___ftsub 089A                   ___fttol 0A81                _fround$815 0038  
              _fround$816 0035                ??___awtoft 007B                ??___ftpack 0075  
         ?_Lcd_Set_Cursor 0074                ??___lltoft 007C                   __ptext1 0394  
                 __ptext2 013D                   __ptext3 17B5                   __ptext4 0903  
                 __ptext5 1615                   __ptext6 0D3B                   __ptext7 167F  
                 __ptext8 16BF                   __ptext9 0B99               ?__div_to_l_ 0070  
                 _dpowers 085E                   _isdigit 1615          ___awmod@dividend 0072  
                 _sprintf 0394                   clrloop0 160E    __end_of_Lcd_Write_Char 170D  
    end_of_initialization 07FC           ___lldiv@divisor 0070           ___lldiv@counter 007D  
               Lcd_Port@a 0070            __tdiv_to_l_@f1 0070            __tdiv_to_l_@f2 0073  
           ??__tdiv_to_l_ 0076          ___lbmod@dividend 0073           ?_Lcd_Write_Char 0070  
       Lcd_Write_String@a 0075         Lcd_Write_String@i 007A               ___lbmod@rem 0075  
             ___ftmul@exp 002C            __end_of___bmul 1634            __end_of___ftge 173A  
          __end_of___wmul 16BF          _Lcd_Write_String 173A            __end_of_fround 0E79  
     start_initialization 07F5       __end_of__tdiv_to_l_ 0B99           ___llmod@divisor 0070  
         ___llmod@counter 0079                  ??___bmul 007E                  ??___ftge 0076  
                ??___wmul 0074           Lcd_Write_Char@a 0074           Lcd_Write_Char@y 0073  
                ??_fround 007E             sprintf@tmpval 0064                fround@prec 003B  
               ___latbits 0002             __pcstackBANK0 0020             __pcstackBANK1 00B2  
                ?_Lcd_Cmd 0070               sprintf@flag 005C               sprintf@eexp 0062  
             sprintf@fval 006B               sprintf@prec 0068          ??_Lcd_Set_Cursor 0075  
                ?___awdiv 0076                  ?___lbdiv 0076                  ?___ftadd 003C  
                ?___awmod 0070                  ?___lbmod 0070                  ?___ftneg 0070  
                ?___lldiv 0070                  ?___ftmul 0023                  ?___llmod 0070  
                ?___ftsub 0048                 __npowers_ 0837                  ?___fttol 0039  
               __pstrings 0800               __tdiv_to_l_ 0AF8              ??__div_to_l_ 0076  
                ?_isdigit 0070                 _scale$817 0035                  ?_sprintf 004E  
          ___wmul@product 0074                 clear_ram0 160D                  Lcd_Cmd@a 0073  
      __end_of__div_to_l_ 013D                _ADCON0bits 001F               __stringbase 080F  
              _ADCON1bits 009F         ___wmul@multiplier 0070          ??_Lcd_Write_Char 0071  
                _Lcd_Init 095C                  _Lcd_Port 1634  __end_of_Lcd_Write_String 1777  
                ___awtoft 1662                  ___ftpack 0A15        __end_of__stringtab 0810  
                ___lltoft 0004               _isdigit$619 0070                sprintf@val 005E  
                __ptext10 1623                  __ptext11 0AF8                  __ptext20 1605  
                __ptext12 002B                  __ptext21 170D                  __ptext13 169E  
                __ptext22 1662                  __ptext14 0004                  __ptext23 0A15  
                __ptext15 08B7                  __ptext24 173A                  __ptext16 09B7  
                __ptext25 16E0                  __ptext17 0A81                  __ptext26 1777  
                __ptext18 089A                  __ptext27 095C                  __ptext19 0C3F  
                __ptext28 164A                  __ptext29 1634                  __powers_ 0810  
                isdigit@c 0071                  scale@scl 0038        Lcd_Write_Char@temp 0072  
               sprintf@ap 005B          __tdiv_to_l_@exp1 0025                 sprintf@sp 006A  
        __tdiv_to_l_@cntr 0024          __tdiv_to_l_@quot 0020          ___lldiv@dividend 0074  
               stringcode 080A        Lcd_Set_Cursor@temp 0079              ?__tdiv_to_l_ 0070  
                sprintf@c 006E                  sprintf@f 004E          ___lldiv@quotient 0079  
                stringdir 080A                  stringtab 0800  
